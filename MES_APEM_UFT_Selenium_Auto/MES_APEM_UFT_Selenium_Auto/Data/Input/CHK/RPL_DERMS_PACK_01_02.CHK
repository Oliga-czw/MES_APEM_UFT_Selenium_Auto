RPL_DERMS_PACK_01_02:library.component.recipeContainer
  id: 0
  height: 1748
  width: 1065
  arguments:
    ValidatedWorkcenters;19;{"DBUCP71"};Workcenters;;=STRUCT_GATHER(GET_EQUIPMENT_LIST("type='Process Cell'"), "[*].name");true;;
    RecipeIdentifier;19;{"60000000102818_0000"};Recipe Identifier;;;true;;
    PONotes;19;{"PO Notes Present"};PO Notes;;;true;;
    SetSerialisedTypeBs_iSignal_Name;19;{"SerialisedType"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
    SetSerialisedTypeBs_iSignal_Value;19;{"N/A"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
    SetParametersBs_iSet_VarName;19;{"vs_LCEqp","EqpAllChall","vs_Alarm1","Eqp1Chall","Eqp1ChallType","Eqp2Chall","Eqp2ChallType","Eqp3Chall","Eqp3ChallType","2ndCheckweigher","DecomChecks","vs_ProductType","2ndMachineSpeed","NewTypeChkWeigher","BULsOnly"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
    SetParametersBs_iSet_VarValue;16;{"CP71LCPACK","All equipment to be challeged","Overprint must be signed off","Equipment ID: 23063476.  Description: MA357 Cartonner.","Type:  Cartonner","Equipment ID: 23063477.  Description: Neri BL400/VTE/XL Labeller.","Type:  Labeller","Equipment ID: 23063604.  Description: IMA CP18 MiniFlex Case Packer/Palletiser.","Type:  Casepacker","No","No","tube","No","No","No"};Value to set to the global variable;;;true;;
    SetParameters2Bs_iSet_VarName;19;{"TubesPerOuter","OutersPerPallet","BULPackQty"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
    SetParameters2Bs_iSet_VarValue;16;{100,30,0};Value to set to the global variable;;;true;;
    MachineSpeedBp_iMeasurement1_Type;3;"MachineSpeed1";Measurement type1;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));false;;
    MachineSpeedBp_iMeasurement1_Minimum;2;105;Minimum warning value1;;;true;;
    MachineSpeedBp_iMeasurement1_Target;2;161;Target value1;;;true;;
    MachineSpeedBp_iMeasurement1_Maximum;2;161;Maximum warning value1;;;true;;
    MachineSpeed2Bp_iMeasurement1_Type;3;"MachineSpeed2";Measurement type1;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));false;;
    MachineSpeed2Bp_iMeasurement1_Minimum;2;0;Minimum warning value1;;;true;;
    MachineSpeed2Bp_iMeasurement1_Target;2;0;Target value1;;;true;;
    MachineSpeed2Bp_iMeasurement1_Maximum;2;0;Maximum warning value1;;;true;;
    SamplingBp_iPlanned_Sample_Units;18;{1};List of planned samples Units;;;true;;
    ChallengeRequiredBp_iCheckList_Option;19;{"All Equipment to be challenged","Equipment ID: 23063476.  Description: MA357 Cartonner.","Equipment ID: 23063477.  Description: Neri BL400/VTE/XL Labeller.","Equipment ID: 23063604.  Description: IMA CP18 MiniFlex Case Packer/Palletiser."};Check List lines to follow;;;false;;
    ChallengeRequiredBp_iCheckList_SigReq;19;{NULL,NULL,NULL,NULL};Required signature level for the option;;1 signature,2 signatures;true;;
    Challenge1Bp_iChecklist;19;{"Carton Barcode","Leaflet Barcode","Leaflet Presence","Tube Presence"};List of Checks to be completed;;;false;;
    Challenge2Bp_iChecklist;19;{"Carton Overprint","Label Barcode","Missing Label"};List of Checks to be completed;;;false;;
    Challenge3Bp_iChecklist;19;{"Outer Label Presence Check"};List of Checks to be completed;;;false;;
    Challenge4Bp_iChecklist;19;{"N/A"};List of Checks to be completed;;;false;;
    Challenge5Bp_iChecklist;19;{"N/A"};List of Checks to be completed;;;false;;
    Challenge6Bp_iChecklist;19;{"N/A"};List of Checks to be completed;;;false;;
    Challenge7Bp_iChecklist;19;{"N/A"};List of Checks to be completed;;;false;;
    Challenge8Bp_iChecklist;19;{"N/A"};List of Checks to be completed;;;false;;
    Chall1ConditionsBs_iSignal_Name;19;{"Challenge1","Challenge1","Challenge1","Challenge1","Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
    Chall1ConditionsBs_iSignal_Value;19;{"SOB","StartShift","EOB","Adhoc1","AdhocAll"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
    Chall2ConditionsBs_iSignal_Name;19;{"Challenge1","Challenge1","Challenge1","Challenge1","Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
    Chall2ConditionsBs_iSignal_Value;19;{"SOB","StartShift","EOB","Adhoc2","AdhocAll"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
    Chall3ConditionsBs_iSignal_Name;19;{"Challenge1","Challenge1","Challenge1","Challenge1","Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
    Chall3ConditionsBs_iSignal_Value;19;{"SOB","StartShift","EOB","Adhoc3","AdhocAll"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
    Chall4ConditionsBs_iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
    Chall4ConditionsBs_iSignal_Value;19;{"N/A"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
    Chall5ConditionsBs_iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
    Chall5ConditionsBs_iSignal_Value;19;{"N/A"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
    Chall6ConditionsBs_iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
    Chall6ConditionsBs_iSignal_Value;19;{"N/A"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
    Chall7ConditionsBs_iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
    Chall7ConditionsBs_iSignal_Value;19;{"N/A"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
    Chall8ConditionsBs_iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
    Chall8ConditionsBs_iSignal_Value;19;{"N/A"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
    PharmacodeSetupBp_iSetup_SignatureRequired;19;{"1 signature","1 signature","1 signature"};Required signature level for Setup component;;={"Ok button","1 signature","2 signatures"};true;;
    PharmacodeSetupBp_iSetup_SignaturePermission2ndLevel;19;{"OPERATOR","OPERATOR","OPERATOR"};RUDO for second level signature for Setup component;;=GET_UDOS();true;;
    PharmacodeSetupBp_iSetup_SignatureMeaning2ndLevel;19;{NULL,NULL,NULL};Signature meaning for 2nd level signature for Setup component;;;true;;
    PharmacodeSetupBp_iSetup_ComponentType;19;{"Carton Pharmacode","Leaflet Pharmacode","Price Label Pharmacode"};Setup Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    PharmacodeSetupBp_iSetup_ComponentAction;19;{"Setup","Setup","Setup"};Setup Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    PharmacodeSetupBp_iSetup_ComponentReason;19;{"New Batch","New Batch","New Batch"};Setup Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentSetupReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    PharmacodeSetupBp_iSetup_Instruction;19;{"Setup Pharmacode Batch Specific Data","Setup Pharmacode Batch Specific Data","Setup Pharmacode Batch Specific Data"};Setup Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    PharmacodeSetupBp_iSetup_AdditionalInfo1Label;19;{NULL,NULL,NULL};Setup additional info label 1;;;true;;
    PharmacodeSetupBp_iSetup_AdditionalInfo1Value;19;{NULL,NULL,NULL};Setup additional info value 1;;;true;;
    PharmacodeSetupBp_iSetup_AdditionalInfo2Label;19;{NULL,NULL,NULL};Setup additional info label 2;;;true;;
    PharmacodeSetupBp_iSetup_AdditionalInfo2Value;19;{NULL,NULL,NULL};Setup additional info value 2;;;true;;
    PharmacodeSetupBp_iSetup_AdditionalInfo3Label;19;{NULL,NULL,NULL};Setup additional info label 3;;;true;;
    PharmacodeSetupBp_iSetup_AdditionalInfo3Value;19;{NULL,NULL,NULL};Setup additional info value 3;;;true;;
    PharmacodeSetupBp_iSetup_RequirePassFail;17;{NO,NO,NO};Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
    PharmacodeSetupBp_iSetup_Display;19;{"Adhoc and Expected","Adhoc and Expected","Adhoc and Expected"};Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    PharmacodeVerBp_iSetup_Display;19;{"Adhoc and Expected","Adhoc and Expected","Adhoc and Expected"};Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    PharmacodeVerBp_iSetup_SignatureRequired;19;{"1 signature","1 signature","1 signature"};Required signature level for Setup component;;={"Ok button","1 signature","2 signatures"};true;;
    PharmacodeVerBp_iSetup_SignaturePermission2ndLevel;19;{"OPERATOR","OPERATOR","OPERATOR"};RUDO for second level signature for Setup component;;=GET_UDOS();true;;
    PharmacodeVerBp_iSetup_SignatureMeaning2ndLevel;19;{NULL,NULL,NULL};Signature meaning for 2nd level signature for Setup component;;;true;;
    PharmacodeVerBp_iSetup_ComponentType;19;{"Carton Pharmacode","Leaflet Pharmacode","Price Label Pharmacode"};Setup Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    PharmacodeVerBp_iSetup_ComponentAction;19;{"Verification","Verification","Verification"};Setup Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    PharmacodeVerBp_iSetup_ComponentReason;19;{"New Batch","New Batch","New Batch"};Setup Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentSetupReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    PharmacodeVerBp_iSetup_Instruction;19;{"Verify Pharmacode Batch Specific Data","Verify Pharmacode Batch Specific Data","Verify Pharmacode Batch Specific Data"};Setup Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    PharmacodeVerBp_iSetup_AdditionalInfo1Label;19;{NULL,NULL,NULL};Setup additional info label 1;;;true;;
    PharmacodeVerBp_iSetup_AdditionalInfo1Value;19;{NULL,NULL,NULL};Setup additional info value 1;;;true;;
    PharmacodeVerBp_iSetup_AdditionalInfo2Label;19;{NULL,NULL,NULL};Setup additional info label 2;;;true;;
    PharmacodeVerBp_iSetup_AdditionalInfo2Value;19;{NULL,NULL,NULL};Setup additional info value 2;;;true;;
    PharmacodeVerBp_iSetup_AdditionalInfo3Label;19;{NULL,NULL,NULL};Setup additional info label 3;;;true;;
    PharmacodeVerBp_iSetup_AdditionalInfo3Value;19;{NULL,NULL,NULL};Setup additional info value 3;;;true;;
    PharmacodeVerBp_iSetup_RequirePassFail;17;{YES,YES,YES};Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
    OverprintStartBatch_iSetup_Display;19;{"Adhoc and Expected"};Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintStartBatch_iSetup_SignatureRequired;19;{"1 signature"};Required signature level for Setup component;;={"Ok button","1 signature","2 signatures"};true;;
    OverprintStartBatch_iSetup_SignaturePermission2ndLevel;19;{"OPERATOR"};RUDO for second level signature for Setup component;;=GET_UDOS();true;;
    OverprintStartBatch_iSetup_SignatureMeaning2ndLevel;19;{NULL};Signature meaning for 2nd level signature for Setup component;;;true;;
    OverprintStartBatch_iSetup_ComponentType;19;{"Carton"};Setup Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintStartBatch_iSetup_ComponentAction;19;{"Setup"};Setup Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintStartBatch_iSetup_ComponentReason;19;{"New Batch"};Setup Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentSetupReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintStartBatch_iSetup_Instruction;19;{"Setup Overprint Batch Specific Data"};Setup Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintStartBatch_iSetup_RequirePassFail;17;{NO};Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
    AltOverprintStartBatch_iSetup_Display;19;{"Adhoc and Expected","Adhoc and Expected"};Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintStartBatch_iSetup_SignatureRequired;19;{"1 signature","1 signature"};Required signature level for Setup component;;={"Ok button","1 signature","2 signatures"};true;;
    AltOverprintStartBatch_iSetup_SignaturePermission2ndLevel;19;{"OPERATOR","OPERATOR"};RUDO for second level signature for Setup component;;=GET_UDOS();true;;
    AltOverprintStartBatch_iSetup_SignatureMeaning2ndLevel;19;{NULL,NULL};Signature meaning for 2nd level signature for Setup component;;;true;;
    AltOverprintStartBatch_iSetup_ComponentType;19;{"Carton","PUL Label"};Setup Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintStartBatch_iSetup_ComponentAction;19;{"Setup","Check"};Setup Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintStartBatch_iSetup_ComponentReason;19;{"New Batch","New Batch"};Setup Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentSetupReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintStartBatch_iSetup_Instruction;19;{"Setup Overprint Batch Specific Data","Confirm Batch Specific Data is printed correctly and attach the sample label to the BDS."};Setup Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintStartBatch_iSetup_RequirePassFail;17;{NO,NO};Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
    OverprintStartVerBp_iSetup_Display;19;{"Adhoc and Expected"};Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintStartVerBp_iSetup_SignatureRequired;19;{"2 signatures"};Required signature level for Setup component;;={"Ok button","1 signature","2 signatures"};true;;
    OverprintStartVerBp_iSetup_SignaturePermission2ndLevel;19;{"OPERATOR"};RUDO for second level signature for Setup component;;=GET_UDOS();true;;
    OverprintStartVerBp_iSetup_SignatureMeaning2ndLevel;19;{"Overprint has been verified"};Signature meaning for 2nd level signature for Setup component;;;true;;
    OverprintStartVerBp_iSetup_ComponentType;19;{"Carton"};Setup Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintStartVerBp_iSetup_ComponentAction;19;{"Verification"};Setup Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintStartVerBp_iSetup_ComponentReason;19;{"New Batch"};Setup Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentSetupReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintStartVerBp_iSetup_Instruction;19;{"Verify Overprint Batch Specific Data"};Setup Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintStartVerBp_iSetup_RequirePassFail;17;{YES};Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
    AltOverprintStartVerBp_iSetup_Display;19;{"Adhoc and Expected","Adhoc and Expected"};Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintStartVerBp_iSetup_SignatureRequired;19;{"2 signatures","2 signatures"};Required signature level for Setup component;;={"Ok button","1 signature","2 signatures"};true;;
    AltOverprintStartVerBp_iSetup_SignaturePermission2ndLevel;19;{"OPERATOR","OPERATOR"};RUDO for second level signature for Setup component;;=GET_UDOS();true;;
    AltOverprintStartVerBp_iSetup_SignatureMeaning2ndLevel;19;{"Overprint has been verified","Overprint has been verified"};Signature meaning for 2nd level signature for Setup component;;;true;;
    AltOverprintStartVerBp_iSetup_ComponentType;19;{"Carton","Carton 2D Code"};Setup Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintStartVerBp_iSetup_ComponentAction;19;{"Verification","Verification"};Setup Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintStartVerBp_iSetup_ComponentReason;19;{"New Batch","New Batch"};Setup Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentSetupReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintStartVerBp_iSetup_Instruction;19;{"Verify Overprint Batch Specific Data","Verify Overprint Batch Specific Data"};Setup Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintStartVerBp_iSetup_RequirePassFail;17;{YES,YES};Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
    PharmacodeReVerBp_iSetup_Display;19;{"Adhoc and Expected","Adhoc and Expected","Adhoc and Expected"};Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    PharmacodeReVerBp_iSetup_SignatureRequired;19;{"1 signature","1 signature","1 signature"};Required signature level for Setup component;;={"Ok button","1 signature","2 signatures"};true;;
    PharmacodeReVerBp_iSetup_SignaturePermission2ndLevel;19;{"OPERATOR","OPERATOR","OPERATOR"};RUDO for second level signature for Setup component;;=GET_UDOS();true;;
    PharmacodeReVerBp_iSetup_SignatureMeaning2ndLevel;19;{NULL,NULL,NULL};Signature meaning for 2nd level signature for Setup component;;;true;;
    PharmacodeReVerBp_iSetup_ComponentType;19;{"Carton Pharmacode","Leaflet Pharmacode","Price Label Pharmacode"};Setup Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    PharmacodeReVerBp_iSetup_ComponentAction;19;{"Verification","Verification","Verification"};Setup Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    PharmacodeReVerBp_iSetup_ComponentReason;19;{"Print Adjustment","Print Adjustment","Print Adjustment"};Setup Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentSetupReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    PharmacodeReVerBp_iSetup_Instruction;19;{"Verify Pharmacode Batch Specific Data","Verify Pharmacode Batch Specific Data","Verify Pharmacode Batch Specific Data"};Setup Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    PharmacodeReVerBp_iSetup_AdditionalInfo1Label;19;{NULL,NULL,NULL};Setup additional info label 1;;;true;;
    PharmacodeReVerBp_iSetup_AdditionalInfo1Value;19;{NULL,NULL,NULL};Setup additional info value 1;;;true;;
    PharmacodeReVerBp_iSetup_AdditionalInfo2Label;19;{NULL,NULL,NULL};Setup additional info label 2;;;true;;
    PharmacodeReVerBp_iSetup_AdditionalInfo2Value;19;{NULL,NULL,NULL};Setup additional info value 2;;;true;;
    PharmacodeReVerBp_iSetup_AdditionalInfo3Label;19;{NULL,NULL,NULL};Setup additional info label 3;;;true;;
    PharmacodeReVerBp_iSetup_AdditionalInfo3Value;19;{NULL,NULL,NULL};Setup additional info value 3;;;true;;
    PharmacodeReVerBp_iSetup_RequirePassFail;17;{YES,YES,YES};Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
    ProductionReviewBp_iChecklist;19;{"Batch Header and original BDS print present","All additional documents have associated atypical events","Finished pack and overprint samples present with batch","Finished pack checked against batch header","SAP transactions complete","Confirm additional EU Samples have been taken as stipulated in SOP","Italian Bollini label data loaded onto site spreadsheet"};List of Checks to be completed;;;false;;
    LabelsPrinted1Bp_iProfile;3;"DERMS2_LabelsOffline1";Yields and Reconciliation profile;;=SQL_GET("Select Distinct NAME from YR_PROFILE_CONFIG ORDER BY NAME");false;;
    PULLabelsPrinted1Bp_iProfile;3;"DERMS2_LabelsOffline2";Yields and Reconciliation profile;;=SQL_GET("Select Distinct NAME from YR_PROFILE_CONFIG ORDER BY NAME");false;;
    BULLabelsPrinted1Bp_iProfile;3;"DERMS2_LabelsOffline3";Yields and Reconciliation profile;;=SQL_GET("Select Distinct NAME from YR_PROFILE_CONFIG ORDER BY NAME");false;;
    OverprintProdReviewBp_iRun_Display;19;{"Expected Only","Expected Only"};Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintProdReviewBp_iRun_SignatureRequired;19;{"1 signature","1 signature"};Required signature level for Run component;;={"Ok button","1 signature","2 signatures"};true;;
    OverprintProdReviewBp_iRun_SignaturePermission2ndLevel;19;{NULL,NULL};RUDO for second level signature for Run component;;=GET_UDOS();true;;
    OverprintProdReviewBp_iRun_SignatureMeaning2ndLevel;19;{NULL,NULL};Signature meaning for 2nd level signature for Run component;;;true;;
    OverprintProdReviewBp_iRun_ComponentType;19;{"Tube","Carton"};Run Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintProdReviewBp_iRun_ComponentAction;19;{"Verification","Verification"};Run Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintProdReviewBp_iRun_ComponentReason;19;{"End of Batch verification","End of Batch verification"};Run Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentRunReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintProdReviewBp_iRun_Instruction;19;{"Verify Overprint Batch Specific Data","Verify Overprint Batch Specific Data"};Run Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintProdReviewBp_iRun_AdditionalInfo1Label;19;{NULL,NULL};Run additional info label 1;;;true;;
    OverprintProdReviewBp_iRun_AdditionalInfo1Value;19;{NULL,NULL};Run additional info value 1;;;true;;
    OverprintProdReviewBp_iRun_AdditionalInfo2Label;19;{NULL,NULL};Run additional info label 2;;;true;;
    OverprintProdReviewBp_iRun_AdditionalInfo2Value;19;{NULL,NULL};Run additional info value 2;;;true;;
    OverprintProdReviewBp_iRun_AdditionalInfo3Label;19;{NULL,NULL};Run additional info label 3;;;true;;
    OverprintProdReviewBp_iRun_AdditionalInfo3Value;19;{NULL,NULL};Run additional info value 3;;;true;;
    OverprintProdReviewBp_iRun_RequirePassFail;17;{YES,YES};Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
    AltOverprintProdReviewBp_iRun_Display;19;{"Expected Only","Expected Only","Expected Only"};Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintProdReviewBp_iRun_SignatureRequired;19;{"1 signature","1 signature","1 signature"};Required signature level for Run component;;={"Ok button","1 signature","2 signatures"};true;;
    AltOverprintProdReviewBp_iRun_SignaturePermission2ndLevel;19;{NULL,NULL,NULL};RUDO for second level signature for Run component;;=GET_UDOS();true;;
    AltOverprintProdReviewBp_iRun_SignatureMeaning2ndLevel;19;{NULL,NULL,NULL};Signature meaning for 2nd level signature for Run component;;;true;;
    AltOverprintProdReviewBp_iRun_ComponentType;19;{"Tube","Carton","Carton 2D Code"};Run Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintProdReviewBp_iRun_ComponentAction;19;{"Verification","Verification","Verification"};Run Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintProdReviewBp_iRun_ComponentReason;19;{"End of Batch verification","End of Batch verification","End of Batch verification"};Run Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentRunReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintProdReviewBp_iRun_Instruction;19;{"Verify Overprint Batch Specific Data","Verify Overprint Batch Specific Data","Verify Overprint Batch Specific Data"};Run Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintProdReviewBp_iRun_AdditionalInfo1Label;19;{NULL,NULL,NULL};Run additional info label 1;;;true;;
    AltOverprintProdReviewBp_iRun_AdditionalInfo1Value;19;{NULL,NULL,NULL};Run additional info value 1;;;true;;
    AltOverprintProdReviewBp_iRun_AdditionalInfo2Label;19;{NULL,NULL,NULL};Run additional info label 2;;;true;;
    AltOverprintProdReviewBp_iRun_AdditionalInfo2Value;19;{NULL,NULL,NULL};Run additional info value 2;;;true;;
    AltOverprintProdReviewBp_iRun_AdditionalInfo3Label;19;{NULL,NULL,NULL};Run additional info label 3;;;true;;
    AltOverprintProdReviewBp_iRun_AdditionalInfo3Value;19;{NULL,NULL,NULL};Run additional info value 3;;;true;;
    AltOverprintProdReviewBp_iRun_RequirePassFail;17;{YES,YES,YES};Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
    OverprintRunReverBp_iRun_Display;19;{"Adhoc and Expected"};Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintRunReverBp_iRun_SignatureRequired;19;{"2 signatures"};Required signature level for Run component;;={"Ok button","1 signature","2 signatures"};true;;
    OverprintRunReverBp_iRun_SignaturePermission2ndLevel;19;{"OPERATOR"};RUDO for second level signature for Run component;;=GET_UDOS();true;;
    OverprintRunReverBp_iRun_SignatureMeaning2ndLevel;19;{"Overprint has been verified"};Signature meaning for 2nd level signature for Run component;;;true;;
    OverprintRunReverBp_iRun_ComponentType;19;{"Carton"};Run Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintRunReverBp_iRun_ComponentAction;19;{"Re Verification"};Run Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintRunReverBp_iRun_ComponentReason;19;{"Print Adjustment"};Run Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentRunReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintRunReverBp_iRun_Instruction;19;{"Verify Overprint Batch Specific Data"};Run Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintRunReverBp_iRun_AdditionalInfo1Label;19;{NULL};Run additional info label 1;;;true;;
    OverprintRunReverBp_iRun_AdditionalInfo1Value;19;{NULL};Run additional info value 1;;;true;;
    OverprintRunReverBp_iRun_AdditionalInfo2Label;19;{NULL};Run additional info label 2;;;true;;
    OverprintRunReverBp_iRun_AdditionalInfo2Value;19;{NULL};Run additional info value 2;;;true;;
    OverprintRunReverBp_iRun_AdditionalInfo3Label;19;{NULL};Run additional info label 3;;;true;;
    OverprintRunReverBp_iRun_AdditionalInfo3Value;19;{NULL};Run additional info value 3;;;true;;
    OverprintRunReverBp_iRun_RequirePassFail;17;{YES};Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
    AltOverprintRunReverBp_iRun_Display;19;{"Adhoc and Expected","Adhoc and Expected"};Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintRunReverBp_iRun_SignatureRequired;19;{"2 signatures","2 signatures"};Required signature level for Run component;;={"Ok button","1 signature","2 signatures"};true;;
    AltOverprintRunReverBp_iRun_SignaturePermission2ndLevel;19;{"OPERATOR","OPERATOR"};RUDO for second level signature for Run component;;=GET_UDOS();true;;
    AltOverprintRunReverBp_iRun_SignatureMeaning2ndLevel;19;{"Overprint has been verified","Overprint has been verified"};Signature meaning for 2nd level signature for Run component;;;true;;
    AltOverprintRunReverBp_iRun_ComponentType;19;{"Carton","Carton 2D Code"};Run Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintRunReverBp_iRun_ComponentAction;19;{"Re Verification","Re Verification"};Run Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintRunReverBp_iRun_ComponentReason;19;{"Print Adjustment","Print Adjustment"};Run Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentRunReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintRunReverBp_iRun_Instruction;19;{"Verify Overprint Batch Specific Data","Verify Overprint Batch Specific Data"};Run Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintRunReverBp_iRun_AdditionalInfo1Label;19;{NULL,NULL};Run additional info label 1;;;true;;
    AltOverprintRunReverBp_iRun_AdditionalInfo1Value;19;{NULL,NULL};Run additional info value 1;;;true;;
    AltOverprintRunReverBp_iRun_AdditionalInfo2Label;19;{NULL,NULL};Run additional info label 2;;;true;;
    AltOverprintRunReverBp_iRun_AdditionalInfo2Value;19;{NULL,NULL};Run additional info value 2;;;true;;
    AltOverprintRunReverBp_iRun_AdditionalInfo3Label;19;{NULL,NULL};Run additional info label 3;;;true;;
    AltOverprintRunReverBp_iRun_AdditionalInfo3Value;19;{NULL,NULL};Run additional info value 3;;;true;;
    AltOverprintRunReverBp_iRun_RequirePassFail;17;{YES,YES};Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
    OverprintEndBatchBp_iSetup_Display;19;{"Expected Only"};Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintEndBatchBp_iSetup_SignatureRequired;19;{"1 signature"};Required signature level for Setup component;;={"Ok button","1 signature","2 signatures"};true;;
    OverprintEndBatchBp_iSetup_SignaturePermission2ndLevel;19;{"OPERATOR"};RUDO for second level signature for Setup component;;=GET_UDOS();true;;
    OverprintEndBatchBp_iSetup_SignatureMeaning2ndLevel;19;{"Overprint verified"};Signature meaning for 2nd level signature for Setup component;;;true;;
    OverprintEndBatchBp_iSetup_ComponentType;19;{"Carton"};Setup Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintEndBatchBp_iSetup_ComponentAction;19;{"Verification"};Setup Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintEndBatchBp_iSetup_ComponentReason;19;{"End of Batch verification"};Setup Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentSetupReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintEndBatchBp_iSetup_Instruction;19;{"Verify Overprint Batch Specific Data"};Setup Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    OverprintEndBatchBp_iSetup_AdditionalInfo1Label;19;{NULL};Setup additional info label 1;;;true;;
    OverprintEndBatchBp_iSetup_AdditionalInfo1Value;19;{NULL};Setup additional info value 1;;;true;;
    OverprintEndBatchBp_iSetup_AdditionalInfo2Label;19;{NULL};Setup additional info label 2;;;true;;
    OverprintEndBatchBp_iSetup_AdditionalInfo2Value;19;{NULL};Setup additional info value 2;;;true;;
    OverprintEndBatchBp_iSetup_AdditionalInfo3Label;19;{NULL};Setup additional info label 3;;;true;;
    OverprintEndBatchBp_iSetup_AdditionalInfo3Value;19;{NULL};Setup additional info value 3;;;true;;
    OverprintEndBatchBp_iSetup_RequirePassFail;17;{YES};Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
    AltOverprintEndBatchBp_iSetup_Display;19;{"Expected Only","Expected Only"};Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintEndBatchBp_iSetup_SignatureRequired;19;{"1 signature","1 signature"};Required signature level for Setup component;;={"Ok button","1 signature","2 signatures"};true;;
    AltOverprintEndBatchBp_iSetup_SignaturePermission2ndLevel;19;{"OPERATOR","OPERATOR"};RUDO for second level signature for Setup component;;=GET_UDOS();true;;
    AltOverprintEndBatchBp_iSetup_SignatureMeaning2ndLevel;19;{"Overprint verified","Overprint verified"};Signature meaning for 2nd level signature for Setup component;;;true;;
    AltOverprintEndBatchBp_iSetup_ComponentType;19;{"Carton","Carton 2D Code"};Setup Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintEndBatchBp_iSetup_ComponentAction;19;{"Verification","Verification"};Setup Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintEndBatchBp_iSetup_ComponentReason;19;{"End of Batch verification","End of Batch verification"};Setup Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentSetupReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintEndBatchBp_iSetup_Instruction;19;{"Verify Overprint Batch Specific Data","Verify Overprint Batch Specific Data"};Setup Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
    AltOverprintEndBatchBp_iSetup_AdditionalInfo1Label;19;{NULL,NULL};Setup additional info label 1;;;true;;
    AltOverprintEndBatchBp_iSetup_AdditionalInfo1Value;19;{NULL,NULL};Setup additional info value 1;;;true;;
    AltOverprintEndBatchBp_iSetup_AdditionalInfo2Label;19;{NULL,NULL};Setup additional info label 2;;;true;;
    AltOverprintEndBatchBp_iSetup_AdditionalInfo2Value;19;{NULL,NULL};Setup additional info value 2;;;true;;
    AltOverprintEndBatchBp_iSetup_AdditionalInfo3Label;19;{NULL,NULL};Setup additional info label 3;;;true;;
    AltOverprintEndBatchBp_iSetup_AdditionalInfo3Value;19;{NULL,NULL};Setup additional info value 3;;;true;;
    AltOverprintEndBatchBp_iSetup_RequirePassFail;17;{YES,YES};Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
  end
  design:
    BeginNode2:PFCTree.View.BeginNode
      id: 2
      bounds: 437,16,130,32
    END
    2_3363:PFCTree.View.Link
      id: 31231
      fromID: 2
      toID: 3363
      bounds: 495,48,16,97
    END
    ParallelDivergent3363:PFCTree.View.ParallelDivergent
      id: 3363
      idEnd: 3364
      bounds: 2,145,1000,40
    END
    3363_21074:PFCTree.View.Link
      id: 21087
      fromID: 3363
      toID: 21074
      bounds: 60,185,16,35
    END
    3363_36839:PFCTree.View.Link
      id: 37041
      fromID: 3363
      toID: 36839
      bounds: 567,185,16,35
    END
    P_PROD_ATYP_REVIEW_UP:PFCTree.View.UnitProcedure
      description: Production Atypical Review
      id: 21074
      order: 0
      design:
        BeginNode21075:PFCTree.View.BeginNode
          id: 21075
          bounds: 2,16,130,32
        END
        21075_21076:PFCTree.View.ControlLink
          id: 21085
          fromID: 21075
          toID: 21076
          bounds: 60,48,16,62
        END
        ATYPICAL_EVENT_MANAGER_OP:PFCTree.View.Operation
          description: ATYPICAL EVENT MANAGER
          id: 21076
          order: 0
          design:
            BeginNode21077:PFCTree.View.BeginNode
              id: 21077
              bounds: 74,16,130,32
            END
            21077_21078:PFCTree.View.ControlLink
              id: 21081
              fromID: 21077
              toID: 21078
              bounds: 132,48,16,62
            END
            ATYPICAL_MGR_PROD_BP:PFCTree.View.Phase
              description: Atypical Event Manager Production
              buildingBlockElementID: EVENT_MANAGEMENT.ATYPICAL_EVENT_MANAGER
              arguments:
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for signing;;=GET_UDOS();true;;
                iSignature_PermissionSignOff;3;"TEAM LEAD";RUDO for sign-off an event;;=GET_UDOS();true;;
                iSignature_MeaningDetail;3;"Confirm event is complete";Meaning Label for first level signature in Event Detail main screen;;;true;;
                iSignature_MeaningComment;3;"The comment has been entered correctly";Meaning Label for first level signature in Event Detail add comments screen;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_PEL;1;NO;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_453576"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT");true;;
                iButton_Report1;19;{"EBR Exception Report"};Reports available for report button 1. If Null, report button 1 is not visible;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iButton_Report2;19;{"EBR Batch Report"};Reports available for report button 2. If Null, report button 2 is not visible;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iManager;1;YES;YES = Production, NO = QA;;;false;;
                iValidation_OrderStatus;3;NULL;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;"Production";Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;"Completed";Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
              end
              autoStart: No
              usePhaseRet: Yes
              Converge: No
              id: 21078
              order: 0
              bounds: 74,110,130,83
            END
            21078_35997:PFCTree.View.Link
              id: 36000
              fromID: 21078
              toID: 35997
              bounds: 132,193,16,62
            END
            SerialDivergent35997:PFCTree.View.SerialDivergent
              id: 35997
              idEnd: 35998
              bounds: 2,255,275,40
            END
            35997_36008:PFCTree.View.Link
              id: 36009
              fromID: 35997
              toID: 36008
              bounds: 60,295,16,35
            END
            35997_36002:PFCTree.View.Link
              id: 36005
              fromID: 35997
              toID: 36002
              bounds: 205,295,16,70
            END
            S_ATYP_PROD_SET_BS:PFCTree.View.Script
              id: 36008
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"AtypProd"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 2,330,130,55
              executeAtClientID: No
            END
            ParallelDivergent36002:PFCTree.View.ParallelDivergent
              id: 36002
              idEnd: 36003
              bounds: 147,365,130,40
            END
            36008_35998:PFCTree.View.Link
              id: 36010
              fromID: 36008
              toID: 35998
              bounds: 60,385,16,275
            END
            36002_36011:PFCTree.View.Link
              id: 36012
              fromID: 36002
              toID: 36011
              bounds: 205,405,16,35
            END
            P_ATYP_PROD_SET_BS:PFCTree.View.Script
              id: 36011
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"AtypProd"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 147,440,130,55
              executeAtClientID: No
            END
            36011_36003:PFCTree.View.Link
              id: 36013
              fromID: 36011
              toID: 36003
              bounds: 205,495,16,55
            END
            EndParallelDivergent36002:PFCTree.View.ParallelConvergent
              id: 36003
              idEnd: 36002
              bounds: 147,550,130,40
            END
            36003_35998:PFCTree.View.Link
              id: 36006
              fromID: 36003
              toID: 35998
              bounds: 205,590,16,70
            END
            EndSerialDivergent35997:PFCTree.View.SerialConvergent
              id: 35998
              idEnd: 35997
              bounds: 2,660,275,40
            END
            35998_21080:PFCTree.View.Link
              id: 36007
              fromID: 35998
              toID: 21080
              bounds: 132,700,16,86
            END
            EndNode21080:PFCTree.View.EndNode
              id: 21080
              bounds: 74,786,130,32
            END
          END
          bounds: 2,110,130,83
        END
        21076_21084:PFCTree.View.ControlLink
          id: 21086
          fromID: 21076
          toID: 21084
          bounds: 60,193,16,43
        END
        EndNode21084:PFCTree.View.EndNode
          id: 21084
          bounds: 2,236,130,32
        END
      END
      bounds: 2,220,130,83
    END
    P_INITIAL_SCRIPTS_UP:PFCTree.View.UnitProcedure
      description: P_INITIAL_SCRIPTS_UP
      id: 36839
      order: 1
      design:
        BeginNode36840:PFCTree.View.BeginNode
          id: 36840
          bounds: 2,16,130,32
        END
        36840_36841:PFCTree.View.ControlLink
          id: 37038
          fromID: 36840
          toID: 36841
          bounds: 60,48,16,62
        END
        INITIAL_SCRIPTS_OP:PFCTree.View.Operation
          description: INITIAL_SCRIPTS_OP
          id: 36841
          order: 0
          design:
            BeginNode36842:PFCTree.View.BeginNode
              id: 36842
              bounds: 219,16,130,32
            END
            36842_43257:PFCTree.View.Link
              id: 69621
              fromID: 36842
              toID: 43257
              bounds: 277,48,16,97
            END
            ParallelDivergent43257:PFCTree.View.ParallelDivergent
              id: 43257
              idEnd: 43258
              bounds: 2,145,565,40
            END
            43257_50589:PFCTree.View.Link
              id: 50592
              fromID: 43257
              toID: 50589
              bounds: 132,185,16,70
            END
            43257_43262:PFCTree.View.Link
              id: 43265
              fromID: 43257
              toID: 43262
              bounds: 422,185,16,70
            END
            SerialDivergent50589:PFCTree.View.SerialDivergent
              id: 50589
              idEnd: 50590
              bounds: 2,255,275,40
            END
            SerialDivergent43262:PFCTree.View.SerialDivergent
              id: 43262
              idEnd: 43263
              bounds: 292,255,275,40
            END
            50589_50595:PFCTree.View.Link
              id: 50596
              fromID: 50589
              toID: 50595
              bounds: 60,295,16,35
            END
            50589_50598:PFCTree.View.Link
              id: 50601
              fromID: 50589
              toID: 50598
              bounds: 205,295,16,70
            END
            43262_43276:PFCTree.View.Link
              id: 43277
              fromID: 43262
              toID: 43276
              bounds: 350,295,16,35
            END
            43262_43267:PFCTree.View.Link
              id: 43270
              fromID: 43262
              toID: 43267
              bounds: 495,295,16,70
            END
            S_BATCH_START_TIME_BS:PFCTree.View.Script
              id: 50595
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.PRODUCT_LINK
              arguments:
                iMode;3;"Open";Execution mode: Open or Close production event;;=TRANSLATE ( "EQUIPMENT_MANAGEMENT.L_ProductLinkMode" + { "Open", "Close" } );false;;
                iUserId;3;;If it is defined uses this user for creating/closing the event;;;true;;
                iOpenEventScript;3;;Only used at Close mode. If it is defined, then it closes the event opened by the script indicated in this argument.;;;true;;
              end
              type: 0
              order: 0
              bounds: 2,330,130,55
              executeAtClientID: No
            END
            S_SERIALISED_TYPE_BS:PFCTree.View.Script
              id: 43276
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;SetSerialisedTypeBs_iSignal_Name;List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;BUILD_ARRAY_CONSTANT(SIZE(SetSerialisedTypeBs_iSignal_Name),NULL);List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;SetSerialisedTypeBs_iSignal_Value;List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 292,330,130,55
              executeAtClientID: No
            END
            ParallelDivergent50598:PFCTree.View.ParallelDivergent
              id: 50598
              idEnd: 50599
              bounds: 147,365,130,40
            END
            ParallelDivergent43267:PFCTree.View.ParallelDivergent
              id: 43267
              idEnd: 43268
              bounds: 437,365,130,40
            END
            50595_50590:PFCTree.View.Link
              id: 50597
              fromID: 50595
              toID: 50590
              bounds: 60,385,16,275
            END
            43276_43263:PFCTree.View.Link
              id: 43278
              fromID: 43276
              toID: 43263
              bounds: 350,385,16,275
            END
            50598_50603:PFCTree.View.Link
              id: 50604
              fromID: 50598
              toID: 50603
              bounds: 205,405,16,35
            END
            43267_43273:PFCTree.View.Link
              id: 43274
              fromID: 43267
              toID: 43273
              bounds: 495,405,16,35
            END
            P_BATCH_START_TIME_BS:PFCTree.View.Script
              id: 50603
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.PRODUCT_LINK
              arguments:
                iMode;3;"Open";Execution mode: Open or Close production event;;=TRANSLATE ( "EQUIPMENT_MANAGEMENT.L_ProductLinkMode" + { "Open", "Close" } );false;;
                iUserId;3;;If it is defined uses this user for creating/closing the event;;;true;;
                iOpenEventScript;3;;Only used at Close mode. If it is defined, then it closes the event opened by the script indicated in this argument.;;;true;;
              end
              type: 0
              order: 0
              bounds: 147,440,130,55
              executeAtClientID: No
            END
            P_SERIALISED_TYPE_BS:PFCTree.View.Script
              id: 43273
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;SetSerialisedTypeBs_iSignal_Name;List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;BUILD_ARRAY_CONSTANT(SIZE(SetSerialisedTypeBs_iSignal_Name),NULL);List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;SetSerialisedTypeBs_iSignal_Value;List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 437,440,130,55
              executeAtClientID: No
            END
            50603_50599:PFCTree.View.Link
              id: 50605
              fromID: 50603
              toID: 50599
              bounds: 205,495,16,55
            END
            43273_43268:PFCTree.View.Link
              id: 43275
              fromID: 43273
              toID: 43268
              bounds: 495,495,16,55
            END
            EndParallelDivergent50598:PFCTree.View.ParallelConvergent
              id: 50599
              idEnd: 50598
              bounds: 147,550,130,40
            END
            EndParallelDivergent43267:PFCTree.View.ParallelConvergent
              id: 43268
              idEnd: 43267
              bounds: 437,550,130,40
            END
            50599_50590:PFCTree.View.Link
              id: 50602
              fromID: 50599
              toID: 50590
              bounds: 205,590,16,70
            END
            43268_43263:PFCTree.View.Link
              id: 43271
              fromID: 43268
              toID: 43263
              bounds: 495,590,16,70
            END
            EndSerialDivergent50589:PFCTree.View.SerialConvergent
              id: 50590
              idEnd: 50589
              bounds: 2,660,275,40
            END
            EndSerialDivergent43262:PFCTree.View.SerialConvergent
              id: 43263
              idEnd: 43262
              bounds: 292,660,275,40
            END
            50590_50629:PFCTree.View.Link
              id: 50632
              fromID: 50590
              toID: 50629
              bounds: 132,700,16,105
            END
            43263_43281:PFCTree.View.Link
              id: 43284
              fromID: 43263
              toID: 43281
              bounds: 422,700,16,105
            END
            SerialDivergent50629:PFCTree.View.SerialDivergent
              id: 50629
              idEnd: 50630
              bounds: 2,805,275,40
            END
            SerialDivergent43281:PFCTree.View.SerialDivergent
              id: 43281
              idEnd: 43282
              bounds: 292,805,275,40
            END
            50629_50634:PFCTree.View.Link
              id: 50635
              fromID: 50629
              toID: 50634
              bounds: 60,845,16,35
            END
            50629_50637:PFCTree.View.Link
              id: 50640
              fromID: 50629
              toID: 50637
              bounds: 205,845,16,70
            END
            43281_43295:PFCTree.View.Link
              id: 43296
              fromID: 43281
              toID: 43295
              bounds: 350,845,16,35
            END
            43281_43286:PFCTree.View.Link
              id: 43289
              fromID: 43281
              toID: 43286
              bounds: 495,845,16,70
            END
            S_SAMPLING_ALARM_BS:PFCTree.View.Script
              id: 50634
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AlrmSmp"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Sample required on box one"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,880,130,55
              executeAtClientID: No
            END
            SET_PARAMETERS_BS:PFCTree.View.Script
              id: 43295
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;SetParametersBs_iSet_VarName;Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;SetParametersBs_iSet_VarValue;Value to set to the global variable;;;true;;
                iSet_RPLName;19;BUILD_ARRAY_CONSTANT(SIZE(SetParametersBs_iSet_VarName),NULL);RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;BUILD_ARRAY_CONSTANT(SIZE(SetParametersBs_iSet_VarName),NULL);Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;BUILD_ARRAY_CONSTANT(SIZE(SetParametersBs_iSet_VarName),NULL);Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 292,880,130,55
              executeAtClientID: No
            END
            ParallelDivergent50637:PFCTree.View.ParallelDivergent
              id: 50637
              idEnd: 50638
              bounds: 147,915,130,40
            END
            ParallelDivergent43286:PFCTree.View.ParallelDivergent
              id: 43286
              idEnd: 43287
              bounds: 437,915,130,40
            END
            50634_50630:PFCTree.View.Link
              id: 50636
              fromID: 50634
              toID: 50630
              bounds: 60,935,16,275
            END
            43295_43282:PFCTree.View.Link
              id: 43297
              fromID: 43295
              toID: 43282
              bounds: 350,935,16,275
            END
            50637_50642:PFCTree.View.Link
              id: 50643
              fromID: 50637
              toID: 50642
              bounds: 205,955,16,35
            END
            43286_43292:PFCTree.View.Link
              id: 43293
              fromID: 43286
              toID: 43292
              bounds: 495,955,16,35
            END
            P_SAMPLING_ALARM_BS:PFCTree.View.Script
              id: 50642
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AlrmSmp"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Sample required on box one"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,990,130,55
              executeAtClientID: No
            END
            M_SET_PARAMETERS_BS:PFCTree.View.Script
              id: 43292
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;SetParametersBs_iSet_VarName;Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;SetParametersBs_iSet_VarValue;Value to set to the global variable;;;true;;
                iSet_RPLName;19;BUILD_ARRAY_CONSTANT(SIZE(SetParametersBs_iSet_VarName),NULL);RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;BUILD_ARRAY_CONSTANT(SIZE(SetParametersBs_iSet_VarName),NULL);Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;BUILD_ARRAY_CONSTANT(SIZE(SetParametersBs_iSet_VarName),NULL);Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 437,990,130,55
              executeAtClientID: No
            END
            50642_50638:PFCTree.View.Link
              id: 50644
              fromID: 50642
              toID: 50638
              bounds: 205,1045,16,55
            END
            43292_43287:PFCTree.View.Link
              id: 43294
              fromID: 43292
              toID: 43287
              bounds: 495,1045,16,55
            END
            EndParallelDivergent50637:PFCTree.View.ParallelConvergent
              id: 50638
              idEnd: 50637
              bounds: 147,1100,130,40
            END
            EndParallelDivergent43286:PFCTree.View.ParallelConvergent
              id: 43287
              idEnd: 43286
              bounds: 437,1100,130,40
            END
            50638_50630:PFCTree.View.Link
              id: 50641
              fromID: 50638
              toID: 50630
              bounds: 205,1140,16,70
            END
            43287_43282:PFCTree.View.Link
              id: 43290
              fromID: 43287
              toID: 43282
              bounds: 495,1140,16,70
            END
            EndSerialDivergent50629:PFCTree.View.SerialConvergent
              id: 50630
              idEnd: 50629
              bounds: 2,1210,275,40
            END
            EndSerialDivergent43281:PFCTree.View.SerialConvergent
              id: 43282
              idEnd: 43281
              bounds: 292,1210,275,40
            END
            50630_51098:PFCTree.View.Link
              id: 51101
              fromID: 50630
              toID: 51098
              bounds: 132,1250,16,105
            END
            43282_43300:PFCTree.View.Link
              id: 43303
              fromID: 43282
              toID: 43300
              bounds: 422,1250,16,105
            END
            SerialDivergent51098:PFCTree.View.SerialDivergent
              id: 51098
              idEnd: 51099
              bounds: 2,1355,275,40
            END
            SerialDivergent43300:PFCTree.View.SerialDivergent
              id: 43300
              idEnd: 43301
              bounds: 292,1355,275,40
            END
            51098_51114:PFCTree.View.Link
              id: 51115
              fromID: 51098
              toID: 51114
              bounds: 60,1395,16,35
            END
            51098_51109:PFCTree.View.Link
              id: 51112
              fromID: 51098
              toID: 51109
              bounds: 205,1395,16,70
            END
            43300_43305:PFCTree.View.Link
              id: 43306
              fromID: 43300
              toID: 43305
              bounds: 350,1395,16,35
            END
            43300_43308:PFCTree.View.Link
              id: 43311
              fromID: 43300
              toID: 43308
              bounds: 495,1395,16,70
            END
            S_INIT_SIGNAL_BS:PFCTree.View.Script
              id: 51114
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"FillWeights","SmplChk","Challenge1","LineClearance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL,NULL,NULL,NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"NO","NO","Completed","NO"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 2,1430,130,55
              executeAtClientID: No
            END
            SET_PARAMETERS2_BS:PFCTree.View.Script
              id: 43305
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;SetParameters2Bs_iSet_VarName;Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;SetParameters2Bs_iSet_VarValue;Value to set to the global variable;;;true;;
                iSet_RPLName;19;BUILD_ARRAY_CONSTANT(SIZE(SetParameters2Bs_iSet_VarName),NULL);RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;BUILD_ARRAY_CONSTANT(SIZE(SetParameters2Bs_iSet_VarName),NULL);Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;BUILD_ARRAY_CONSTANT(SIZE(SetParameters2Bs_iSet_VarName),NULL);Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;BUILD_ARRAY_CONSTANT(SIZE(SetParameters2Bs_iSet_VarName),NULL);Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;BUILD_ARRAY_CONSTANT(SIZE(SetParameters2Bs_iSet_VarName),NULL);Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;BUILD_ARRAY_CONSTANT(SIZE(SetParameters2Bs_iSet_VarName),NULL);Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;BUILD_ARRAY_CONSTANT(SIZE(SetParameters2Bs_iSet_VarName),NULL);IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 292,1430,130,55
              executeAtClientID: No
            END
            ParallelDivergent51109:PFCTree.View.ParallelDivergent
              id: 51109
              idEnd: 51110
              bounds: 147,1465,130,40
            END
            ParallelDivergent43308:PFCTree.View.ParallelDivergent
              id: 43308
              idEnd: 43309
              bounds: 437,1465,130,40
            END
            51114_51099:PFCTree.View.Link
              id: 51116
              fromID: 51114
              toID: 51099
              bounds: 60,1485,16,275
            END
            43305_43301:PFCTree.View.Link
              id: 43307
              fromID: 43305
              toID: 43301
              bounds: 350,1485,16,275
            END
            51109_63899:PFCTree.View.Link
              id: 63900
              fromID: 51109
              toID: 63899
              bounds: 205,1505,16,35
            END
            43308_43314:PFCTree.View.Link
              id: 43315
              fromID: 43308
              toID: 43314
              bounds: 495,1505,16,35
            END
            P_INIT_SIGNAL_BS:PFCTree.View.Script
              id: 63899
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"FillWeights","SmplChk","Challenge1","LineClearance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL,NULL,NULL,NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"NO","NO","Completed","NO"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 147,1540,130,55
              executeAtClientID: No
            END
            M_SET_PARAMETERS2_BS:PFCTree.View.Script
              id: 43314
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;SetParameters2Bs_iSet_VarName;Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;SetParameters2Bs_iSet_VarValue;Value to set to the global variable;;;true;;
                iSet_RPLName;19;BUILD_ARRAY_CONSTANT(SIZE(SetParameters2Bs_iSet_VarName),NULL);RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;BUILD_ARRAY_CONSTANT(SIZE(SetParameters2Bs_iSet_VarName),NULL);Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;BUILD_ARRAY_CONSTANT(SIZE(SetParameters2Bs_iSet_VarName),NULL);Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;BUILD_ARRAY_CONSTANT(SIZE(SetParameters2Bs_iSet_VarName),NULL);Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;BUILD_ARRAY_CONSTANT(SIZE(SetParameters2Bs_iSet_VarName),NULL);Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;BUILD_ARRAY_CONSTANT(SIZE(SetParameters2Bs_iSet_VarName),NULL);Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;BUILD_ARRAY_CONSTANT(SIZE(SetParameters2Bs_iSet_VarName),NULL);IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 437,1540,130,55
              executeAtClientID: No
            END
            63899_51110:PFCTree.View.Link
              id: 63901
              fromID: 63899
              toID: 51110
              bounds: 205,1595,16,55
            END
            43314_43309:PFCTree.View.Link
              id: 43316
              fromID: 43314
              toID: 43309
              bounds: 495,1595,16,55
            END
            EndParallelDivergent51109:PFCTree.View.ParallelConvergent
              id: 51110
              idEnd: 51109
              bounds: 147,1650,130,40
            END
            EndParallelDivergent43308:PFCTree.View.ParallelConvergent
              id: 43309
              idEnd: 43308
              bounds: 437,1650,130,40
            END
            51110_51099:PFCTree.View.Link
              id: 51113
              fromID: 51110
              toID: 51099
              bounds: 205,1690,16,70
            END
            43309_43301:PFCTree.View.Link
              id: 43312
              fromID: 43309
              toID: 43301
              bounds: 495,1690,16,70
            END
            EndSerialDivergent51098:PFCTree.View.SerialConvergent
              id: 51099
              idEnd: 51098
              bounds: 2,1760,275,40
            END
            EndSerialDivergent43300:PFCTree.View.SerialConvergent
              id: 43301
              idEnd: 43300
              bounds: 292,1760,275,40
            END
            51099_67646:PFCTree.View.Link
              id: 67649
              fromID: 51099
              toID: 67646
              bounds: 132,1800,16,105
            END
            43301_43323:PFCTree.View.Link
              id: 43326
              fromID: 43301
              toID: 43323
              bounds: 422,1800,16,105
            END
            SerialDivergent67646:PFCTree.View.SerialDivergent
              id: 67646
              idEnd: 67647
              bounds: 2,1905,275,40
            END
            SerialDivergent43323:PFCTree.View.SerialDivergent
              id: 43323
              idEnd: 43324
              bounds: 292,1905,275,40
            END
            67646_67656:PFCTree.View.Link
              id: 67657
              fromID: 67646
              toID: 67656
              bounds: 60,1945,16,35
            END
            67646_67651:PFCTree.View.Link
              id: 67654
              fromID: 67646
              toID: 67651
              bounds: 205,1945,16,70
            END
            43323_43337:PFCTree.View.Link
              id: 43338
              fromID: 43323
              toID: 43337
              bounds: 350,1945,16,35
            END
            43323_43328:PFCTree.View.Link
              id: 43331
              fromID: 43323
              toID: 43328
              bounds: 495,1945,16,70
            END
            S_RETRIEVE_CF_BS:PFCTree.View.Script
              id: 67656
              buildingBlockElementID: GENERIC.SET_GLOBAL_VARIABLE_FROM_UT
              arguments:
                iParameter_Name;19;NULL;Names for the local variables that will be used by the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>LocalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iParameter_Value;18;NULL;Numeric values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueStr;19;NULL;String values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueBool;17;NULL;Boolean values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueDate;20;NULL;Date values for the local variables that will be used by the query.;;;true;;
                iParameter_GlobalVariable;19;NULL;Global variables for the local variables that will be used by the query.;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iVariable_Source;19;{"New Carry Forward"};List of queries to be executed defined in QueryList configuration key.;;=TRANSLATE("GENERIC.L_"+PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>QueryList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iVariable_Query;19;{NULL};List of queries to be executed defined manually.;;;true;;
                iVariable_QueryResultType;19;{NULL};Type list of global variables to be set with the result of the query.;;={ TRANSLATE("GENERIC.L_Scalar"), TRANSLATE("GENERIC.L_Array") };true;;
                iVariable_Name;19;{"$$PrevBatchQty"};List of global variables to be set with the result of the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>GlobalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iExecuteDefaultQueries;1;YES;Specify if execute or not default queries defined in DataSource configuration key.;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,1980,130,55
              executeAtClientID: No
            END
            GET_LAST_LC_DATA1_BS:PFCTree.View.Script
              id: 43337
              buildingBlockElementID: GENERIC.SET_GLOBAL_VARIABLE_FROM_UT
              arguments:
                iParameter_Name;19;NULL;Names for the local variables that will be used by the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>LocalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iParameter_Value;18;NULL;Numeric values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueStr;19;NULL;String values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueBool;17;NULL;Boolean values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueDate;20;NULL;Date values for the local variables that will be used by the query.;;;true;;
                iParameter_GlobalVariable;19;NULL;Global variables for the local variables that will be used by the query.;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iVariable_Source;19;{"Last LC Status","Last LC Process Order","Last LC Date"};List of queries to be executed defined in QueryList configuration key.;;=TRANSLATE("GENERIC.L_"+PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>QueryList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iVariable_Query;19;{NULL,NULL,NULL};List of queries to be executed defined manually.;;;true;;
                iVariable_QueryResultType;19;{NULL,NULL,NULL};Type list of global variables to be set with the result of the query.;;={ TRANSLATE("GENERIC.L_Scalar"), TRANSLATE("GENERIC.L_Array") };true;;
                iVariable_Name;19;{"$$LastLCStatus","$$LastLCPO","$$LastLCDate"};List of global variables to be set with the result of the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>GlobalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iExecuteDefaultQueries;1;YES;Specify if execute or not default queries defined in DataSource configuration key.;;;false;;
              end
              type: 0
              order: 0
              bounds: 292,1980,130,55
              executeAtClientID: No
            END
            ParallelDivergent67651:PFCTree.View.ParallelDivergent
              id: 67651
              idEnd: 67652
              bounds: 147,2015,130,40
            END
            ParallelDivergent43328:PFCTree.View.ParallelDivergent
              id: 43328
              idEnd: 43329
              bounds: 437,2015,130,40
            END
            67656_67647:PFCTree.View.Link
              id: 67658
              fromID: 67656
              toID: 67647
              bounds: 60,2035,16,275
            END
            43337_43324:PFCTree.View.Link
              id: 43339
              fromID: 43337
              toID: 43324
              bounds: 350,2035,16,275
            END
            67651_67660:PFCTree.View.Link
              id: 67661
              fromID: 67651
              toID: 67660
              bounds: 205,2055,16,35
            END
            43328_43334:PFCTree.View.Link
              id: 43335
              fromID: 43328
              toID: 43334
              bounds: 495,2055,16,35
            END
            P_RETRIEVE_CF_BS:PFCTree.View.Script
              id: 67660
              buildingBlockElementID: GENERIC.SET_GLOBAL_VARIABLE_FROM_UT
              arguments:
                iParameter_Name;19;NULL;Names for the local variables that will be used by the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>LocalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iParameter_Value;18;NULL;Numeric values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueStr;19;NULL;String values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueBool;17;NULL;Boolean values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueDate;20;NULL;Date values for the local variables that will be used by the query.;;;true;;
                iParameter_GlobalVariable;19;NULL;Global variables for the local variables that will be used by the query.;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iVariable_Source;19;{"New Carry Forward"};List of queries to be executed defined in QueryList configuration key.;;=TRANSLATE("GENERIC.L_"+PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>QueryList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iVariable_Query;19;{NULL};List of queries to be executed defined manually.;;;true;;
                iVariable_QueryResultType;19;{NULL};Type list of global variables to be set with the result of the query.;;={ TRANSLATE("GENERIC.L_Scalar"), TRANSLATE("GENERIC.L_Array") };true;;
                iVariable_Name;19;{"$$PrevBatchQty"};List of global variables to be set with the result of the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>GlobalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iExecuteDefaultQueries;1;YES;Specify if execute or not default queries defined in DataSource configuration key.;;;false;;
              end
              type: 0
              order: 0
              bounds: 147,2090,130,55
              executeAtClientID: No
            END
            M_GET_LAST_LC_DATA1_BS:PFCTree.View.Script
              id: 43334
              buildingBlockElementID: GENERIC.SET_GLOBAL_VARIABLE_FROM_UT
              arguments:
                iParameter_Name;19;NULL;Names for the local variables that will be used by the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>LocalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iParameter_Value;18;NULL;Numeric values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueStr;19;NULL;String values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueBool;17;NULL;Boolean values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueDate;20;NULL;Date values for the local variables that will be used by the query.;;;true;;
                iParameter_GlobalVariable;19;NULL;Global variables for the local variables that will be used by the query.;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iVariable_Source;19;{"Last LC Status","Last LC Process Order","Last LC Date"};List of queries to be executed defined in QueryList configuration key.;;=TRANSLATE("GENERIC.L_"+PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>QueryList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iVariable_Query;19;{NULL,NULL,NULL};List of queries to be executed defined manually.;;;true;;
                iVariable_QueryResultType;19;{NULL,NULL,NULL};Type list of global variables to be set with the result of the query.;;={ TRANSLATE("GENERIC.L_Scalar"), TRANSLATE("GENERIC.L_Array") };true;;
                iVariable_Name;19;{"$$LastLCStatus","$$LastLCPO","$$LastLCDate"};List of global variables to be set with the result of the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>GlobalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iExecuteDefaultQueries;1;YES;Specify if execute or not default queries defined in DataSource configuration key.;;;false;;
              end
              type: 0
              order: 0
              bounds: 437,2090,130,55
              executeAtClientID: No
            END
            67660_67652:PFCTree.View.Link
              id: 67662
              fromID: 67660
              toID: 67652
              bounds: 205,2145,16,55
            END
            43334_43329:PFCTree.View.Link
              id: 43336
              fromID: 43334
              toID: 43329
              bounds: 495,2145,16,55
            END
            EndParallelDivergent67651:PFCTree.View.ParallelConvergent
              id: 67652
              idEnd: 67651
              bounds: 147,2200,130,40
            END
            EndParallelDivergent43328:PFCTree.View.ParallelConvergent
              id: 43329
              idEnd: 43328
              bounds: 437,2200,130,40
            END
            67652_67647:PFCTree.View.Link
              id: 67655
              fromID: 67652
              toID: 67647
              bounds: 205,2240,16,70
            END
            43329_43324:PFCTree.View.Link
              id: 43332
              fromID: 43329
              toID: 43324
              bounds: 495,2240,16,70
            END
            EndSerialDivergent67646:PFCTree.View.SerialConvergent
              id: 67647
              idEnd: 67646
              bounds: 2,2310,275,40
            END
            EndSerialDivergent43323:PFCTree.View.SerialConvergent
              id: 43324
              idEnd: 43323
              bounds: 292,2310,275,40
            END
            67647_43258:PFCTree.View.Link
              id: 67650
              fromID: 67647
              toID: 43258
              bounds: 132,2350,16,3370
            END
            43324_43342:PFCTree.View.Link
              id: 43345
              fromID: 43324
              toID: 43342
              bounds: 422,2350,16,105
            END
            SerialDivergent43342:PFCTree.View.SerialDivergent
              id: 43342
              idEnd: 43343
              bounds: 292,2455,275,40
            END
            43342_43356:PFCTree.View.Link
              id: 43357
              fromID: 43342
              toID: 43356
              bounds: 350,2495,16,35
            END
            43342_43347:PFCTree.View.Link
              id: 43350
              fromID: 43342
              toID: 43347
              bounds: 495,2495,16,70
            END
            S_GET_LAST_LC_DATA2_BS:PFCTree.View.Script
              id: 43356
              buildingBlockElementID: GENERIC.SET_GLOBAL_VARIABLE_FROM_UT
              arguments:
                iParameter_Name;19;NULL;Names for the local variables that will be used by the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>LocalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iParameter_Value;18;NULL;Numeric values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueStr;19;NULL;String values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueBool;17;NULL;Boolean values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueDate;20;NULL;Date values for the local variables that will be used by the query.;;;true;;
                iParameter_GlobalVariable;19;NULL;Global variables for the local variables that will be used by the query.;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iVariable_Source;19;{"Last LC Material Number"};List of queries to be executed defined in QueryList configuration key.;;=TRANSLATE("GENERIC.L_"+PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>QueryList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iVariable_Query;19;{NULL};List of queries to be executed defined manually.;;;true;;
                iVariable_QueryResultType;19;{NULL};Type list of global variables to be set with the result of the query.;;={ TRANSLATE("GENERIC.L_Scalar"), TRANSLATE("GENERIC.L_Array") };true;;
                iVariable_Name;19;{"$$LastLCMatNum"};List of global variables to be set with the result of the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>GlobalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iExecuteDefaultQueries;1;YES;Specify if execute or not default queries defined in DataSource configuration key.;;;false;;
              end
              type: 0
              order: 0
              bounds: 292,2530,130,55
              executeAtClientID: No
            END
            ParallelDivergent43347:PFCTree.View.ParallelDivergent
              id: 43347
              idEnd: 43348
              bounds: 437,2565,130,40
            END
            43356_43343:PFCTree.View.Link
              id: 43358
              fromID: 43356
              toID: 43343
              bounds: 350,2585,16,275
            END
            43347_43353:PFCTree.View.Link
              id: 43354
              fromID: 43347
              toID: 43353
              bounds: 495,2605,16,35
            END
            P_GET_LAST_LC_DATA2_BS:PFCTree.View.Script
              id: 43353
              buildingBlockElementID: GENERIC.SET_GLOBAL_VARIABLE_FROM_UT
              arguments:
                iParameter_Name;19;NULL;Names for the local variables that will be used by the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>LocalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iParameter_Value;18;NULL;Numeric values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueStr;19;NULL;String values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueBool;17;NULL;Boolean values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueDate;20;NULL;Date values for the local variables that will be used by the query.;;;true;;
                iParameter_GlobalVariable;19;NULL;Global variables for the local variables that will be used by the query.;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iVariable_Source;19;{"Last LC Material Number"};List of queries to be executed defined in QueryList configuration key.;;=TRANSLATE("GENERIC.L_"+PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>QueryList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iVariable_Query;19;{NULL};List of queries to be executed defined manually.;;;true;;
                iVariable_QueryResultType;19;{NULL};Type list of global variables to be set with the result of the query.;;={ TRANSLATE("GENERIC.L_Scalar"), TRANSLATE("GENERIC.L_Array") };true;;
                iVariable_Name;19;{"$$LastLCMatNum"};List of global variables to be set with the result of the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>GlobalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iExecuteDefaultQueries;1;YES;Specify if execute or not default queries defined in DataSource configuration key.;;;false;;
              end
              type: 0
              order: 0
              bounds: 437,2640,130,55
              executeAtClientID: No
            END
            43353_43348:PFCTree.View.Link
              id: 43355
              fromID: 43353
              toID: 43348
              bounds: 495,2695,16,55
            END
            EndParallelDivergent43347:PFCTree.View.ParallelConvergent
              id: 43348
              idEnd: 43347
              bounds: 437,2750,130,40
            END
            43348_43343:PFCTree.View.Link
              id: 43351
              fromID: 43348
              toID: 43343
              bounds: 495,2790,16,70
            END
            EndSerialDivergent43342:PFCTree.View.SerialConvergent
              id: 43343
              idEnd: 43342
              bounds: 292,2860,275,40
            END
            43343_43359:PFCTree.View.Link
              id: 43362
              fromID: 43343
              toID: 43359
              bounds: 422,2900,16,105
            END
            SerialDivergent43359:PFCTree.View.SerialDivergent
              id: 43359
              idEnd: 43360
              bounds: 292,3005,275,40
            END
            43359_43375:PFCTree.View.Link
              id: 43376
              fromID: 43359
              toID: 43375
              bounds: 350,3045,16,35
            END
            43359_43364:PFCTree.View.Link
              id: 43367
              fromID: 43359
              toID: 43364
              bounds: 495,3045,16,70
            END
            S_PREV_RECON_CMP_BS:PFCTree.View.Script
              id: 43375
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"PackReconciliation"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 292,3080,130,55
              executeAtClientID: No
            END
            ParallelDivergent43364:PFCTree.View.ParallelDivergent
              id: 43364
              idEnd: 43365
              bounds: 437,3115,130,40
            END
            43375_43360:PFCTree.View.Link
              id: 43377
              fromID: 43375
              toID: 43360
              bounds: 350,3135,16,275
            END
            43364_43372:PFCTree.View.Link
              id: 43373
              fromID: 43364
              toID: 43372
              bounds: 495,3155,16,35
            END
            P_PREV_RECON_CMP_BS:PFCTree.View.Script
              id: 43372
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"PackReconciliation"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 437,3190,130,55
              executeAtClientID: No
            END
            43372_43365:PFCTree.View.Link
              id: 43374
              fromID: 43372
              toID: 43365
              bounds: 495,3245,16,55
            END
            EndParallelDivergent43364:PFCTree.View.ParallelConvergent
              id: 43365
              idEnd: 43364
              bounds: 437,3300,130,40
            END
            43365_43360:PFCTree.View.Link
              id: 43368
              fromID: 43365
              toID: 43360
              bounds: 495,3340,16,70
            END
            EndSerialDivergent43359:PFCTree.View.SerialConvergent
              id: 43360
              idEnd: 43359
              bounds: 292,3410,275,40
            END
            43360_43380:PFCTree.View.Link
              id: 43383
              fromID: 43360
              toID: 43380
              bounds: 422,3450,16,105
            END
            SerialDivergent43380:PFCTree.View.SerialDivergent
              id: 43380
              idEnd: 43381
              bounds: 292,3555,275,40
            END
            43380_43394:PFCTree.View.Link
              id: 43395
              fromID: 43380
              toID: 43394
              bounds: 350,3595,16,35
            END
            43380_43385:PFCTree.View.Link
              id: 43388
              fromID: 43380
              toID: 43385
              bounds: 495,3595,16,70
            END
            S_GET_PROCESSCELL_BS:PFCTree.View.Script
              id: 43394
              buildingBlockElementID: GENERIC.SET_GLOBAL_VARIABLE_FROM_UT
              arguments:
                iParameter_Name;19;NULL;Names for the local variables that will be used by the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>LocalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iParameter_Value;18;NULL;Numeric values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueStr;19;NULL;String values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueBool;17;NULL;Boolean values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueDate;20;NULL;Date values for the local variables that will be used by the query.;;;true;;
                iParameter_GlobalVariable;19;NULL;Global variables for the local variables that will be used by the query.;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iVariable_Source;19;{"Query Process Cell"};List of queries to be executed defined in QueryList configuration key.;;=TRANSLATE("GENERIC.L_"+PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>QueryList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iVariable_Query;19;{NULL};List of queries to be executed defined manually.;;;true;;
                iVariable_QueryResultType;19;{NULL};Type list of global variables to be set with the result of the query.;;={ TRANSLATE("GENERIC.L_Scalar"), TRANSLATE("GENERIC.L_Array") };true;;
                iVariable_Name;19;{"$$ProcessCell"};List of global variables to be set with the result of the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>GlobalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iExecuteDefaultQueries;1;YES;Specify if execute or not default queries defined in DataSource configuration key.;;;false;;
              end
              type: 0
              order: 0
              bounds: 292,3630,130,55
              executeAtClientID: No
            END
            ParallelDivergent43385:PFCTree.View.ParallelDivergent
              id: 43385
              idEnd: 43386
              bounds: 437,3665,130,40
            END
            43394_43381:PFCTree.View.Link
              id: 43396
              fromID: 43394
              toID: 43381
              bounds: 350,3685,16,275
            END
            43385_43391:PFCTree.View.Link
              id: 43392
              fromID: 43385
              toID: 43391
              bounds: 495,3705,16,35
            END
            P_GET_PROCESSCELL_BS:PFCTree.View.Script
              id: 43391
              buildingBlockElementID: GENERIC.SET_GLOBAL_VARIABLE_FROM_UT
              arguments:
                iParameter_Name;19;NULL;Names for the local variables that will be used by the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>LocalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iParameter_Value;18;NULL;Numeric values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueStr;19;NULL;String values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueBool;17;NULL;Boolean values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueDate;20;NULL;Date values for the local variables that will be used by the query.;;;true;;
                iParameter_GlobalVariable;19;NULL;Global variables for the local variables that will be used by the query.;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iVariable_Source;19;{"Query Process Cell"};List of queries to be executed defined in QueryList configuration key.;;=TRANSLATE("GENERIC.L_"+PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>QueryList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iVariable_Query;19;{NULL};List of queries to be executed defined manually.;;;true;;
                iVariable_QueryResultType;19;{NULL};Type list of global variables to be set with the result of the query.;;={ TRANSLATE("GENERIC.L_Scalar"), TRANSLATE("GENERIC.L_Array") };true;;
                iVariable_Name;19;{"$$ProcessCell"};List of global variables to be set with the result of the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>GlobalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iExecuteDefaultQueries;1;YES;Specify if execute or not default queries defined in DataSource configuration key.;;;false;;
              end
              type: 0
              order: 0
              bounds: 437,3740,130,55
              executeAtClientID: No
            END
            43391_43386:PFCTree.View.Link
              id: 43393
              fromID: 43391
              toID: 43386
              bounds: 495,3795,16,55
            END
            EndParallelDivergent43385:PFCTree.View.ParallelConvergent
              id: 43386
              idEnd: 43385
              bounds: 437,3850,130,40
            END
            43386_43381:PFCTree.View.Link
              id: 43389
              fromID: 43386
              toID: 43381
              bounds: 495,3890,16,70
            END
            EndSerialDivergent43380:PFCTree.View.SerialConvergent
              id: 43381
              idEnd: 43380
              bounds: 292,3960,275,40
            END
            43381_43399:PFCTree.View.Link
              id: 43402
              fromID: 43381
              toID: 43399
              bounds: 422,4000,16,105
            END
            SerialDivergent43399:PFCTree.View.SerialDivergent
              id: 43399
              idEnd: 43400
              bounds: 292,4105,275,40
            END
            43399_43409:PFCTree.View.Link
              id: 43410
              fromID: 43399
              toID: 43409
              bounds: 350,4145,16,35
            END
            43399_43404:PFCTree.View.Link
              id: 43407
              fromID: 43399
              toID: 43404
              bounds: 495,4145,16,70
            END
            S_INIT_VARS_ZERO_BS:PFCTree.View.Script
              id: 43409
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotLblPULPrn","TotLblPULScr","TotLblPULDes","TotLblBULPrn","TotLblBULScr","TotLblBULDes","SmplPlanTot","AdhocCnt"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{0,0,0,0,0,0,0,0};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 292,4180,130,55
              executeAtClientID: No
            END
            ParallelDivergent43404:PFCTree.View.ParallelDivergent
              id: 43404
              idEnd: 43405
              bounds: 437,4215,130,40
            END
            43409_43400:PFCTree.View.Link
              id: 43411
              fromID: 43409
              toID: 43400
              bounds: 350,4235,16,275
            END
            43404_63843:PFCTree.View.Link
              id: 63844
              fromID: 43404
              toID: 63843
              bounds: 495,4255,16,35
            END
            P_INIT_VARS_ZERO_BS:PFCTree.View.Script
              id: 63843
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotLblPULPrn","TotLblPULScr","TotLblPULDes","TotLblBULPrn","TotLblBULScr","TotLblBULDes","SmplPlanTot","AdhocCnt"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{0,0,0,0,0,0,0,0};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 437,4290,130,55
              executeAtClientID: No
            END
            63843_43405:PFCTree.View.Link
              id: 63845
              fromID: 63843
              toID: 43405
              bounds: 495,4345,16,55
            END
            EndParallelDivergent43404:PFCTree.View.ParallelConvergent
              id: 43405
              idEnd: 43404
              bounds: 437,4400,130,40
            END
            43405_43400:PFCTree.View.Link
              id: 43408
              fromID: 43405
              toID: 43400
              bounds: 495,4440,16,70
            END
            EndSerialDivergent43399:PFCTree.View.SerialConvergent
              id: 43400
              idEnd: 43399
              bounds: 292,4510,275,40
            END
            43400_49797:PFCTree.View.Link
              id: 49800
              fromID: 43400
              toID: 49797
              bounds: 422,4550,16,105
            END
            SerialDivergent49797:PFCTree.View.SerialDivergent
              id: 49797
              idEnd: 49798
              bounds: 292,4655,275,40
            END
            49797_57515:PFCTree.View.Link
              id: 57516
              fromID: 49797
              toID: 57515
              bounds: 350,4695,16,35
            END
            49797_49802:PFCTree.View.Link
              id: 49805
              fromID: 49797
              toID: 49802
              bounds: 495,4695,16,70
            END
            S_SET_PARAMETERS2_BS:PFCTree.View.Script
              id: 57515
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"L1","L2","L3","L4","L5","L6","L7","L8"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{Yes,Yes,Yes,Yes,Yes,Yes,No,Yes};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 292,4730,130,55
              executeAtClientID: No
            END
            ParallelDivergent49802:PFCTree.View.ParallelDivergent
              id: 49802
              idEnd: 49803
              bounds: 437,4765,130,40
            END
            57515_49798:PFCTree.View.Link
              id: 57517
              fromID: 57515
              toID: 49798
              bounds: 350,4785,16,275
            END
            49802_57519:PFCTree.View.Link
              id: 57520
              fromID: 49802
              toID: 57519
              bounds: 495,4805,16,35
            END
            P_SET_PARAMETERS2_BS:PFCTree.View.Script
              id: 57519
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"L1","L2","L3","L4","L5","L6","L7","L8"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{Yes,Yes,Yes,Yes,Yes,Yes,No,Yes};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 437,4840,130,55
              executeAtClientID: No
            END
            57519_49803:PFCTree.View.Link
              id: 57521
              fromID: 57519
              toID: 49803
              bounds: 495,4895,16,55
            END
            EndParallelDivergent49802:PFCTree.View.ParallelConvergent
              id: 49803
              idEnd: 49802
              bounds: 437,4950,130,40
            END
            49803_49798:PFCTree.View.Link
              id: 49806
              fromID: 49803
              toID: 49798
              bounds: 495,4990,16,70
            END
            EndSerialDivergent49797:PFCTree.View.SerialConvergent
              id: 49798
              idEnd: 49797
              bounds: 292,5060,275,40
            END
            49798_67474:PFCTree.View.Link
              id: 67477
              fromID: 49798
              toID: 67474
              bounds: 422,5100,16,105
            END
            SerialDivergent67474:PFCTree.View.SerialDivergent
              id: 67474
              idEnd: 67475
              bounds: 292,5205,275,40
            END
            67474_67479:PFCTree.View.Link
              id: 67480
              fromID: 67474
              toID: 67479
              bounds: 350,5245,16,35
            END
            67474_67482:PFCTree.View.Link
              id: 67485
              fromID: 67474
              toID: 67482
              bounds: 495,5245,16,70
            END
            S_SETUP_LC_ALRM_BS:PFCTree.View.Script
              id: 67479
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AlrmLCSetup"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Line Clearance not available"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 292,5280,130,55
              executeAtClientID: No
            END
            ParallelDivergent67482:PFCTree.View.ParallelDivergent
              id: 67482
              idEnd: 67483
              bounds: 437,5315,130,40
            END
            67479_67475:PFCTree.View.Link
              id: 67481
              fromID: 67479
              toID: 67475
              bounds: 350,5335,16,275
            END
            67482_67487:PFCTree.View.Link
              id: 67488
              fromID: 67482
              toID: 67487
              bounds: 495,5355,16,35
            END
            P_SETUP_LC_ALRM_BS:PFCTree.View.Script
              id: 67487
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AlrmLCSetup"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Line Clearance not available"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 437,5390,130,55
              executeAtClientID: No
            END
            67487_67483:PFCTree.View.Link
              id: 67489
              fromID: 67487
              toID: 67483
              bounds: 495,5445,16,55
            END
            EndParallelDivergent67482:PFCTree.View.ParallelConvergent
              id: 67483
              idEnd: 67482
              bounds: 437,5500,130,40
            END
            67483_67475:PFCTree.View.Link
              id: 67486
              fromID: 67483
              toID: 67475
              bounds: 495,5540,16,70
            END
            EndSerialDivergent67474:PFCTree.View.SerialConvergent
              id: 67475
              idEnd: 67474
              bounds: 292,5610,275,40
            END
            67475_43258:PFCTree.View.Link
              id: 67478
              fromID: 67475
              toID: 43258
              bounds: 422,5650,16,70
            END
            EndParallelDivergent43257:PFCTree.View.ParallelConvergent
              id: 43258
              idEnd: 43257
              bounds: 2,5720,565,40
            END
            43258_36885:PFCTree.View.Link
              id: 67664
              fromID: 43258
              toID: 36885
              bounds: 277,5760,16,86
            END
            EndNode36885:PFCTree.View.EndNode
              id: 36885
              bounds: 219,5846,130,32
            END
          END
          bounds: 2,110,130,83
        END
        36841_36936:PFCTree.View.ControlLink
          id: 37039
          fromID: 36841
          toID: 36936
          bounds: 60,193,16,27
        END
        OFFLINE_PARAMS_OP:PFCTree.View.Operation
          description: OFFLINE_PARAMS_OP
          id: 36936
          order: 0
          design:
            BeginNode36937:PFCTree.View.BeginNode
              id: 36937
              bounds: 944,16,130,32
            END
            36937_37249:PFCTree.View.Link
              id: 37252
              fromID: 36937
              toID: 37249
              bounds: 1002,48,16,97
            END
            SerialDivergent37249:PFCTree.View.SerialDivergent
              id: 37249
              idEnd: 37250
              bounds: 2,145,2015,40
            END
            37249_37280:PFCTree.View.Link
              id: 37281
              fromID: 37249
              toID: 37280
              bounds: 350,185,16,35
            END
            37249_38273:PFCTree.View.Link
              id: 38276
              fromID: 37249
              toID: 38273
              bounds: 1365,185,16,70
            END
            IS_ONLINE_PRN_BS:PFCTree.View.Script
              id: 37280
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LabelOnline"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 292,220,130,55
              executeAtClientID: No
            END
            SerialDivergent38273:PFCTree.View.SerialDivergent
              id: 38273
              idEnd: 38274
              bounds: 727,255,1290,40
            END
            37280_38216:PFCTree.View.Link
              id: 38219
              fromID: 37280
              toID: 38216
              bounds: 350,275,16,90
            END
            38273_38281:PFCTree.View.Link
              id: 38282
              fromID: 38273
              toID: 38281
              bounds: 857,295,16,35
            END
            38273_38302:PFCTree.View.Link
              id: 38303
              fromID: 38273
              toID: 38302
              bounds: 1147,295,16,35
            END
            38273_38330:PFCTree.View.Link
              id: 38331
              fromID: 38273
              toID: 38330
              bounds: 1437,295,16,35
            END
            38273_38353:PFCTree.View.Link
              id: 38354
              fromID: 38273
              toID: 38353
              bounds: 1727,295,16,35
            END
            38273_38375:PFCTree.View.Link
              id: 38376
              fromID: 38273
              toID: 38375
              bounds: 1945,295,16,35
            END
            CHK_PUL2_BS:PFCTree.View.Script
              id: 38281
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LabelReconType"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"PUL_ONLY"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 799,330,130,55
              executeAtClientID: No
            END
            CHK_BUL_PUL_2_BS:PFCTree.View.Script
              id: 38302
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LabelReconType"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"BUL_AND_PUL"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 1
              bounds: 1089,330,130,55
              executeAtClientID: No
            END
            CHK_BUL1_BS:PFCTree.View.Script
              id: 38330
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LabelReconType"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"BUL_ONLY"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 2
              bounds: 1379,330,130,55
              executeAtClientID: No
            END
            CHK_NONE_BS:PFCTree.View.Script
              id: 38353
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LabelReconType"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"None"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 3
              bounds: 1669,330,130,55
              executeAtClientID: No
            END
            PROFILE_EXCEPTION:PFCTree.View.Phase
              description: OFFLINE - NO PROFILE
              buildingBlockElementID: GENERIC.INSTRUCTION
              arguments:
                iSignature_Required;3;"Ok button";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;NULL;RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;NULL;Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_Print;1;NO;Print button visible;;;false;;
                iButton_Report;19;;Reports available for report button. If Null, report button is not visible;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iEquipment_Type;3;;Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;3;;Equipment Allocation Phase;;;true;;
                iStepAutoComplete;18;;PLC step that signals the completion of the automatic process;;;true;;
                iInstruction;19;{"NO PROFILES HAVE BEEN SELECTED"};Default Instructions;;;false;;
                iStep_Instruction;19;;Instructions for step;;;true;;
                iStep_Start;18;;Step range start;;;true;;
                iStep_End;18;;Step range end;;;true;;
                iForceViewPEL;1;NO;If Yes, PEL report must have been called to allow phase validation;;;false;;
                iEnforcedReportName;19;;The Report selected must be viewed by the user before sign off the Phase;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iLabelTemplate;3;;Label template to be printed;;=TRANSLATE ( "OVERALL.L_" + PARSE_LIST ( GET_CONFIG ( "<OVERALL.CONFIG_KEYS>LabelTemplateSpecialList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 38375
              order: 4
              bounds: 1887,330,130,83
            END
            SerialDivergent38216:PFCTree.View.SerialDivergent
              id: 38216
              idEnd: 38217
              bounds: 2,365,710,40
            END
            38281_38284:PFCTree.View.Link
              id: 38287
              fromID: 38281
              toID: 38284
              bounds: 857,385,16,90
            END
            38302_38305:PFCTree.View.Link
              id: 38308
              fromID: 38302
              toID: 38305
              bounds: 1147,385,16,90
            END
            38330_38333:PFCTree.View.Link
              id: 38336
              fromID: 38330
              toID: 38333
              bounds: 1437,385,16,90
            END
            38353_38356:PFCTree.View.Link
              id: 38359
              fromID: 38353
              toID: 38356
              bounds: 1727,385,16,90
            END
            38216_38222:PFCTree.View.Link
              id: 38223
              fromID: 38216
              toID: 38222
              bounds: 132,405,16,35
            END
            38216_38243:PFCTree.View.Link
              id: 38244
              fromID: 38216
              toID: 38243
              bounds: 422,405,16,35
            END
            38216_38381:PFCTree.View.Link
              id: 38382
              fromID: 38216
              toID: 38381
              bounds: 640,405,16,35
            END
            38375_38274:PFCTree.View.Link
              id: 38377
              fromID: 38375
              toID: 38274
              bounds: 1945,413,16,577
            END
            CHK_PUL1_BS:PFCTree.View.Script
              id: 38222
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LabelReconType"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"PUL_ONLY"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 74,440,130,55
              executeAtClientID: No
            END
            CHK_BUL_PUL_1_BS:PFCTree.View.Script
              id: 38243
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LabelReconType"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"BUL_AND_PUL"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 1
              bounds: 364,440,130,55
              executeAtClientID: No
            END
            PROFILE_EXCEPTION_1:PFCTree.View.Phase
              description: OFFLINE - NO PROFILE
              buildingBlockElementID: GENERIC.INSTRUCTION
              arguments:
                iSignature_Required;3;"Ok button";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;NULL;RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;NULL;Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_Print;1;NO;Print button visible;;;false;;
                iButton_Report;19;;Reports available for report button. If Null, report button is not visible;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iEquipment_Type;3;;Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;3;;Equipment Allocation Phase;;;true;;
                iStepAutoComplete;18;;PLC step that signals the completion of the automatic process;;;true;;
                iInstruction;19;{"NO PROFILES HAVE BEEN SELECTED"};Default Instructions;;;false;;
                iStep_Instruction;19;;Instructions for step;;;true;;
                iStep_Start;18;;Step range start;;;true;;
                iStep_End;18;;Step range end;;;true;;
                iForceViewPEL;1;NO;If Yes, PEL report must have been called to allow phase validation;;;false;;
                iEnforcedReportName;19;;The Report selected must be viewed by the user before sign off the Phase;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iLabelTemplate;3;;Label template to be printed;;=TRANSLATE ( "OVERALL.L_" + PARSE_LIST ( GET_CONFIG ( "<OVERALL.CONFIG_KEYS>LabelTemplateSpecialList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 38381
              order: 2
              bounds: 582,440,130,83
            END
            SerialDivergent38284:PFCTree.View.SerialDivergent
              id: 38284
              idEnd: 38285
              bounds: 727,475,275,40
            END
            SerialDivergent38305:PFCTree.View.SerialDivergent
              id: 38305
              idEnd: 38306
              bounds: 1017,475,275,40
            END
            SerialDivergent38333:PFCTree.View.SerialDivergent
              id: 38333
              idEnd: 38334
              bounds: 1307,475,275,40
            END
            SerialDivergent38356:PFCTree.View.SerialDivergent
              id: 38356
              idEnd: 38357
              bounds: 1597,475,275,40
            END
            38222_38225:PFCTree.View.Link
              id: 38228
              fromID: 38222
              toID: 38225
              bounds: 132,495,16,90
            END
            38243_38246:PFCTree.View.Link
              id: 38249
              fromID: 38243
              toID: 38246
              bounds: 422,495,16,90
            END
            38284_38294:PFCTree.View.Link
              id: 38295
              fromID: 38284
              toID: 38294
              bounds: 785,515,16,35
            END
            38284_38289:PFCTree.View.Link
              id: 38292
              fromID: 38284
              toID: 38289
              bounds: 930,515,16,70
            END
            38305_38320:PFCTree.View.Link
              id: 38321
              fromID: 38305
              toID: 38320
              bounds: 1075,515,16,35
            END
            38305_38310:PFCTree.View.Link
              id: 38313
              fromID: 38305
              toID: 38310
              bounds: 1220,515,16,70
            END
            38333_38343:PFCTree.View.Link
              id: 38344
              fromID: 38333
              toID: 38343
              bounds: 1365,515,16,35
            END
            38333_38338:PFCTree.View.Link
              id: 38341
              fromID: 38333
              toID: 38338
              bounds: 1510,515,16,70
            END
            38356_38366:PFCTree.View.Link
              id: 38367
              fromID: 38356
              toID: 38366
              bounds: 1655,515,16,35
            END
            38356_38361:PFCTree.View.Link
              id: 38364
              fromID: 38356
              toID: 38361
              bounds: 1800,515,16,70
            END
            38381_38217:PFCTree.View.Link
              id: 38383
              fromID: 38381
              toID: 38217
              bounds: 640,523,16,577
            END
            S_PUL_ONLY_2_BS:PFCTree.View.Script
              id: 38294
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_PrnProfile","vs_RecProfile","vs_WasteProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"None","DERMS3_ReconLblProfile2","DERMS2_LabelsPacking2"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 727,550,130,55
              executeAtClientID: No
            END
            S_PUL_BUL_2_BS:PFCTree.View.Script
              id: 38320
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_PrnProfile","vs_RecProfile","vs_WasteProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"None","DERMS3_ReconLblProfile1","DERMS2_LabelsPacking1"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1017,550,130,55
              executeAtClientID: No
            END
            S_BUL_ONLY_1_BS:PFCTree.View.Script
              id: 38343
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_PrnProfile","vs_RecProfile","vs_WasteProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"None","DERMS3_ReconLblProfile3","DERMS2_LabelsPacking3"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1307,550,130,55
              executeAtClientID: No
            END
            S_NONE_1_BS:PFCTree.View.Script
              id: 38366
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_PrnProfile","vs_RecProfile","vs_WasteProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"None","None","None"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1597,550,130,55
              executeAtClientID: No
            END
            SerialDivergent38225:PFCTree.View.SerialDivergent
              id: 38225
              idEnd: 38226
              bounds: 2,585,275,40
            END
            SerialDivergent38246:PFCTree.View.SerialDivergent
              id: 38246
              idEnd: 38247
              bounds: 292,585,275,40
            END
            ParallelDivergent38289:PFCTree.View.ParallelDivergent
              id: 38289
              idEnd: 38290
              bounds: 872,585,130,40
            END
            ParallelDivergent38310:PFCTree.View.ParallelDivergent
              id: 38310
              idEnd: 38311
              bounds: 1162,585,130,40
            END
            ParallelDivergent38338:PFCTree.View.ParallelDivergent
              id: 38338
              idEnd: 38339
              bounds: 1452,585,130,40
            END
            ParallelDivergent38361:PFCTree.View.ParallelDivergent
              id: 38361
              idEnd: 38362
              bounds: 1742,585,130,40
            END
            38294_38285:PFCTree.View.Link
              id: 38296
              fromID: 38294
              toID: 38285
              bounds: 785,605,16,275
            END
            38320_38306:PFCTree.View.Link
              id: 38322
              fromID: 38320
              toID: 38306
              bounds: 1075,605,16,275
            END
            38343_38334:PFCTree.View.Link
              id: 38345
              fromID: 38343
              toID: 38334
              bounds: 1365,605,16,275
            END
            38366_38357:PFCTree.View.Link
              id: 38368
              fromID: 38366
              toID: 38357
              bounds: 1655,605,16,275
            END
            38225_38235:PFCTree.View.Link
              id: 38236
              fromID: 38225
              toID: 38235
              bounds: 60,625,16,35
            END
            38225_38230:PFCTree.View.Link
              id: 38233
              fromID: 38225
              toID: 38230
              bounds: 205,625,16,70
            END
            38246_38256:PFCTree.View.Link
              id: 38257
              fromID: 38246
              toID: 38256
              bounds: 350,625,16,35
            END
            38246_38251:PFCTree.View.Link
              id: 38254
              fromID: 38246
              toID: 38251
              bounds: 495,625,16,70
            END
            38289_38298:PFCTree.View.Link
              id: 38299
              fromID: 38289
              toID: 38298
              bounds: 930,625,16,35
            END
            38310_38324:PFCTree.View.Link
              id: 38325
              fromID: 38310
              toID: 38324
              bounds: 1220,625,16,35
            END
            38338_38347:PFCTree.View.Link
              id: 38348
              fromID: 38338
              toID: 38347
              bounds: 1510,625,16,35
            END
            38361_38371:PFCTree.View.Link
              id: 38372
              fromID: 38361
              toID: 38371
              bounds: 1800,625,16,35
            END
            S_PUL_ONLY_1_BS:PFCTree.View.Script
              id: 38235
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_PrnProfile","vs_RecProfile","vs_WasteProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"DERMS2_LabelsOffline2","DERMS3_ReconLblProfile2","DERMS2_LabelsPacking2"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,660,130,55
              executeAtClientID: No
            END
            S_PUL_BUL_1_BS:PFCTree.View.Script
              id: 38256
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_PrnProfile","vs_RecProfile","vs_WasteProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"DERMS2_LabelsOffline2","DERMS3_ReconLblProfile1","DERMS2_LabelsPacking1"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 292,660,130,55
              executeAtClientID: No
            END
            P_PUL_ONLY_2_BS:PFCTree.View.Script
              id: 38298
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_PrnProfile","vs_RecProfile","vs_WasteProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"None","DERMS3_ReconLblProfile2","DERMS2_LabelsPacking2"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 872,660,130,55
              executeAtClientID: No
            END
            P_PUL_BUL_2_BS:PFCTree.View.Script
              id: 38324
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_PrnProfile","vs_RecProfile","vs_WasteProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"None","DERMS3_ReconLblProfile1","DERMS2_LabelsPacking1"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1162,660,130,55
              executeAtClientID: No
            END
            P_BUL_ONLY_1_BS:PFCTree.View.Script
              id: 38347
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_PrnProfile","vs_RecProfile","vs_WasteProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"None","DERMS3_ReconLblProfile3","DERMS2_LabelsPacking3"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1452,660,130,55
              executeAtClientID: No
            END
            P_NONE_1_BS:PFCTree.View.Script
              id: 38371
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_PrnProfile","vs_RecProfile","vs_WasteProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"None","None","None"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1742,660,130,55
              executeAtClientID: No
            END
            ParallelDivergent38230:PFCTree.View.ParallelDivergent
              id: 38230
              idEnd: 38231
              bounds: 147,695,130,40
            END
            ParallelDivergent38251:PFCTree.View.ParallelDivergent
              id: 38251
              idEnd: 38252
              bounds: 437,695,130,40
            END
            38235_38226:PFCTree.View.Link
              id: 38237
              fromID: 38235
              toID: 38226
              bounds: 60,715,16,275
            END
            38256_38247:PFCTree.View.Link
              id: 38258
              fromID: 38256
              toID: 38247
              bounds: 350,715,16,275
            END
            38298_38290:PFCTree.View.Link
              id: 38300
              fromID: 38298
              toID: 38290
              bounds: 930,715,16,55
            END
            38324_38311:PFCTree.View.Link
              id: 38326
              fromID: 38324
              toID: 38311
              bounds: 1220,715,16,55
            END
            38347_38339:PFCTree.View.Link
              id: 38349
              fromID: 38347
              toID: 38339
              bounds: 1510,715,16,55
            END
            38371_38362:PFCTree.View.Link
              id: 38373
              fromID: 38371
              toID: 38362
              bounds: 1800,715,16,55
            END
            38230_38239:PFCTree.View.Link
              id: 38240
              fromID: 38230
              toID: 38239
              bounds: 205,735,16,35
            END
            38251_38260:PFCTree.View.Link
              id: 38261
              fromID: 38251
              toID: 38260
              bounds: 495,735,16,35
            END
            P_PUL_ONLY_1_BS:PFCTree.View.Script
              id: 38239
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_PrnProfile","vs_RecProfile","vs_WasteProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"DERMS2_LabelsOffline2","DERMS3_ReconLblProfile2","DERMS2_LabelsPacking2"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,770,130,55
              executeAtClientID: No
            END
            P_PUL_BUL_1_BS:PFCTree.View.Script
              id: 38260
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_PrnProfile","vs_RecProfile","vs_WasteProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"DERMS2_LabelsOffline2","DERMS3_ReconLblProfile1","DERMS2_LabelsPacking1"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 437,770,130,55
              executeAtClientID: No
            END
            EndParallelDivergent38289:PFCTree.View.ParallelConvergent
              id: 38290
              idEnd: 38289
              bounds: 872,770,130,40
            END
            EndParallelDivergent38310:PFCTree.View.ParallelConvergent
              id: 38311
              idEnd: 38310
              bounds: 1162,770,130,40
            END
            EndParallelDivergent38338:PFCTree.View.ParallelConvergent
              id: 38339
              idEnd: 38338
              bounds: 1452,770,130,40
            END
            EndParallelDivergent38361:PFCTree.View.ParallelConvergent
              id: 38362
              idEnd: 38361
              bounds: 1742,770,130,40
            END
            38290_38285:PFCTree.View.Link
              id: 38293
              fromID: 38290
              toID: 38285
              bounds: 930,810,16,70
            END
            38311_38306:PFCTree.View.Link
              id: 38314
              fromID: 38311
              toID: 38306
              bounds: 1220,810,16,70
            END
            38339_38334:PFCTree.View.Link
              id: 38342
              fromID: 38339
              toID: 38334
              bounds: 1510,810,16,70
            END
            38362_38357:PFCTree.View.Link
              id: 38365
              fromID: 38362
              toID: 38357
              bounds: 1800,810,16,70
            END
            38239_38231:PFCTree.View.Link
              id: 38241
              fromID: 38239
              toID: 38231
              bounds: 205,825,16,55
            END
            38260_38252:PFCTree.View.Link
              id: 38262
              fromID: 38260
              toID: 38252
              bounds: 495,825,16,55
            END
            EndParallelDivergent38230:PFCTree.View.ParallelConvergent
              id: 38231
              idEnd: 38230
              bounds: 147,880,130,40
            END
            EndParallelDivergent38251:PFCTree.View.ParallelConvergent
              id: 38252
              idEnd: 38251
              bounds: 437,880,130,40
            END
            EndSerialDivergent38284:PFCTree.View.SerialConvergent
              id: 38285
              idEnd: 38284
              bounds: 727,880,275,40
            END
            EndSerialDivergent38305:PFCTree.View.SerialConvergent
              id: 38306
              idEnd: 38305
              bounds: 1017,880,275,40
            END
            EndSerialDivergent38333:PFCTree.View.SerialConvergent
              id: 38334
              idEnd: 38333
              bounds: 1307,880,275,40
            END
            EndSerialDivergent38356:PFCTree.View.SerialConvergent
              id: 38357
              idEnd: 38356
              bounds: 1597,880,275,40
            END
            38231_38226:PFCTree.View.Link
              id: 38234
              fromID: 38231
              toID: 38226
              bounds: 205,920,16,70
            END
            38252_38247:PFCTree.View.Link
              id: 38255
              fromID: 38252
              toID: 38247
              bounds: 495,920,16,70
            END
            38285_38274:PFCTree.View.Link
              id: 38288
              fromID: 38285
              toID: 38274
              bounds: 857,920,16,70
            END
            38306_38274:PFCTree.View.Link
              id: 38309
              fromID: 38306
              toID: 38274
              bounds: 1147,920,16,70
            END
            38334_38274:PFCTree.View.Link
              id: 38337
              fromID: 38334
              toID: 38274
              bounds: 1437,920,16,70
            END
            38357_38274:PFCTree.View.Link
              id: 38360
              fromID: 38357
              toID: 38274
              bounds: 1727,920,16,70
            END
            EndSerialDivergent38225:PFCTree.View.SerialConvergent
              id: 38226
              idEnd: 38225
              bounds: 2,990,275,40
            END
            EndSerialDivergent38246:PFCTree.View.SerialConvergent
              id: 38247
              idEnd: 38246
              bounds: 292,990,275,40
            END
            EndSerialDivergent38273:PFCTree.View.SerialConvergent
              id: 38274
              idEnd: 38273
              bounds: 727,990,1290,40
            END
            38226_38217:PFCTree.View.Link
              id: 38229
              fromID: 38226
              toID: 38217
              bounds: 132,1030,16,70
            END
            38247_38217:PFCTree.View.Link
              id: 38250
              fromID: 38247
              toID: 38217
              bounds: 422,1030,16,70
            END
            38274_37250:PFCTree.View.Link
              id: 38277
              fromID: 38274
              toID: 37250
              bounds: 1365,1030,16,180
            END
            EndSerialDivergent38216:PFCTree.View.SerialConvergent
              id: 38217
              idEnd: 38216
              bounds: 2,1100,710,40
            END
            38217_37250:PFCTree.View.Link
              id: 38380
              fromID: 38217
              toID: 37250
              bounds: 350,1140,16,70
            END
            EndSerialDivergent37249:PFCTree.View.SerialConvergent
              id: 37250
              idEnd: 37249
              bounds: 2,1210,2015,40
            END
            37250_36982:PFCTree.View.Link
              id: 38463
              fromID: 37250
              toID: 36982
              bounds: 1002,1250,16,86
            END
            EndNode36982:PFCTree.View.EndNode
              id: 36982
              bounds: 944,1336,130,32
            END
          END
          bounds: 2,220,130,83
        END
        36936_37957:PFCTree.View.ControlLink
          id: 37961
          fromID: 36936
          toID: 37957
          bounds: 60,303,16,27
        END
        PIMMS_PUL_PARAMS_OP:PFCTree.View.Operation
          description: MMS_PUL_PARAMS_OP
          id: 37957
          order: 0
          design:
            BeginNode37958:PFCTree.View.BeginNode
              id: 37958
              bounds: 109,16,130,32
            END
            37958_37976:PFCTree.View.Link
              id: 38537
              fromID: 37958
              toID: 37976
              bounds: 167,48,16,97
            END
            SerialDivergent37976:PFCTree.View.SerialDivergent
              id: 37976
              idEnd: 37977
              bounds: 37,145,275,40
            END
            37976_38062:PFCTree.View.Link
              id: 38063
              fromID: 37976
              toID: 38062
              bounds: 167,185,16,35
            END
            SERIAL_TYPE_ECODE_BS:PFCTree.View.Script
              id: 38062
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"SerialisedType"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"ECODE"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 109,220,130,55
              executeAtClientID: No
            END
            38062_38100:PFCTree.View.Link
              id: 38103
              fromID: 38062
              toID: 38100
              bounds: 167,275,16,90
            END
            SerialDivergent38100:PFCTree.View.SerialDivergent
              id: 38100
              idEnd: 38101
              bounds: 37,365,275,40
            END
            38100_38525:PFCTree.View.Link
              id: 38526
              fromID: 38100
              toID: 38525
              bounds: 95,405,16,35
            END
            38100_38105:PFCTree.View.Link
              id: 38108
              fromID: 38100
              toID: 38105
              bounds: 240,405,16,70
            END
            S_PIMMS_PUL_VARS_1_BS:PFCTree.View.Script
              id: 38525
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_Ser2DCodeCheck","vs_Serial","vs_PrnProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"No","Yes","DERMS2_LabelsOffline2"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 37,440,130,55
              executeAtClientID: No
            END
            ParallelDivergent38105:PFCTree.View.ParallelDivergent
              id: 38105
              idEnd: 38106
              bounds: 182,475,130,40
            END
            38525_38101:PFCTree.View.Link
              id: 38527
              fromID: 38525
              toID: 38101
              bounds: 95,495,16,275
            END
            38105_38529:PFCTree.View.Link
              id: 38530
              fromID: 38105
              toID: 38529
              bounds: 240,515,16,35
            END
            P_PIMMS_PUL_VARS_1_BS:PFCTree.View.Script
              id: 38529
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_Ser2DCodeCheck","vs_Serial","vs_PrnProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"No","Yes","DERMS2_LabelsOffline2"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 182,550,130,55
              executeAtClientID: No
            END
            38529_38106:PFCTree.View.Link
              id: 38531
              fromID: 38529
              toID: 38106
              bounds: 240,605,16,55
            END
            EndParallelDivergent38105:PFCTree.View.ParallelConvergent
              id: 38106
              idEnd: 38105
              bounds: 182,660,130,40
            END
            38106_38101:PFCTree.View.Link
              id: 38109
              fromID: 38106
              toID: 38101
              bounds: 240,700,16,70
            END
            EndSerialDivergent38100:PFCTree.View.SerialConvergent
              id: 38101
              idEnd: 38100
              bounds: 37,770,275,40
            END
            38101_37977:PFCTree.View.Link
              id: 38104
              fromID: 38101
              toID: 37977
              bounds: 167,810,16,70
            END
            EndSerialDivergent37976:PFCTree.View.SerialConvergent
              id: 37977
              idEnd: 37976
              bounds: 37,880,275,40
            END
            37977_38464:PFCTree.View.Link
              id: 38467
              fromID: 37977
              toID: 38464
              bounds: 167,920,16,105
            END
            ParallelDivergent38464:PFCTree.View.ParallelDivergent
              id: 38464
              idEnd: 38465
              bounds: 109,1025,130,40
            END
            38464_38465:PFCTree.View.Link
              id: 38466
              fromID: 38464
              toID: 38465
              bounds: 167,1065,16,35
            END
            EndParallelDivergent38464:PFCTree.View.ParallelConvergent
              id: 38465
              idEnd: 38464
              bounds: 109,1100,130,40
            END
            38465_38469:PFCTree.View.Link
              id: 38472
              fromID: 38465
              toID: 38469
              bounds: 167,1140,16,105
            END
            SerialDivergent38469:PFCTree.View.SerialDivergent
              id: 38469
              idEnd: 38470
              bounds: 37,1245,275,40
            END
            38469_38485:PFCTree.View.Link
              id: 38486
              fromID: 38469
              toID: 38485
              bounds: 167,1285,16,35
            END
            SERIAL_TYPE_PODAPLUS_BS:PFCTree.View.Script
              id: 38485
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"SerialisedType"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"PODAPLUS"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 109,1320,130,55
              executeAtClientID: No
            END
            38485_38474:PFCTree.View.Link
              id: 38487
              fromID: 38485
              toID: 38474
              bounds: 167,1375,16,90
            END
            SerialDivergent38474:PFCTree.View.SerialDivergent
              id: 38474
              idEnd: 38475
              bounds: 37,1465,275,40
            END
            38474_38489:PFCTree.View.Link
              id: 38490
              fromID: 38474
              toID: 38489
              bounds: 95,1505,16,35
            END
            38474_38479:PFCTree.View.Link
              id: 38482
              fromID: 38474
              toID: 38479
              bounds: 240,1505,16,70
            END
            S_PIMMS_PUL_VARS_2_BS:PFCTree.View.Script
              id: 38489
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_Ser2DCodeCheck","vs_Serial","vs_PrnProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Yes","Yes","DERMS2_LabelsOffline2"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 37,1540,130,55
              executeAtClientID: No
            END
            ParallelDivergent38479:PFCTree.View.ParallelDivergent
              id: 38479
              idEnd: 38480
              bounds: 182,1575,130,40
            END
            38489_38475:PFCTree.View.Link
              id: 38491
              fromID: 38489
              toID: 38475
              bounds: 95,1595,16,275
            END
            38479_38522:PFCTree.View.Link
              id: 38523
              fromID: 38479
              toID: 38522
              bounds: 240,1615,16,35
            END
            P_PIMMS_PUL_VARS_2_BS:PFCTree.View.Script
              id: 38522
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_Ser2DCodeCheck","vs_Serial","vs_PrnProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Yes","Yes","DERMS2_LabelsOffline2"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 182,1650,130,55
              executeAtClientID: No
            END
            38522_38480:PFCTree.View.Link
              id: 38524
              fromID: 38522
              toID: 38480
              bounds: 240,1705,16,55
            END
            EndParallelDivergent38479:PFCTree.View.ParallelConvergent
              id: 38480
              idEnd: 38479
              bounds: 182,1760,130,40
            END
            38480_38475:PFCTree.View.Link
              id: 38483
              fromID: 38480
              toID: 38475
              bounds: 240,1800,16,70
            END
            EndSerialDivergent38474:PFCTree.View.SerialConvergent
              id: 38475
              idEnd: 38474
              bounds: 37,1870,275,40
            END
            38475_38470:PFCTree.View.Link
              id: 38478
              fromID: 38475
              toID: 38470
              bounds: 167,1910,16,70
            END
            EndSerialDivergent38469:PFCTree.View.SerialConvergent
              id: 38470
              idEnd: 38469
              bounds: 37,1980,275,40
            END
            38470_38496:PFCTree.View.Link
              id: 38499
              fromID: 38470
              toID: 38496
              bounds: 167,2020,16,105
            END
            ParallelDivergent38496:PFCTree.View.ParallelDivergent
              id: 38496
              idEnd: 38497
              bounds: 109,2125,130,40
            END
            38496_38497:PFCTree.View.Link
              id: 38498
              fromID: 38496
              toID: 38497
              bounds: 167,2165,16,35
            END
            EndParallelDivergent38496:PFCTree.View.ParallelConvergent
              id: 38497
              idEnd: 38496
              bounds: 109,2200,130,40
            END
            38497_38503:PFCTree.View.Link
              id: 38506
              fromID: 38497
              toID: 38503
              bounds: 167,2240,16,105
            END
            SerialDivergent38503:PFCTree.View.SerialDivergent
              id: 38503
              idEnd: 38504
              bounds: 37,2345,275,40
            END
            38503_38518:PFCTree.View.Link
              id: 38519
              fromID: 38503
              toID: 38518
              bounds: 167,2385,16,35
            END
            SERIAL_TYPE_TTUS_BS:PFCTree.View.Script
              id: 38518
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"SerialisedType"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"TTUS"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 109,2420,130,55
              executeAtClientID: No
            END
            38518_38508:PFCTree.View.Link
              id: 38520
              fromID: 38518
              toID: 38508
              bounds: 167,2475,16,90
            END
            SerialDivergent38508:PFCTree.View.SerialDivergent
              id: 38508
              idEnd: 38509
              bounds: 37,2565,275,40
            END
            38508_38538:PFCTree.View.Link
              id: 38539
              fromID: 38508
              toID: 38538
              bounds: 95,2605,16,35
            END
            38508_38513:PFCTree.View.Link
              id: 38516
              fromID: 38508
              toID: 38513
              bounds: 240,2605,16,70
            END
            S_PIMMS_PUL_VARS_3_BS:PFCTree.View.Script
              id: 38538
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_Ser2DCodeCheck","vs_Serial","vs_PrnProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Yes","Yes","DERMS2_LabelsOffline2"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 37,2640,130,55
              executeAtClientID: No
            END
            ParallelDivergent38513:PFCTree.View.ParallelDivergent
              id: 38513
              idEnd: 38514
              bounds: 182,2675,130,40
            END
            38538_38509:PFCTree.View.Link
              id: 38540
              fromID: 38538
              toID: 38509
              bounds: 95,2695,16,275
            END
            38513_38541:PFCTree.View.Link
              id: 38542
              fromID: 38513
              toID: 38541
              bounds: 240,2715,16,35
            END
            P_PIMMS_PUL_VARS_3_BS:PFCTree.View.Script
              id: 38541
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_Ser2DCodeCheck","vs_Serial","vs_PrnProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Yes","Yes","DERMS2_LabelsOffline2"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 182,2750,130,55
              executeAtClientID: No
            END
            38541_38514:PFCTree.View.Link
              id: 38543
              fromID: 38541
              toID: 38514
              bounds: 240,2805,16,55
            END
            EndParallelDivergent38513:PFCTree.View.ParallelConvergent
              id: 38514
              idEnd: 38513
              bounds: 182,2860,130,40
            END
            38514_38509:PFCTree.View.Link
              id: 38517
              fromID: 38514
              toID: 38509
              bounds: 240,2900,16,70
            END
            EndSerialDivergent38508:PFCTree.View.SerialConvergent
              id: 38509
              idEnd: 38508
              bounds: 37,2970,275,40
            END
            38509_38504:PFCTree.View.Link
              id: 38512
              fromID: 38509
              toID: 38504
              bounds: 167,3010,16,70
            END
            EndSerialDivergent38503:PFCTree.View.SerialConvergent
              id: 38504
              idEnd: 38503
              bounds: 37,3080,275,40
            END
            38504_37959:PFCTree.View.Link
              id: 38507
              fromID: 38504
              toID: 37959
              bounds: 167,3120,16,86
            END
            EndNode37959:PFCTree.View.EndNode
              id: 37959
              bounds: 109,3206,130,32
            END
          END
          bounds: 2,330,130,83
        END
        37957_38071:PFCTree.View.ControlLink
          id: 38075
          fromID: 37957
          toID: 38071
          bounds: 60,413,16,27
        END
        SAP_PUL_PARAMS_OP:PFCTree.View.Operation
          description: SAP_PUL_PARAMS_OP
          id: 38071
          order: 0
          design:
            BeginNode38072:PFCTree.View.BeginNode
              id: 38072
              bounds: 109,16,130,32
            END
            38072_38077:PFCTree.View.Link
              id: 38080
              fromID: 38072
              toID: 38077
              bounds: 167,48,16,97
            END
            SerialDivergent38077:PFCTree.View.SerialDivergent
              id: 38077
              idEnd: 38078
              bounds: 37,145,275,40
            END
            38077_38097:PFCTree.View.Link
              id: 38098
              fromID: 38077
              toID: 38097
              bounds: 167,185,16,35
            END
            SERIAL_TYPE_BXVAR_BS:PFCTree.View.Script
              id: 38097
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"SerialisedType"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"BXVAR"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 109,220,130,55
              executeAtClientID: No
            END
            38097_38082:PFCTree.View.Link
              id: 38099
              fromID: 38097
              toID: 38082
              bounds: 167,275,16,90
            END
            SerialDivergent38082:PFCTree.View.SerialDivergent
              id: 38082
              idEnd: 38083
              bounds: 37,365,275,40
            END
            38082_38544:PFCTree.View.Link
              id: 38545
              fromID: 38082
              toID: 38544
              bounds: 95,405,16,35
            END
            38082_38087:PFCTree.View.Link
              id: 38090
              fromID: 38082
              toID: 38087
              bounds: 240,405,16,70
            END
            S_SAP_PUL_VARS_1_BS:PFCTree.View.Script
              id: 38544
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_Ser2DCodeCheck","vs_Serial"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Yes","No"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 37,440,130,55
              executeAtClientID: No
            END
            ParallelDivergent38087:PFCTree.View.ParallelDivergent
              id: 38087
              idEnd: 38088
              bounds: 182,475,130,40
            END
            38544_38083:PFCTree.View.Link
              id: 38546
              fromID: 38544
              toID: 38083
              bounds: 95,495,16,275
            END
            38087_38547:PFCTree.View.Link
              id: 38548
              fromID: 38087
              toID: 38547
              bounds: 240,515,16,35
            END
            P_SAP_PUL_VARS_1_BS:PFCTree.View.Script
              id: 38547
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_Ser2DCodeCheck","vs_Serial"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Yes","No"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 182,550,130,55
              executeAtClientID: No
            END
            38547_38088:PFCTree.View.Link
              id: 38549
              fromID: 38547
              toID: 38088
              bounds: 240,605,16,55
            END
            EndParallelDivergent38087:PFCTree.View.ParallelConvergent
              id: 38088
              idEnd: 38087
              bounds: 182,660,130,40
            END
            38088_38083:PFCTree.View.Link
              id: 38091
              fromID: 38088
              toID: 38083
              bounds: 240,700,16,70
            END
            EndSerialDivergent38082:PFCTree.View.SerialConvergent
              id: 38083
              idEnd: 38082
              bounds: 37,770,275,40
            END
            38083_38078:PFCTree.View.Link
              id: 38086
              fromID: 38083
              toID: 38078
              bounds: 167,810,16,70
            END
            EndSerialDivergent38077:PFCTree.View.SerialConvergent
              id: 38078
              idEnd: 38077
              bounds: 37,880,275,40
            END
            38078_38550:PFCTree.View.Link
              id: 38553
              fromID: 38078
              toID: 38550
              bounds: 167,920,16,105
            END
            ParallelDivergent38550:PFCTree.View.ParallelDivergent
              id: 38550
              idEnd: 38551
              bounds: 109,1025,130,40
            END
            38550_38551:PFCTree.View.Link
              id: 38552
              fromID: 38550
              toID: 38551
              bounds: 167,1065,16,35
            END
            EndParallelDivergent38550:PFCTree.View.ParallelConvergent
              id: 38551
              idEnd: 38550
              bounds: 109,1100,130,40
            END
            38551_38561:PFCTree.View.Link
              id: 38564
              fromID: 38551
              toID: 38561
              bounds: 167,1140,16,105
            END
            SerialDivergent38561:PFCTree.View.SerialDivergent
              id: 38561
              idEnd: 38562
              bounds: 37,1245,275,40
            END
            38561_38566:PFCTree.View.Link
              id: 38567
              fromID: 38561
              toID: 38566
              bounds: 167,1285,16,35
            END
            SERIAL_TYPE_PODA_BS:PFCTree.View.Script
              id: 38566
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"SerialisedType"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"PODA"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 109,1320,130,55
              executeAtClientID: No
            END
            38566_38569:PFCTree.View.Link
              id: 38572
              fromID: 38566
              toID: 38569
              bounds: 167,1375,16,90
            END
            SerialDivergent38569:PFCTree.View.SerialDivergent
              id: 38569
              idEnd: 38570
              bounds: 37,1465,275,40
            END
            38569_38579:PFCTree.View.Link
              id: 38580
              fromID: 38569
              toID: 38579
              bounds: 95,1505,16,35
            END
            38569_38574:PFCTree.View.Link
              id: 38577
              fromID: 38569
              toID: 38574
              bounds: 240,1505,16,70
            END
            S_SAP_PUL_VARS_2_BS:PFCTree.View.Script
              id: 38579
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_Ser2DCodeCheck","vs_Serial"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Yes","Yes"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 37,1540,130,55
              executeAtClientID: No
            END
            ParallelDivergent38574:PFCTree.View.ParallelDivergent
              id: 38574
              idEnd: 38575
              bounds: 182,1575,130,40
            END
            38579_38570:PFCTree.View.Link
              id: 38581
              fromID: 38579
              toID: 38570
              bounds: 95,1595,16,275
            END
            38574_38582:PFCTree.View.Link
              id: 38583
              fromID: 38574
              toID: 38582
              bounds: 240,1615,16,35
            END
            P_SAP_PUL_VARS_2_BS:PFCTree.View.Script
              id: 38582
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_Ser2DCodeCheck","vs_Serial"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Yes","Yes"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 182,1650,130,55
              executeAtClientID: No
            END
            38582_38575:PFCTree.View.Link
              id: 38584
              fromID: 38582
              toID: 38575
              bounds: 240,1705,16,55
            END
            EndParallelDivergent38574:PFCTree.View.ParallelConvergent
              id: 38575
              idEnd: 38574
              bounds: 182,1760,130,40
            END
            38575_38570:PFCTree.View.Link
              id: 38578
              fromID: 38575
              toID: 38570
              bounds: 240,1800,16,70
            END
            EndSerialDivergent38569:PFCTree.View.SerialConvergent
              id: 38570
              idEnd: 38569
              bounds: 37,1870,275,40
            END
            38570_38562:PFCTree.View.Link
              id: 38573
              fromID: 38570
              toID: 38562
              bounds: 167,1910,16,70
            END
            EndSerialDivergent38561:PFCTree.View.SerialConvergent
              id: 38562
              idEnd: 38561
              bounds: 37,1980,275,40
            END
            38562_38585:PFCTree.View.Link
              id: 38588
              fromID: 38562
              toID: 38585
              bounds: 167,2020,16,105
            END
            ParallelDivergent38585:PFCTree.View.ParallelDivergent
              id: 38585
              idEnd: 38586
              bounds: 109,2125,130,40
            END
            38585_38586:PFCTree.View.Link
              id: 38587
              fromID: 38585
              toID: 38586
              bounds: 167,2165,16,35
            END
            EndParallelDivergent38585:PFCTree.View.ParallelConvergent
              id: 38586
              idEnd: 38585
              bounds: 109,2200,130,40
            END
            38586_38590:PFCTree.View.Link
              id: 38593
              fromID: 38586
              toID: 38590
              bounds: 167,2240,16,105
            END
            SerialDivergent38590:PFCTree.View.SerialDivergent
              id: 38590
              idEnd: 38591
              bounds: 37,2345,275,40
            END
            38590_38605:PFCTree.View.Link
              id: 38606
              fromID: 38590
              toID: 38605
              bounds: 167,2385,16,35
            END
            SERIAL_TYPE_TTRUS_BS:PFCTree.View.Script
              id: 38605
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"SerialisedType"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"TTRUS"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 109,2420,130,55
              executeAtClientID: No
            END
            38605_38595:PFCTree.View.Link
              id: 38607
              fromID: 38605
              toID: 38595
              bounds: 167,2475,16,90
            END
            SerialDivergent38595:PFCTree.View.SerialDivergent
              id: 38595
              idEnd: 38596
              bounds: 37,2565,275,40
            END
            38595_38608:PFCTree.View.Link
              id: 38609
              fromID: 38595
              toID: 38608
              bounds: 95,2605,16,35
            END
            38595_38600:PFCTree.View.Link
              id: 38603
              fromID: 38595
              toID: 38600
              bounds: 240,2605,16,70
            END
            S_SAP_PUL_VARS_3_BS:PFCTree.View.Script
              id: 38608
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_Ser2DCodeCheck","vs_Serial"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Yes","Yes"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 37,2640,130,55
              executeAtClientID: No
            END
            ParallelDivergent38600:PFCTree.View.ParallelDivergent
              id: 38600
              idEnd: 38601
              bounds: 182,2675,130,40
            END
            38608_38596:PFCTree.View.Link
              id: 38610
              fromID: 38608
              toID: 38596
              bounds: 95,2695,16,275
            END
            38600_38611:PFCTree.View.Link
              id: 38612
              fromID: 38600
              toID: 38611
              bounds: 240,2715,16,35
            END
            P_SAP_PUL_VARS_3_BS:PFCTree.View.Script
              id: 38611
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_Ser2DCodeCheck","vs_Serial"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Yes","Yes"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 182,2750,130,55
              executeAtClientID: No
            END
            38611_38601:PFCTree.View.Link
              id: 38613
              fromID: 38611
              toID: 38601
              bounds: 240,2805,16,55
            END
            EndParallelDivergent38600:PFCTree.View.ParallelConvergent
              id: 38601
              idEnd: 38600
              bounds: 182,2860,130,40
            END
            38601_38596:PFCTree.View.Link
              id: 38604
              fromID: 38601
              toID: 38596
              bounds: 240,2900,16,70
            END
            EndSerialDivergent38595:PFCTree.View.SerialConvergent
              id: 38596
              idEnd: 38595
              bounds: 37,2970,275,40
            END
            38596_38591:PFCTree.View.Link
              id: 38599
              fromID: 38596
              toID: 38591
              bounds: 167,3010,16,70
            END
            EndSerialDivergent38590:PFCTree.View.SerialConvergent
              id: 38591
              idEnd: 38590
              bounds: 37,3080,275,40
            END
            38591_38073:PFCTree.View.Link
              id: 38594
              fromID: 38591
              toID: 38073
              bounds: 167,3120,16,86
            END
            EndNode38073:PFCTree.View.EndNode
              id: 38073
              bounds: 109,3206,130,32
            END
          END
          bounds: 2,440,130,83
        END
        38071_37037:PFCTree.View.ControlLink
          id: 38076
          fromID: 38071
          toID: 37037
          bounds: 60,523,16,43
        END
        EndNode37037:PFCTree.View.EndNode
          id: 37037
          bounds: 2,566,130,32
        END
      END
      bounds: 509,220,130,83
    END
    21074_3364:PFCTree.View.Link
      id: 21088
      fromID: 21074
      toID: 3364
      bounds: 60,303,16,1017
    END
    36839_21528:PFCTree.View.ControlLink
      id: 37042
      fromID: 36839
      toID: 21528
      bounds: 567,303,16,27
    END
    P_EQUIPMENT_ALLOCATION_UP:PFCTree.View.UnitProcedure
      description: EQUIPMENT ALLOCATION
      id: 21528
      order: 0
      design:
        BeginNode23005:PFCTree.View.BeginNode
          id: 23005
          bounds: 2,16,130,32
        END
        23005_29397:PFCTree.View.ControlLink
          id: 35384
          fromID: 23005
          toID: 29397
          bounds: 60,48,16,62
        END
        EQUIPMENT_ALLOCATION_OP:PFCTree.View.Operation
          description: EQUIPMENT ALLOCATION
          id: 29397
          order: 0
          design:
            BeginNode29398:PFCTree.View.BeginNode
              id: 29398
              bounds: 74,16,130,32
            END
            29398_29399:PFCTree.View.ControlLink
              id: 29407
              fromID: 29398
              toID: 29399
              bounds: 132,48,16,62
            END
            EQUIPMENT_ALLOCATION_BP:PFCTree.View.Phase
              description: Equipment Allocation
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.EQUIPMENT_ALLOCATION
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Equipment to be used in the batch confirmed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed this Phase.;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iEquipment_Type;19;{"ResourceArea","LCData"};Equipment Type to be allocated;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));false;;
                iEquipment_AutoAssign;17;{YES,YES};Auto assign if only one equipment instance available;;;false;;
                iEquipment_Verification;17;{NO,NO};Equipment scanning verification required;;;false;;
                iEquipment_CheckMaterialStatusValidity;17;{NO,NO};Check Previous Material Status Validity;;;false;;
                iEquipment_ComponentId;19;{NULL,NULL};Component that the Equipment should contain;;=STRUCT_GATHER(GET_MATERIAL_LIST(), "[*].name");true;;
                iEquipment_BOMLineItem;19;{NULL,NULL};Bom Line Component that the Equipment should contain;;;true;;
                iEquipmentId;19;;Equipment Id to be allocated;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iStatus_ForEquipmentType;19;{"ResourceArea","LCData","LCData","LCData","LCData"};Equipment Type for which Status will be checked;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));true;;
                iStatus_Status;19;{"Available","Full","Partial","AdHoc","OutOfBatch"};Allowed Equipment Status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iPreviousProcessAreaAllowed_ForEquipmentType;19;;Equipment Type for which Previous Process Area will be checked;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));true;;
                iPreviousProcessAreaAllowed_ProcessArea;19;;Previous Process Area Allowed;;;true;;
                iCheckChildrenParents;1;NO;Check children/parent allocation;;;false;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 29399
              order: 0
              bounds: 74,110,130,83
            END
            29399_50062:PFCTree.View.Link
              id: 50065
              fromID: 29399
              toID: 50062
              bounds: 132,193,16,62
            END
            SerialDivergent50062:PFCTree.View.SerialDivergent
              id: 50062
              idEnd: 50063
              bounds: 2,255,275,40
            END
            50062_50071:PFCTree.View.Link
              id: 50072
              fromID: 50062
              toID: 50071
              bounds: 60,295,16,35
            END
            50062_50074:PFCTree.View.Link
              id: 50077
              fromID: 50062
              toID: 50074
              bounds: 205,295,16,70
            END
            S_SET_EQP_3_INUSE_BS:PFCTree.View.Script
              id: 50071
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.SET_EQUIPMENT_STATUS
              arguments:
                iEquipment_Type;19;{"LCData","ResourceArea"};Equipment Types to update;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));false;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP","EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iEquipment_NewStatus;19;{"InUse","InUse"};Equipment new status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iEquipment_ExceptionStatus;19;{NULL,NULL};Equipment exception status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iEquipment_StatusRollback;17;;Indicates if status of the equipment is set to the last previous value;;;true;;
                iEquipmentId;19;;Equipments to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iUserId;3;;If it is defined uses this user for update audit;;;true;;
                iReasonOfChange;3;;If it is defined uses this reason of change for update audit;;;true;;
                iParents_Update;1;NO;Defines if updates the status of the equipment parent;;;false;;
                iParents_Status;3;;Status to set for the parent. If argument is null then the Status of the Child is used;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iChildren_Update;1;NO;Defines if updates the status of the equipment children;;;false;;
                iChildren_Status;3;;Status to set for the children. If argument is null then the Status of the Parent is used;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iAdditionalPELInfo;19;;Additional Infomration for PEL event;;;true;;
                iResetDate;1;Yes;When value is YES, STATUS_DATE field is updated with current timestamp. When value is NO field is not updated;;;false;;
                iApprovalReq;1;No;When value is YES, then event remains pending for sign-off;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,330,130,55
              executeAtClientID: No
            END
            ParallelDivergent50074:PFCTree.View.ParallelDivergent
              id: 50074
              idEnd: 50075
              bounds: 147,365,130,40
            END
            50071_50063:PFCTree.View.Link
              id: 50073
              fromID: 50071
              toID: 50063
              bounds: 60,385,16,275
            END
            50074_51157:PFCTree.View.Link
              id: 51158
              fromID: 50074
              toID: 51157
              bounds: 205,405,16,35
            END
            P_SET_EQP_3_INUSE_BS:PFCTree.View.Script
              id: 51157
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.SET_EQUIPMENT_STATUS
              arguments:
                iEquipment_Type;19;{"LCData","ResourceArea"};Equipment Types to update;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));false;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP","EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iEquipment_NewStatus;19;{"InUse","InUse"};Equipment new status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iEquipment_ExceptionStatus;19;{NULL,NULL};Equipment exception status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iEquipment_StatusRollback;17;;Indicates if status of the equipment is set to the last previous value;;;true;;
                iEquipmentId;19;;Equipments to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iUserId;3;;If it is defined uses this user for update audit;;;true;;
                iReasonOfChange;3;;If it is defined uses this reason of change for update audit;;;true;;
                iParents_Update;1;NO;Defines if updates the status of the equipment parent;;;false;;
                iParents_Status;3;;Status to set for the parent. If argument is null then the Status of the Child is used;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iChildren_Update;1;NO;Defines if updates the status of the equipment children;;;false;;
                iChildren_Status;3;;Status to set for the children. If argument is null then the Status of the Parent is used;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iAdditionalPELInfo;19;;Additional Infomration for PEL event;;;true;;
                iResetDate;1;Yes;When value is YES, STATUS_DATE field is updated with current timestamp. When value is NO field is not updated;;;false;;
                iApprovalReq;1;No;When value is YES, then event remains pending for sign-off;;;false;;
              end
              type: 0
              order: 0
              bounds: 147,440,130,55
              executeAtClientID: No
            END
            51157_50075:PFCTree.View.Link
              id: 51159
              fromID: 51157
              toID: 50075
              bounds: 205,495,16,55
            END
            EndParallelDivergent50074:PFCTree.View.ParallelConvergent
              id: 50075
              idEnd: 50074
              bounds: 147,550,130,40
            END
            50075_50063:PFCTree.View.Link
              id: 50078
              fromID: 50075
              toID: 50063
              bounds: 205,590,16,70
            END
            EndSerialDivergent50062:PFCTree.View.SerialConvergent
              id: 50063
              idEnd: 50062
              bounds: 2,660,275,40
            END
            50063_29406:PFCTree.View.Link
              id: 50070
              fromID: 50063
              toID: 29406
              bounds: 132,700,16,86
            END
            EndNode29406:PFCTree.View.EndNode
              id: 29406
              bounds: 74,786,130,32
            END
          END
          bounds: 2,110,130,83
        END
        29397_23082:PFCTree.View.ControlLink
          id: 29417
          fromID: 29397
          toID: 23082
          bounds: 60,193,16,43
        END
        EndNode23082:PFCTree.View.EndNode
          id: 23082
          bounds: 2,236,130,32
        END
      END
      bounds: 509,330,130,83
    END
    21528_3368:PFCTree.View.Link
      id: 30129
      fromID: 21528
      toID: 3368
      bounds: 567,413,16,62
    END
    ParallelDivergent3368:PFCTree.View.ParallelDivergent
      id: 3368
      idEnd: 3369
      bounds: 147,475,855,40
    END
    3368_30130:PFCTree.View.Link
      id: 30161
      fromID: 3368
      toID: 30130
      bounds: 205,515,16,35
    END
    3368_67045:PFCTree.View.Link
      id: 67472
      fromID: 3368
      toID: 67045
      bounds: 350,515,16,35
    END
    3368_3906:PFCTree.View.Link
      id: 8647
      fromID: 3368
      toID: 3906
      bounds: 495,515,16,35
    END
    3368_58742:PFCTree.View.Link
      id: 59252
      fromID: 3368
      toID: 58742
      bounds: 640,515,16,35
    END
    3368_26404:PFCTree.View.Link
      id: 29606
      fromID: 3368
      toID: 26404
      bounds: 785,515,16,35
    END
    3368_68174:PFCTree.View.Link
      id: 68178
      fromID: 3368
      toID: 68174
      bounds: 930,515,16,35
    END
    P_PONOTES_PINSTRUCT_UP:PFCTree.View.UnitProcedure
      description: PROCESS INSTRUCTIONS
      id: 30130
      order: 0
      design:
        BeginNode30131:PFCTree.View.BeginNode
          id: 30131
          bounds: 2,16,130,32
        END
        30131_30132:PFCTree.View.ControlLink
          id: 30159
          fromID: 30131
          toID: 30132
          bounds: 60,48,16,62
        END
        PONOTES_PINSTRUCT_OP:PFCTree.View.Operation
          description: PROCESS INSTRUCTIONS
          id: 30132
          order: 0
          design:
            BeginNode30133:PFCTree.View.BeginNode
              id: 30133
              bounds: 147,16,130,32
            END
            30133_30134:PFCTree.View.Link
              id: 30145
              fromID: 30133
              toID: 30134
              bounds: 205,48,16,97
            END
            ParallelDivergent30134:PFCTree.View.ParallelDivergent
              id: 30134
              idEnd: 30143
              bounds: 2,145,420,40
            END
            30134_30135:PFCTree.View.Link
              id: 30146
              fromID: 30134
              toID: 30135
              bounds: 60,185,16,35
            END
            30134_30136:PFCTree.View.Link
              id: 30147
              fromID: 30134
              toID: 30136
              bounds: 277,185,16,70
            END
            PO_NOTES_BP:PFCTree.View.Phase
              description: Process Order Notes
              buildingBlockElementID: GENERIC.INSTRUCTION
              arguments:
                iSignature_Required;3;"Ok button";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;NULL;RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;NULL;Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_Print;1;NO;Print button visible;;;false;;
                iButton_Report;19;;Reports available for report button. If Null, report button is not visible;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iEquipment_Type;3;NULL;Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;3;NULL;Equipment Allocation Phase;;;true;;
                iStepAutoComplete;18;;PLC step that signals the completion of the automatic process;;;true;;
                iInstruction;19;PONotes <> NULL ? PONotes : {""};Default Instructions;;;false;;
                iStep_Instruction;19;;Instructions for step;;;true;;
                iStep_Start;18;;Step range start;;;true;;
                iStep_End;18;;Step range end;;;true;;
                iForceViewPEL;1;NO;If Yes, PEL report must have been called to allow phase validation;;;false;;
                iEnforcedReportName;19;;The Report selected must be viewed by the user before sign off the Phase;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iLabelTemplate;3;;Label template to be printed;;=TRANSLATE ( "OVERALL.L_" + PARSE_LIST ( GET_CONFIG ( "<OVERALL.CONFIG_KEYS>LabelTemplateSpecialList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 30135
              order: 0
              bounds: 2,220,130,83
            END
            SerialDivergent30136:PFCTree.View.SerialDivergent
              id: 30136
              idEnd: 30141
              bounds: 147,255,275,40
            END
            30136_30137:PFCTree.View.Link
              id: 30148
              fromID: 30136
              toID: 30137
              bounds: 205,295,16,35
            END
            30136_30138:PFCTree.View.Link
              id: 30149
              fromID: 30136
              toID: 30138
              bounds: 350,295,16,70
            END
            30135_30143:PFCTree.View.Link
              id: 30150
              fromID: 30135
              toID: 30143
              bounds: 60,303,16,577
            END
            S_GET_PROCESS_TEXT_BS:PFCTree.View.Script
              id: 30137
              buildingBlockElementID: GENERIC.SET_GLOBAL_VARIABLE_FROM_UT
              arguments:
                iParameter_Name;19;NULL;Names for the local variables that will be used by the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>LocalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iParameter_Value;18;NULL;Numeric values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueStr;19;NULL;String values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueBool;17;NULL;Boolean values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueDate;20;NULL;Date values for the local variables that will be used by the query.;;;true;;
                iParameter_GlobalVariable;19;NULL;Global variables for the local variables that will be used by the query.;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iVariable_Source;19;{"Additional Information Label 1","Additional Information Label 2","Additional Information Label 3","Additional Information Label 4","Additional Information Label 5","Additional Information Label 6","Additional Information Label 7","Additional Information Label 8","Additional Information Label 9","Additional Information Label 10"};List of queries to be executed defined in QueryList configuration key.;;=TRANSLATE("GENERIC.L_"+PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>QueryList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iVariable_Query;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};List of queries to be executed defined manually.;;;true;;
                iVariable_QueryResultType;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Type list of global variables to be set with the result of the query.;;={ TRANSLATE("GENERIC.L_Scalar"), TRANSLATE("GENERIC.L_Array") };true;;
                iVariable_Name;19;{"$$InfoLabel1","$$InfoLabel2","$$InfoLabel3","$$InfoLabel4","$$InfoLabel5","$$InfoLabel6","$$InfoLabel7","$$InfoLabel8","$$InfoLabel9","$$InfoLabel10"};List of global variables to be set with the result of the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>GlobalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iExecuteDefaultQueries;1;YES;Specify if execute or not default queries defined in DataSource configuration key.;;;false;;
              end
              type: 0
              order: 0
              bounds: 147,330,130,55
              executeAtClientID: No
            END
            ParallelDivergent30138:PFCTree.View.ParallelDivergent
              id: 30138
              idEnd: 30140
              bounds: 292,365,130,40
            END
            30137_30141:PFCTree.View.Link
              id: 30151
              fromID: 30137
              toID: 30141
              bounds: 205,385,16,275
            END
            30138_30139:PFCTree.View.Link
              id: 30152
              fromID: 30138
              toID: 30139
              bounds: 350,405,16,35
            END
            P_GET_PROCESS_TEXT_BS:PFCTree.View.Script
              id: 30139
              buildingBlockElementID: GENERIC.SET_GLOBAL_VARIABLE_FROM_UT
              arguments:
                iParameter_Name;19;NULL;Names for the local variables that will be used by the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>LocalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iParameter_Value;18;NULL;Numeric values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueStr;19;NULL;String values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueBool;17;NULL;Boolean values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueDate;20;NULL;Date values for the local variables that will be used by the query.;;;true;;
                iParameter_GlobalVariable;19;NULL;Global variables for the local variables that will be used by the query.;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iVariable_Source;19;{"Additional Information Label 1","Additional Information Label 2","Additional Information Label 3","Additional Information Label 4","Additional Information Label 5","Additional Information Label 6","Additional Information Label 7","Additional Information Label 8","Additional Information Label 9","Additional Information Label 10"};List of queries to be executed defined in QueryList configuration key.;;=TRANSLATE("GENERIC.L_"+PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>QueryList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iVariable_Query;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};List of queries to be executed defined manually.;;;true;;
                iVariable_QueryResultType;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Type list of global variables to be set with the result of the query.;;={ TRANSLATE("GENERIC.L_Scalar"), TRANSLATE("GENERIC.L_Array") };true;;
                iVariable_Name;19;{"$$InfoLabel1","$$InfoLabel2","$$InfoLabel3","$$InfoLabel4","$$InfoLabel5","$$InfoLabel6","$$InfoLabel7","$$InfoLabel8","$$InfoLabel9","$$InfoLabel10"};List of global variables to be set with the result of the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>GlobalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iExecuteDefaultQueries;1;YES;Specify if execute or not default queries defined in DataSource configuration key.;;;false;;
              end
              type: 0
              order: 0
              bounds: 292,440,130,55
              executeAtClientID: No
            END
            30139_30140:PFCTree.View.Link
              id: 30153
              fromID: 30139
              toID: 30140
              bounds: 350,495,16,55
            END
            ParallelConvergent30140:PFCTree.View.ParallelConvergent
              id: 30140
              idEnd: 30138
              bounds: 292,550,130,40
            END
            30140_30141:PFCTree.View.Link
              id: 30154
              fromID: 30140
              toID: 30141
              bounds: 350,590,16,70
            END
            SerialConvergent30141:PFCTree.View.SerialConvergent
              id: 30141
              idEnd: 30136
              bounds: 147,660,275,40
            END
            30141_30142:PFCTree.View.Link
              id: 30155
              fromID: 30141
              toID: 30142
              bounds: 277,700,16,70
            END
            DISPLAY_PI_BP:PFCTree.View.Phase
              description: Process Instructions
              buildingBlockElementID: GENERIC.INSTRUCTION
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Process Instructions reviewed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_Print;1;NO;Print button visible;;;false;;
                iButton_Report;19;;Reports available for report button. If Null, report button is not visible;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iEquipment_Type;3;NULL;Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;3;NULL;Equipment Allocation Phase;;;true;;
                iStepAutoComplete;18;;PLC step that signals the completion of the automatic process;;;true;;
                iInstruction;19;{"" + $$InfoLabel1,"" + $$InfoLabel2,"" + $$InfoLabel3,"" + $$InfoLabel4,"" + $$InfoLabel5,"" + $$InfoLabel6,"" + $$InfoLabel7,"" + $$InfoLabel8,"" + $$InfoLabel9,"" + $$InfoLabel10};Default Instructions;;;false;;
                iStep_Instruction;19;;Instructions for step;;;true;;
                iStep_Start;18;;Step range start;;;true;;
                iStep_End;18;;Step range end;;;true;;
                iForceViewPEL;1;NO;If Yes, PEL report must have been called to allow phase validation;;;false;;
                iEnforcedReportName;19;;The Report selected must be viewed by the user before sign off the Phase;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iLabelTemplate;3;;Label template to be printed;;=TRANSLATE ( "OVERALL.L_" + PARSE_LIST ( GET_CONFIG ( "<OVERALL.CONFIG_KEYS>LabelTemplateSpecialList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 30142
              order: 0
              bounds: 219,770,130,83
            END
            30142_30143:PFCTree.View.Link
              id: 30156
              fromID: 30142
              toID: 30143
              bounds: 277,853,16,27
            END
            ParallelConvergent30143:PFCTree.View.ParallelConvergent
              id: 30143
              idEnd: 30134
              bounds: 2,880,420,40
            END
            30143_30144:PFCTree.View.Link
              id: 30157
              fromID: 30143
              toID: 30144
              bounds: 205,920,16,86
            END
            EndNode30144:PFCTree.View.EndNode
              id: 30144
              bounds: 147,1006,130,32
            END
          END
          bounds: 2,110,130,83
        END
        30132_30158:PFCTree.View.ControlLink
          id: 30160
          fromID: 30132
          toID: 30158
          bounds: 60,193,16,43
        END
        EndNode30158:PFCTree.View.EndNode
          id: 30158
          bounds: 2,236,130,32
        END
      END
      bounds: 147,550,130,83
    END
    P_CHALLENGE_UP:PFCTree.View.UnitProcedure
      description: CRITICAL DEVICE CHALLENGES
      id: 67045
      order: 1
      design:
        BeginNode67046:PFCTree.View.BeginNode
          id: 67046
          bounds: 509,16,130,32
        END
        67046_67047:PFCTree.View.ControlLink
          id: 67337
          fromID: 67046
          toID: 67047
          bounds: 567,48,16,62
        END
        CHALL_DISABLE_OP:PFCTree.View.Operation
          description: DISABLE CHALLENGE PHASE
          id: 67047
          order: 0
          design:
            BeginNode67048:PFCTree.View.BeginNode
              id: 67048
              bounds: 74,16,130,32
            END
            67048_67049:PFCTree.View.Link
              id: 67060
              fromID: 67048
              toID: 67049
              bounds: 132,48,16,97
            END
            SerialDivergent67049:PFCTree.View.SerialDivergent
              id: 67049
              idEnd: 67057
              bounds: 2,145,275,40
            END
            67049_67050:PFCTree.View.Link
              id: 67061
              fromID: 67049
              toID: 67050
              bounds: 132,185,16,35
            END
            CHK_CHALL_HOLD_BS:PFCTree.View.Script
              id: 67050
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Hold"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 74,220,130,55
              executeAtClientID: No
            END
            67050_67051:PFCTree.View.Link
              id: 67062
              fromID: 67050
              toID: 67051
              bounds: 132,275,16,90
            END
            SerialDivergent67051:PFCTree.View.SerialDivergent
              id: 67051
              idEnd: 67056
              bounds: 2,365,275,40
            END
            67051_67052:PFCTree.View.Link
              id: 67063
              fromID: 67051
              toID: 67052
              bounds: 60,405,16,35
            END
            67051_67053:PFCTree.View.Link
              id: 67064
              fromID: 67051
              toID: 67053
              bounds: 205,405,16,70
            END
            S_SET_COMPLETED_BS:PFCTree.View.Script
              id: 67052
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 2,440,130,55
              executeAtClientID: No
            END
            ParallelDivergent67053:PFCTree.View.ParallelDivergent
              id: 67053
              idEnd: 67055
              bounds: 147,475,130,40
            END
            67052_67056:PFCTree.View.Link
              id: 67065
              fromID: 67052
              toID: 67056
              bounds: 60,495,16,275
            END
            67053_67054:PFCTree.View.Link
              id: 67066
              fromID: 67053
              toID: 67054
              bounds: 205,515,16,35
            END
            P_SET_COMPLETED_BS:PFCTree.View.Script
              id: 67054
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 147,550,130,55
              executeAtClientID: No
            END
            67054_67055:PFCTree.View.Link
              id: 67067
              fromID: 67054
              toID: 67055
              bounds: 205,605,16,55
            END
            ParallelConvergent67055:PFCTree.View.ParallelConvergent
              id: 67055
              idEnd: 67053
              bounds: 147,660,130,40
            END
            67055_67056:PFCTree.View.Link
              id: 67068
              fromID: 67055
              toID: 67056
              bounds: 205,700,16,70
            END
            SerialConvergent67056:PFCTree.View.SerialConvergent
              id: 67056
              idEnd: 67051
              bounds: 2,770,275,40
            END
            67056_67057:PFCTree.View.Link
              id: 67069
              fromID: 67056
              toID: 67057
              bounds: 132,810,16,70
            END
            SerialConvergent67057:PFCTree.View.SerialConvergent
              id: 67057
              idEnd: 67049
              bounds: 2,880,275,40
            END
            67057_67058:PFCTree.View.Link
              id: 67070
              fromID: 67057
              toID: 67058
              bounds: 132,920,16,70
            END
            DISABLE_CHALLENGE_BP:PFCTree.View.Phase
              description: WORKFLOW DISABLE
              buildingBlockElementID: GENERIC.INSTRUCTION
              arguments:
                iSignature_Required;3;"Ok button";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;NULL;RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;NULL;Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_Print;1;NO;Print button visible;;;false;;
                iButton_Report;19;;Reports available for report button. If Null, report button is not visible;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iEquipment_Type;3;;Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;3;;Equipment Allocation Phase;;;true;;
                iStepAutoComplete;18;;PLC step that signals the completion of the automatic process;;;true;;
                iInstruction;19;{"THIS WILL BE DISABLED BY WORKFLOW"};Default Instructions;;;false;;
                iStep_Instruction;19;;Instructions for step;;;true;;
                iStep_Start;18;;Step range start;;;true;;
                iStep_End;18;;Step range end;;;true;;
                iForceViewPEL;1;NO;If Yes, PEL report must have been called to allow phase validation;;;false;;
                iEnforcedReportName;19;;The Report selected must be viewed by the user before sign off the Phase;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iLabelTemplate;3;;Label template to be printed;;=TRANSLATE ( "OVERALL.L_" + PARSE_LIST ( GET_CONFIG ( "<OVERALL.CONFIG_KEYS>LabelTemplateSpecialList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Disable
              autoStart: No
              usePhaseRet: Yes
              Converge: No
              id: 67058
              order: 0
              bounds: 74,990,130,83
            END
            67058_67059:PFCTree.View.ControlLink
              id: 67071
              fromID: 67058
              toID: 67059
              bounds: 132,1073,16,43
            END
            EndNode67059:PFCTree.View.EndNode
              id: 67059
              bounds: 74,1116,130,32
            END
          END
          bounds: 509,110,130,83
        END
        67047_67072:PFCTree.View.Link
          id: 67338
          fromID: 67047
          toID: 67072
          bounds: 567,193,16,62
        END
        SerialDivergent67072:PFCTree.View.SerialDivergent
          id: 67072
          idEnd: 67077
          bounds: 437,255,275,40
        END
        67072_67073:PFCTree.View.Link
          id: 67339
          fromID: 67072
          toID: 67073
          bounds: 495,295,16,35
        END
        67072_67074:PFCTree.View.Link
          id: 67340
          fromID: 67072
          toID: 67074
          bounds: 640,295,16,70
        END
        S_SET_CHAL_ALRM_BS:PFCTree.View.Script
          id: 67073
          buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
          arguments:
            iSet_VarName;19;{"Alrm3"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
            iSet_VarValue;16;{"Challenges in progress"};Value to set to the global variable;;;true;;
            iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
            iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
            iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
            iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
            iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
            iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
            iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
            iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
            iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
          end
          type: 0
          order: 0
          bounds: 437,330,130,55
          executeAtClientID: No
        END
        ParallelDivergent67074:PFCTree.View.ParallelDivergent
          id: 67074
          idEnd: 67076
          bounds: 582,365,130,40
        END
        67073_67077:PFCTree.View.Link
          id: 67341
          fromID: 67073
          toID: 67077
          bounds: 495,385,16,275
        END
        67074_67075:PFCTree.View.Link
          id: 67342
          fromID: 67074
          toID: 67075
          bounds: 640,405,16,35
        END
        P_SET_CHAL_ALRM_BS:PFCTree.View.Script
          id: 67075
          buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
          arguments:
            iSet_VarName;19;{"Alrm3"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
            iSet_VarValue;16;{"Challenges in progress"};Value to set to the global variable;;;true;;
            iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
            iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
            iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
            iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
            iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
            iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
            iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
            iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
            iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
          end
          type: 0
          order: 0
          bounds: 582,440,130,55
          executeAtClientID: No
        END
        67075_67076:PFCTree.View.Link
          id: 67343
          fromID: 67075
          toID: 67076
          bounds: 640,495,16,55
        END
        ParallelConvergent67076:PFCTree.View.ParallelConvergent
          id: 67076
          idEnd: 67074
          bounds: 582,550,130,40
        END
        67076_67077:PFCTree.View.Link
          id: 67344
          fromID: 67076
          toID: 67077
          bounds: 640,590,16,70
        END
        SerialConvergent67077:PFCTree.View.SerialConvergent
          id: 67077
          idEnd: 67072
          bounds: 437,660,275,40
        END
        67077_67078:PFCTree.View.Link
          id: 67345
          fromID: 67077
          toID: 67078
          bounds: 567,700,16,105
        END
        SerialDivergent67078:PFCTree.View.SerialDivergent
          id: 67078
          idEnd: 67133
          bounds: 364,805,420,40
        END
        67078_67079:PFCTree.View.Link
          id: 67346
          fromID: 67078
          toID: 67079
          bounds: 422,845,16,35
        END
        67078_67080:PFCTree.View.Link
          id: 67347
          fromID: 67078
          toID: 67080
          bounds: 567,845,16,35
        END
        67078_67081:PFCTree.View.Link
          id: 67348
          fromID: 67078
          toID: 67081
          bounds: 712,845,16,35
        END
        WAIT_SOB_START_BS:PFCTree.View.Script
          id: 67079
          buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
          arguments:
            iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
            iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
            iSignal_Value;19;{"SOB"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
            iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
          end
          type: 0
          order: 0
          bounds: 364,880,130,55
          executeAtClientID: No
        END
        WAIT_DAILY_CHALLENGE_BS:PFCTree.View.Script
          id: 67080
          buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
          arguments:
            iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
            iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
            iSignal_Value;19;{"StartShift"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
            iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
          end
          type: 0
          order: 1
          bounds: 509,880,130,55
          executeAtClientID: No
        END
        WAIT_EOB_START_BS:PFCTree.View.Script
          id: 67081
          buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
          arguments:
            iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
            iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
            iSignal_Value;19;{"EOB"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
            iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
          end
          type: 0
          order: 2
          bounds: 654,880,130,55
          executeAtClientID: No
        END
        67079_67082:PFCTree.View.ControlLink
          id: 67349
          fromID: 67079
          toID: 67082
          bounds: 422,935,16,55
        END
        67080_67099:PFCTree.View.ControlLink
          id: 67350
          fromID: 67080
          toID: 67099
          bounds: 567,935,16,55
        END
        67081_67116:PFCTree.View.ControlLink
          id: 67351
          fromID: 67081
          toID: 67116
          bounds: 712,935,16,55
        END
        SOB_CHALLENGES_OP:PFCTree.View.Operation
          description: Start of Batch Challenges
          id: 67082
          order: 0
          design:
            BeginNode67083:PFCTree.View.BeginNode
              id: 67083
              bounds: 74,16,130,32
            END
            67083_67084:PFCTree.View.Link
              id: 67091
              fromID: 67083
              toID: 67084
              bounds: 132,48,16,97
            END
            SerialDivergent67084:PFCTree.View.SerialDivergent
              id: 67084
              idEnd: 67089
              bounds: 2,145,275,40
            END
            67084_67085:PFCTree.View.Link
              id: 67092
              fromID: 67084
              toID: 67085
              bounds: 60,185,16,35
            END
            67084_67086:PFCTree.View.Link
              id: 67093
              fromID: 67084
              toID: 67086
              bounds: 205,185,16,70
            END
            S_SOB_INSTRUCT_BS:PFCTree.View.Script
              id: 67085
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeInstruction"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Carry out Start of Batch Challenges"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,220,130,55
              executeAtClientID: No
            END
            ParallelDivergent67086:PFCTree.View.ParallelDivergent
              id: 67086
              idEnd: 67088
              bounds: 147,255,130,40
            END
            67085_67089:PFCTree.View.Link
              id: 67094
              fromID: 67085
              toID: 67089
              bounds: 60,275,16,275
            END
            67086_67087:PFCTree.View.Link
              id: 67095
              fromID: 67086
              toID: 67087
              bounds: 205,295,16,35
            END
            P_SOB_INSTRUCT_BS:PFCTree.View.Script
              id: 67087
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeInstruction"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Carry out Start of Batch Challenges"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,330,130,55
              executeAtClientID: No
            END
            67087_67088:PFCTree.View.Link
              id: 67096
              fromID: 67087
              toID: 67088
              bounds: 205,385,16,55
            END
            ParallelConvergent67088:PFCTree.View.ParallelConvergent
              id: 67088
              idEnd: 67086
              bounds: 147,440,130,40
            END
            67088_67089:PFCTree.View.Link
              id: 67097
              fromID: 67088
              toID: 67089
              bounds: 205,480,16,70
            END
            SerialConvergent67089:PFCTree.View.SerialConvergent
              id: 67089
              idEnd: 67084
              bounds: 2,550,275,40
            END
            67089_67090:PFCTree.View.Link
              id: 67098
              fromID: 67089
              toID: 67090
              bounds: 132,590,16,86
            END
            EndNode67090:PFCTree.View.EndNode
              id: 67090
              bounds: 74,676,130,32
            END
          END
          bounds: 364,990,130,83
        END
        SHIFT_CHALLENGES_OP_1:PFCTree.View.Operation
          description: Start Of Shift Challenges
          id: 67099
          order: 0
          design:
            BeginNode67100:PFCTree.View.BeginNode
              id: 67100
              bounds: 74,16,130,32
            END
            67100_67101:PFCTree.View.Link
              id: 67108
              fromID: 67100
              toID: 67101
              bounds: 132,48,16,97
            END
            SerialDivergent67101:PFCTree.View.SerialDivergent
              id: 67101
              idEnd: 67106
              bounds: 2,145,275,40
            END
            67101_67102:PFCTree.View.Link
              id: 67109
              fromID: 67101
              toID: 67102
              bounds: 60,185,16,35
            END
            67101_67103:PFCTree.View.Link
              id: 67110
              fromID: 67101
              toID: 67103
              bounds: 205,185,16,70
            END
            S_SHIFT_INSTRUCTION_BS:PFCTree.View.Script
              id: 67102
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeInstruction"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Carry out start of shift Challenges"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,220,130,55
              executeAtClientID: No
            END
            ParallelDivergent67103:PFCTree.View.ParallelDivergent
              id: 67103
              idEnd: 67105
              bounds: 147,255,130,40
            END
            67102_67106:PFCTree.View.Link
              id: 67111
              fromID: 67102
              toID: 67106
              bounds: 60,275,16,275
            END
            67103_67104:PFCTree.View.Link
              id: 67112
              fromID: 67103
              toID: 67104
              bounds: 205,295,16,35
            END
            P_SHIFT_INSTRUCTION_BS:PFCTree.View.Script
              id: 67104
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeInstruction"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Carry out start of shift Challenges"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,330,130,55
              executeAtClientID: No
            END
            67104_67105:PFCTree.View.Link
              id: 67113
              fromID: 67104
              toID: 67105
              bounds: 205,385,16,55
            END
            ParallelConvergent67105:PFCTree.View.ParallelConvergent
              id: 67105
              idEnd: 67103
              bounds: 147,440,130,40
            END
            67105_67106:PFCTree.View.Link
              id: 67114
              fromID: 67105
              toID: 67106
              bounds: 205,480,16,70
            END
            SerialConvergent67106:PFCTree.View.SerialConvergent
              id: 67106
              idEnd: 67101
              bounds: 2,550,275,40
            END
            67106_67107:PFCTree.View.Link
              id: 67115
              fromID: 67106
              toID: 67107
              bounds: 132,590,16,86
            END
            EndNode67107:PFCTree.View.EndNode
              id: 67107
              bounds: 74,676,130,32
            END
          END
          bounds: 509,990,130,83
        END
        EOB_CHALLENGES_OP:PFCTree.View.Operation
          description: End Of Batch Challenges
          id: 67116
          order: 0
          design:
            BeginNode67117:PFCTree.View.BeginNode
              id: 67117
              bounds: 74,16,130,32
            END
            67117_67118:PFCTree.View.Link
              id: 67125
              fromID: 67117
              toID: 67118
              bounds: 132,48,16,97
            END
            SerialDivergent67118:PFCTree.View.SerialDivergent
              id: 67118
              idEnd: 67123
              bounds: 2,145,275,40
            END
            67118_67119:PFCTree.View.Link
              id: 67126
              fromID: 67118
              toID: 67119
              bounds: 60,185,16,35
            END
            67118_67120:PFCTree.View.Link
              id: 67127
              fromID: 67118
              toID: 67120
              bounds: 205,185,16,70
            END
            S_EOB_INSTRUCTION_BS:PFCTree.View.Script
              id: 67119
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeInstruction"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Carry out End of Batch Challenges"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,220,130,55
              executeAtClientID: No
            END
            ParallelDivergent67120:PFCTree.View.ParallelDivergent
              id: 67120
              idEnd: 67122
              bounds: 147,255,130,40
            END
            67119_67123:PFCTree.View.Link
              id: 67128
              fromID: 67119
              toID: 67123
              bounds: 60,275,16,275
            END
            67120_67121:PFCTree.View.Link
              id: 67129
              fromID: 67120
              toID: 67121
              bounds: 205,295,16,35
            END
            P_EOB_INSTRUCTION_BS:PFCTree.View.Script
              id: 67121
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeInstruction"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Carry out End of Batch Challenges"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,330,130,55
              executeAtClientID: No
            END
            67121_67122:PFCTree.View.Link
              id: 67130
              fromID: 67121
              toID: 67122
              bounds: 205,385,16,55
            END
            ParallelConvergent67122:PFCTree.View.ParallelConvergent
              id: 67122
              idEnd: 67120
              bounds: 147,440,130,40
            END
            67122_67123:PFCTree.View.Link
              id: 67131
              fromID: 67122
              toID: 67123
              bounds: 205,480,16,70
            END
            SerialConvergent67123:PFCTree.View.SerialConvergent
              id: 67123
              idEnd: 67118
              bounds: 2,550,275,40
            END
            67123_67124:PFCTree.View.Link
              id: 67132
              fromID: 67123
              toID: 67124
              bounds: 132,590,16,86
            END
            EndNode67124:PFCTree.View.EndNode
              id: 67124
              bounds: 74,676,130,32
            END
          END
          bounds: 654,990,130,83
        END
        67082_67133:PFCTree.View.Link
          id: 67352
          fromID: 67082
          toID: 67133
          bounds: 422,1073,16,27
        END
        67099_67133:PFCTree.View.Link
          id: 67353
          fromID: 67099
          toID: 67133
          bounds: 567,1073,16,27
        END
        67116_67133:PFCTree.View.Link
          id: 67354
          fromID: 67116
          toID: 67133
          bounds: 712,1073,16,27
        END
        SerialConvergent67133:PFCTree.View.SerialConvergent
          id: 67133
          idEnd: 67078
          bounds: 364,1100,420,40
        END
        67133_67134:PFCTree.View.Link
          id: 67355
          fromID: 67133
          toID: 67134
          bounds: 567,1140,16,105
        END
        ParallelDivergent67134:PFCTree.View.ParallelDivergent
          id: 67134
          idEnd: 67279
          bounds: 2,1245,1145,40
        END
        67134_67135:PFCTree.View.Link
          id: 67356
          fromID: 67134
          toID: 67135
          bounds: 60,1285,16,70
        END
        67134_67136:PFCTree.View.Link
          id: 67357
          fromID: 67134
          toID: 67136
          bounds: 205,1285,16,70
        END
        67134_67137:PFCTree.View.Link
          id: 67358
          fromID: 67134
          toID: 67137
          bounds: 350,1285,16,70
        END
        67134_67138:PFCTree.View.Link
          id: 67359
          fromID: 67134
          toID: 67138
          bounds: 495,1285,16,70
        END
        67134_67139:PFCTree.View.Link
          id: 67360
          fromID: 67134
          toID: 67139
          bounds: 640,1285,16,70
        END
        67134_67140:PFCTree.View.Link
          id: 67361
          fromID: 67134
          toID: 67140
          bounds: 785,1285,16,70
        END
        67134_67141:PFCTree.View.Link
          id: 67362
          fromID: 67134
          toID: 67141
          bounds: 930,1285,16,70
        END
        67134_67142:PFCTree.View.Link
          id: 67363
          fromID: 67134
          toID: 67142
          bounds: 1075,1285,16,70
        END
        SerialDivergent67135:PFCTree.View.SerialDivergent
          id: 67135
          idEnd: 67271
          bounds: 2,1355,130,40
        END
        SerialDivergent67136:PFCTree.View.SerialDivergent
          id: 67136
          idEnd: 67272
          bounds: 147,1355,130,40
        END
        SerialDivergent67137:PFCTree.View.SerialDivergent
          id: 67137
          idEnd: 67273
          bounds: 292,1355,130,40
        END
        SerialDivergent67138:PFCTree.View.SerialDivergent
          id: 67138
          idEnd: 67274
          bounds: 437,1355,130,40
        END
        SerialDivergent67139:PFCTree.View.SerialDivergent
          id: 67139
          idEnd: 67275
          bounds: 582,1355,130,40
        END
        SerialDivergent67140:PFCTree.View.SerialDivergent
          id: 67140
          idEnd: 67276
          bounds: 727,1355,130,40
        END
        SerialDivergent67141:PFCTree.View.SerialDivergent
          id: 67141
          idEnd: 67277
          bounds: 872,1355,130,40
        END
        SerialDivergent67142:PFCTree.View.SerialDivergent
          id: 67142
          idEnd: 67278
          bounds: 1017,1355,130,40
        END
        67135_67143:PFCTree.View.Link
          id: 67364
          fromID: 67135
          toID: 67143
          bounds: 60,1395,16,35
        END
        67136_67144:PFCTree.View.Link
          id: 67365
          fromID: 67136
          toID: 67144
          bounds: 205,1395,16,35
        END
        67137_67145:PFCTree.View.Link
          id: 67366
          fromID: 67137
          toID: 67145
          bounds: 350,1395,16,35
        END
        67138_67146:PFCTree.View.Link
          id: 67367
          fromID: 67138
          toID: 67146
          bounds: 495,1395,16,35
        END
        67139_67147:PFCTree.View.Link
          id: 67368
          fromID: 67139
          toID: 67147
          bounds: 640,1395,16,35
        END
        67140_67148:PFCTree.View.Link
          id: 67369
          fromID: 67140
          toID: 67148
          bounds: 785,1395,16,35
        END
        67141_67149:PFCTree.View.Link
          id: 67370
          fromID: 67141
          toID: 67149
          bounds: 930,1395,16,35
        END
        67142_67150:PFCTree.View.Link
          id: 67371
          fromID: 67142
          toID: 67150
          bounds: 1075,1395,16,35
        END
        CHALL1_CONDITIONS_BS:PFCTree.View.Script
          id: 67143
          buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
          arguments:
            iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignalCheck;3;"Any";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignal_Name;19;Chall1ConditionsBs_iSignal_Name;List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
            iSignal_GlobalVariable;19;BUILD_ARRAY_CONSTANT(SIZE(Chall1ConditionsBs_iSignal_Name),NULL);List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
            iSignal_Value;19;Chall1ConditionsBs_iSignal_Value;List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
            iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
          end
          type: 0
          order: 0
          bounds: 2,1430,130,55
          executeAtClientID: No
        END
        CHALL2_CONDITIONS_BS:PFCTree.View.Script
          id: 67144
          buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
          arguments:
            iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignalCheck;3;"Any";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignal_Name;19;Chall2ConditionsBs_iSignal_Name;List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
            iSignal_GlobalVariable;19;BUILD_ARRAY_CONSTANT(SIZE(Chall2ConditionsBs_iSignal_Name),NULL);List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
            iSignal_Value;19;Chall2ConditionsBs_iSignal_Value;List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
            iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
          end
          type: 0
          order: 0
          bounds: 147,1430,130,55
          executeAtClientID: No
        END
        CHALL3_CONDITIONS_BS:PFCTree.View.Script
          id: 67145
          buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
          arguments:
            iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignalCheck;3;"Any";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignal_Name;19;Chall3ConditionsBs_iSignal_Name;List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
            iSignal_GlobalVariable;19;BUILD_ARRAY_CONSTANT(SIZE(Chall3ConditionsBs_iSignal_Name),NULL);List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
            iSignal_Value;19;Chall3ConditionsBs_iSignal_Value;List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
            iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
          end
          type: 0
          order: 0
          bounds: 292,1430,130,55
          executeAtClientID: No
        END
        CHALL4_CONDITIONS_BS:PFCTree.View.Script
          id: 67146
          buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
          arguments:
            iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignalCheck;3;"Any";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignal_Name;19;Chall4ConditionsBs_iSignal_Name;List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
            iSignal_GlobalVariable;19;BUILD_ARRAY_CONSTANT(SIZE(Chall4ConditionsBs_iSignal_Name),NULL);List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
            iSignal_Value;19;Chall4ConditionsBs_iSignal_Value;List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
            iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
          end
          type: 0
          order: 0
          bounds: 437,1430,130,55
          executeAtClientID: No
        END
        CHALL5_CONDITIONS_BS:PFCTree.View.Script
          id: 67147
          buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
          arguments:
            iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignalCheck;3;"Any";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignal_Name;19;Chall5ConditionsBs_iSignal_Name;List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
            iSignal_GlobalVariable;19;BUILD_ARRAY_CONSTANT(SIZE(Chall5ConditionsBs_iSignal_Name),NULL);List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
            iSignal_Value;19;Chall5ConditionsBs_iSignal_Value;List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
            iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
          end
          type: 0
          order: 0
          bounds: 582,1430,130,55
          executeAtClientID: No
        END
        CHALL6_CONDITIONS_BS:PFCTree.View.Script
          id: 67148
          buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
          arguments:
            iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignalCheck;3;"Any";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignal_Name;19;Chall6ConditionsBs_iSignal_Name;List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
            iSignal_GlobalVariable;19;BUILD_ARRAY_CONSTANT(SIZE(Chall6ConditionsBs_iSignal_Name),NULL);List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
            iSignal_Value;19;Chall6ConditionsBs_iSignal_Value;List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
            iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
          end
          type: 0
          order: 0
          bounds: 727,1430,130,55
          executeAtClientID: No
        END
        CHALL7_CONDITIONS_BS:PFCTree.View.Script
          id: 67149
          buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
          arguments:
            iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignalCheck;3;"Any";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignal_Name;19;Chall7ConditionsBs_iSignal_Name;List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
            iSignal_GlobalVariable;19;BUILD_ARRAY_CONSTANT(SIZE(Chall7ConditionsBs_iSignal_Name),NULL);List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
            iSignal_Value;19;Chall7ConditionsBs_iSignal_Value;List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
            iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
          end
          type: 0
          order: 0
          bounds: 872,1430,130,55
          executeAtClientID: No
        END
        CHALL8_CONDITIONS_BS:PFCTree.View.Script
          id: 67150
          buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
          arguments:
            iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignalCheck;3;"Any";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignal_Name;19;Chall8ConditionsBs_iSignal_Name;List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
            iSignal_GlobalVariable;19;BUILD_ARRAY_CONSTANT(SIZE(Chall8ConditionsBs_iSignal_Name),NULL);List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
            iSignal_Value;19;Chall8ConditionsBs_iSignal_Value;List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
            iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
          end
          type: 0
          order: 0
          bounds: 1017,1430,130,55
          executeAtClientID: No
        END
        67143_67151:PFCTree.View.ControlLink
          id: 67372
          fromID: 67143
          toID: 67151
          bounds: 60,1485,16,55
        END
        67144_67165:PFCTree.View.ControlLink
          id: 67373
          fromID: 67144
          toID: 67165
          bounds: 205,1485,16,55
        END
        67145_67179:PFCTree.View.ControlLink
          id: 67374
          fromID: 67145
          toID: 67179
          bounds: 350,1485,16,55
        END
        67146_67193:PFCTree.View.ControlLink
          id: 67375
          fromID: 67146
          toID: 67193
          bounds: 495,1485,16,55
        END
        67147_67207:PFCTree.View.ControlLink
          id: 67376
          fromID: 67147
          toID: 67207
          bounds: 640,1485,16,55
        END
        67148_67221:PFCTree.View.ControlLink
          id: 67377
          fromID: 67148
          toID: 67221
          bounds: 785,1485,16,55
        END
        67149_67235:PFCTree.View.ControlLink
          id: 67378
          fromID: 67149
          toID: 67235
          bounds: 930,1485,16,55
        END
        67150_67249:PFCTree.View.ControlLink
          id: 67379
          fromID: 67150
          toID: 67249
          bounds: 1075,1485,16,55
        END
        CHALLENGE_1_OP:PFCTree.View.Operation
          description: CRITICAL DEVICE CHALLENGES
          id: 67151
          order: 0
          design:
            BeginNode67152:PFCTree.View.BeginNode
              id: 67152
              bounds: 2,16,130,32
            END
            67152_67153:PFCTree.View.ControlLink
              id: 67159
              fromID: 67152
              toID: 67153
              bounds: 60,48,16,62
            END
            CHALLENGE_1_BP:PFCTree.View.Phase
              description: Machine Challenge
              buildingBlockElementID: GENERIC.TABULAR_CHECK
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Challenges performed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{$$ChallengeInstruction <> NULL ? $$ChallengeInstruction : "Error retrieving instruction",$$Eqp1Chall <> NULL ? $$Eqp1Chall : "ERROR",$$Eqp1ChallType <> NULL ? $$Eqp1ChallType : "ERROR"};Instruction List to be implemented by User;;;false;;
                iPassLabel;3;"Pass";Label for Pass Checkbox;;;false;;
                iFailLabel;3;"Fail";Label for Fail Checkbox;;;false;;
                iChecklist;19;Challenge1Bp_iChecklist;List of Checks to be completed;;;false;;
                iAutoAtypEvent;1;YES;Enable/Disable Auto Event on a failed check;;;false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_2
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 67153
              order: 0
              bounds: 2,110,130,83
            END
            67153_67154:PFCTree.View.Link
              id: 67160
              fromID: 67153
              toID: 67154
              bounds: 60,193,16,62
            END
            SerialDivergent67154:PFCTree.View.SerialDivergent
              id: 67154
              idEnd: 67157
              bounds: 2,255,130,40
            END
            67154_67155:PFCTree.View.Link
              id: 67161
              fromID: 67154
              toID: 67155
              bounds: 60,295,16,35
            END
            CHECK_CHALLENGE1_FAIL_BS:PFCTree.View.Script
              id: 67155
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;"OR";Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_1_BP","CHALLENGE_1_BP","CHALLENGE_1_BP","CHALLENGE_1_BP","CHALLENGE_1_BP","CHALLENGE_1_BP","CHALLENGE_1_BP","CHALLENGE_1_BP","CHALLENGE_1_BP","CHALLENGE_1_BP","CHALLENGE_1_BP","CHALLENGE_1_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"TABULAR_CHECK\CHECK_RESULT[1]","TABULAR_CHECK\CHECK_RESULT[2]","TABULAR_CHECK\CHECK_RESULT[3]","TABULAR_CHECK\CHECK_RESULT[4]","TABULAR_CHECK\CHECK_RESULT[5]","TABULAR_CHECK\CHECK_RESULT[6]","TABULAR_CHECK\CHECK_RESULT[7]","TABULAR_CHECK\CHECK_RESULT[8]","TABULAR_CHECK\CHECK_RESULT[9]","TABULAR_CHECK\CHECK_RESULT[10]","TABULAR_CHECK\CHECK_RESULT[11]","TABULAR_CHECK\CHECK_RESULT[12]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{"Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail"};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"=","=","=","=","=","=","=","=","=","=","=","="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 2,330,130,55
              executeAtClientID: No
            END
            67155_67156:PFCTree.View.ControlLink
              id: 67162
              fromID: 67155
              toID: 67156
              bounds: 60,385,16,55
            END
            RE_ENABLE_CHALLENGE1_BS:PFCTree.View.Script
              id: 67156
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"CHALLENGE_1_OP"};Object name;;;false;;
                iObject_Reactivate;17;{YES};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,440,130,55
              executeAtClientID: No
            END
            67156_67157:PFCTree.View.Link
              id: 67163
              fromID: 67156
              toID: 67157
              bounds: 60,495,16,55
            END
            SerialConvergent67157:PFCTree.View.SerialConvergent
              id: 67157
              idEnd: 67154
              bounds: 2,550,130,40
            END
            67157_67158:PFCTree.View.Link
              id: 67164
              fromID: 67157
              toID: 67158
              bounds: 60,590,16,86
            END
            EndNode67158:PFCTree.View.EndNode
              id: 67158
              bounds: 2,676,130,32
            END
          END
          bounds: 2,1540,130,83
        END
        CHALLENGE_2_OP:PFCTree.View.Operation
          description: CRITICAL DEVICE CHALLENGES
          id: 67165
          order: 0
          design:
            BeginNode67166:PFCTree.View.BeginNode
              id: 67166
              bounds: 2,16,130,32
            END
            67166_67167:PFCTree.View.ControlLink
              id: 67173
              fromID: 67166
              toID: 67167
              bounds: 60,48,16,62
            END
            CHALLENGE_2_BP:PFCTree.View.Phase
              description: Machine Challenge
              buildingBlockElementID: GENERIC.TABULAR_CHECK
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Challenges performed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{$$ChallengeInstruction <> NULL ? $$ChallengeInstruction : "Error retrieving instruction",$$Eqp2Chall <> NULL ? $$Eqp2Chall : "ERROR",$$Eqp2ChallType <> NULL ? $$Eqp2ChallType : "ERROR"};Instruction List to be implemented by User;;;false;;
                iPassLabel;3;"Pass";Label for Pass Checkbox;;;false;;
                iFailLabel;3;"Fail";Label for Fail Checkbox;;;false;;
                iChecklist;19;Challenge2Bp_iChecklist;List of Checks to be completed;;;false;;
                iAutoAtypEvent;1;YES;Enable/Disable Auto Event on a failed check;;;false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_2
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 67167
              order: 0
              bounds: 2,110,130,83
            END
            67167_67168:PFCTree.View.Link
              id: 67174
              fromID: 67167
              toID: 67168
              bounds: 60,193,16,62
            END
            SerialDivergent67168:PFCTree.View.SerialDivergent
              id: 67168
              idEnd: 67171
              bounds: 2,255,130,40
            END
            67168_67169:PFCTree.View.Link
              id: 67175
              fromID: 67168
              toID: 67169
              bounds: 60,295,16,35
            END
            CHECK_CHALLENGE2_FAIL_BS:PFCTree.View.Script
              id: 67169
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;"OR";Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_2_BP","CHALLENGE_2_BP","CHALLENGE_2_BP","CHALLENGE_2_BP","CHALLENGE_2_BP","CHALLENGE_2_BP","CHALLENGE_2_BP","CHALLENGE_2_BP","CHALLENGE_2_BP","CHALLENGE_2_BP","CHALLENGE_2_BP","CHALLENGE_2_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"TABULAR_CHECK\CHECK_RESULT[1]","TABULAR_CHECK\CHECK_RESULT[2]","TABULAR_CHECK\CHECK_RESULT[3]","TABULAR_CHECK\CHECK_RESULT[4]","TABULAR_CHECK\CHECK_RESULT[5]","TABULAR_CHECK\CHECK_RESULT[6]","TABULAR_CHECK\CHECK_RESULT[7]","TABULAR_CHECK\CHECK_RESULT[8]","TABULAR_CHECK\CHECK_RESULT[9]","TABULAR_CHECK\CHECK_RESULT[10]","TABULAR_CHECK\CHECK_RESULT[11]","TABULAR_CHECK\CHECK_RESULT[12]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{"Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail"};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"=","=","=","=","=","=","=","=","=","=","=","="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 2,330,130,55
              executeAtClientID: No
            END
            67169_67170:PFCTree.View.ControlLink
              id: 67176
              fromID: 67169
              toID: 67170
              bounds: 60,385,16,55
            END
            RE_ENABLE_CHALLENGE2_BS:PFCTree.View.Script
              id: 67170
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"CHALLENGE_2_OP"};Object name;;;false;;
                iObject_Reactivate;17;{YES};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,440,130,55
              executeAtClientID: No
            END
            67170_67171:PFCTree.View.Link
              id: 67177
              fromID: 67170
              toID: 67171
              bounds: 60,495,16,55
            END
            SerialConvergent67171:PFCTree.View.SerialConvergent
              id: 67171
              idEnd: 67168
              bounds: 2,550,130,40
            END
            67171_67172:PFCTree.View.Link
              id: 67178
              fromID: 67171
              toID: 67172
              bounds: 60,590,16,86
            END
            EndNode67172:PFCTree.View.EndNode
              id: 67172
              bounds: 2,676,130,32
            END
          END
          bounds: 147,1540,130,83
        END
        CHALLENGE_3_OP:PFCTree.View.Operation
          description: CRITICAL DEVICE CHALLENGES
          id: 67179
          order: 0
          design:
            BeginNode67180:PFCTree.View.BeginNode
              id: 67180
              bounds: 2,16,130,32
            END
            67180_67181:PFCTree.View.ControlLink
              id: 67187
              fromID: 67180
              toID: 67181
              bounds: 60,48,16,62
            END
            CHALLENGE_3_BP:PFCTree.View.Phase
              description: Machine Challenge
              buildingBlockElementID: GENERIC.TABULAR_CHECK
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Challenges performed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{$$ChallengeInstruction <> NULL ? $$ChallengeInstruction : "Error retrieving instruction",$$Eqp3Chall <> NULL ? $$Eqp3Chall : "ERROR",$$Eqp3ChallType <> NULL ? $$Eqp3ChallType : "ERROR"};Instruction List to be implemented by User;;;false;;
                iPassLabel;3;"Pass";Label for Pass Checkbox;;;false;;
                iFailLabel;3;"Fail";Label for Fail Checkbox;;;false;;
                iChecklist;19;Challenge3Bp_iChecklist;List of Checks to be completed;;;false;;
                iAutoAtypEvent;1;YES;Enable/Disable Auto Event on a failed check;;;false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_2
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 67181
              order: 0
              bounds: 2,110,130,83
            END
            67181_67182:PFCTree.View.Link
              id: 67188
              fromID: 67181
              toID: 67182
              bounds: 60,193,16,62
            END
            SerialDivergent67182:PFCTree.View.SerialDivergent
              id: 67182
              idEnd: 67185
              bounds: 2,255,130,40
            END
            67182_67183:PFCTree.View.Link
              id: 67189
              fromID: 67182
              toID: 67183
              bounds: 60,295,16,35
            END
            CHECK_CHALLENGE3_FAIL_BS:PFCTree.View.Script
              id: 67183
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;"OR";Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_3_BP","CHALLENGE_3_BP","CHALLENGE_3_BP","CHALLENGE_3_BP","CHALLENGE_3_BP","CHALLENGE_3_BP","CHALLENGE_3_BP","CHALLENGE_3_BP","CHALLENGE_3_BP","CHALLENGE_3_BP","CHALLENGE_3_BP","CHALLENGE_3_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"TABULAR_CHECK\CHECK_RESULT[1]","TABULAR_CHECK\CHECK_RESULT[2]","TABULAR_CHECK\CHECK_RESULT[3]","TABULAR_CHECK\CHECK_RESULT[4]","TABULAR_CHECK\CHECK_RESULT[5]","TABULAR_CHECK\CHECK_RESULT[6]","TABULAR_CHECK\CHECK_RESULT[7]","TABULAR_CHECK\CHECK_RESULT[8]","TABULAR_CHECK\CHECK_RESULT[9]","TABULAR_CHECK\CHECK_RESULT[10]","TABULAR_CHECK\CHECK_RESULT[11]","TABULAR_CHECK\CHECK_RESULT[12]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{"Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail"};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"=","=","=","=","=","=","=","=","=","=","=","="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 2,330,130,55
              executeAtClientID: No
            END
            67183_67184:PFCTree.View.ControlLink
              id: 67190
              fromID: 67183
              toID: 67184
              bounds: 60,385,16,55
            END
            RE_ENABLE_CHALLENGE3_BS:PFCTree.View.Script
              id: 67184
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"CHALLENGE_3_OP"};Object name;;;false;;
                iObject_Reactivate;17;{YES};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,440,130,55
              executeAtClientID: No
            END
            67184_67185:PFCTree.View.Link
              id: 67191
              fromID: 67184
              toID: 67185
              bounds: 60,495,16,55
            END
            SerialConvergent67185:PFCTree.View.SerialConvergent
              id: 67185
              idEnd: 67182
              bounds: 2,550,130,40
            END
            67185_67186:PFCTree.View.Link
              id: 67192
              fromID: 67185
              toID: 67186
              bounds: 60,590,16,86
            END
            EndNode67186:PFCTree.View.EndNode
              id: 67186
              bounds: 2,676,130,32
            END
          END
          bounds: 292,1540,130,83
        END
        CHALLENGE_4_OP:PFCTree.View.Operation
          description: CRITICAL DEVICE CHALLENGES
          id: 67193
          order: 0
          design:
            BeginNode67194:PFCTree.View.BeginNode
              id: 67194
              bounds: 2,16,130,32
            END
            67194_67195:PFCTree.View.ControlLink
              id: 67201
              fromID: 67194
              toID: 67195
              bounds: 60,48,16,62
            END
            CHALLENGE_4_BP:PFCTree.View.Phase
              description: Machine Challenge
              buildingBlockElementID: GENERIC.TABULAR_CHECK
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Challenges performed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{$$ChallengeInstruction <> NULL ? $$ChallengeInstruction : "Error retrieving instruction",$$Eqp4Chall <> NULL ? $$Eqp4Chall : "ERROR",$$Eqp4ChallType <> NULL ? $$Eqp4ChallType : "ERROR"};Instruction List to be implemented by User;;;false;;
                iPassLabel;3;"Pass";Label for Pass Checkbox;;;false;;
                iFailLabel;3;"Fail";Label for Fail Checkbox;;;false;;
                iChecklist;19;Challenge4Bp_iChecklist;List of Checks to be completed;;;false;;
                iAutoAtypEvent;1;YES;Enable/Disable Auto Event on a failed check;;;false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 67195
              order: 0
              bounds: 2,110,130,83
            END
            67195_67196:PFCTree.View.Link
              id: 67202
              fromID: 67195
              toID: 67196
              bounds: 60,193,16,62
            END
            SerialDivergent67196:PFCTree.View.SerialDivergent
              id: 67196
              idEnd: 67199
              bounds: 2,255,130,40
            END
            67196_67197:PFCTree.View.Link
              id: 67203
              fromID: 67196
              toID: 67197
              bounds: 60,295,16,35
            END
            CHECK_CHALLENGE4_FAIL_BS:PFCTree.View.Script
              id: 67197
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;"OR";Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_4_BP","CHALLENGE_4_BP","CHALLENGE_4_BP","CHALLENGE_4_BP","CHALLENGE_4_BP","CHALLENGE_4_BP","CHALLENGE_4_BP","CHALLENGE_4_BP","CHALLENGE_4_BP","CHALLENGE_4_BP","CHALLENGE_4_BP","CHALLENGE_4_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"TABULAR_CHECK\CHECK_RESULT[1]","TABULAR_CHECK\CHECK_RESULT[2]","TABULAR_CHECK\CHECK_RESULT[3]","TABULAR_CHECK\CHECK_RESULT[4]","TABULAR_CHECK\CHECK_RESULT[5]","TABULAR_CHECK\CHECK_RESULT[6]","TABULAR_CHECK\CHECK_RESULT[7]","TABULAR_CHECK\CHECK_RESULT[8]","TABULAR_CHECK\CHECK_RESULT[9]","TABULAR_CHECK\CHECK_RESULT[10]","TABULAR_CHECK\CHECK_RESULT[11]","TABULAR_CHECK\CHECK_RESULT[12]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{"Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail"};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"=","=","=","=","=","=","=","=","=","=","=","="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 2,330,130,55
              executeAtClientID: No
            END
            67197_67198:PFCTree.View.ControlLink
              id: 67204
              fromID: 67197
              toID: 67198
              bounds: 60,385,16,55
            END
            RE_ENABLE_CHALLENGE4_BS:PFCTree.View.Script
              id: 67198
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"CHALLENGE_4_OP"};Object name;;;false;;
                iObject_Reactivate;17;{YES};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,440,130,55
              executeAtClientID: No
            END
            67198_67199:PFCTree.View.Link
              id: 67205
              fromID: 67198
              toID: 67199
              bounds: 60,495,16,55
            END
            SerialConvergent67199:PFCTree.View.SerialConvergent
              id: 67199
              idEnd: 67196
              bounds: 2,550,130,40
            END
            67199_67200:PFCTree.View.Link
              id: 67206
              fromID: 67199
              toID: 67200
              bounds: 60,590,16,86
            END
            EndNode67200:PFCTree.View.EndNode
              id: 67200
              bounds: 2,676,130,32
            END
          END
          bounds: 437,1540,130,83
        END
        CHALLENGE_5_OP:PFCTree.View.Operation
          description: CRITICAL DEVICE CHALLENGES
          id: 67207
          order: 0
          design:
            BeginNode67208:PFCTree.View.BeginNode
              id: 67208
              bounds: 2,16,130,32
            END
            67208_67209:PFCTree.View.ControlLink
              id: 67215
              fromID: 67208
              toID: 67209
              bounds: 60,48,16,62
            END
            CHALLENGE_5_BP:PFCTree.View.Phase
              description: Machine Challenge
              buildingBlockElementID: GENERIC.TABULAR_CHECK
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Challenges performed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{$$ChallengeInstruction <> NULL ? $$ChallengeInstruction : "Error retrieving instruction",$$Eqp5Chall <> NULL ? $$Eqp5Chall : "ERROR",$$Eqp5ChallType <> NULL ? $$Eqp5ChallType : "ERROR"};Instruction List to be implemented by User;;;false;;
                iPassLabel;3;"Pass";Label for Pass Checkbox;;;false;;
                iFailLabel;3;"Fail";Label for Fail Checkbox;;;false;;
                iChecklist;19;Challenge5Bp_iChecklist;List of Checks to be completed;;;false;;
                iAutoAtypEvent;1;YES;Enable/Disable Auto Event on a failed check;;;false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 67209
              order: 0
              bounds: 2,110,130,83
            END
            67209_67210:PFCTree.View.Link
              id: 67216
              fromID: 67209
              toID: 67210
              bounds: 60,193,16,62
            END
            SerialDivergent67210:PFCTree.View.SerialDivergent
              id: 67210
              idEnd: 67213
              bounds: 2,255,130,40
            END
            67210_67211:PFCTree.View.Link
              id: 67217
              fromID: 67210
              toID: 67211
              bounds: 60,295,16,35
            END
            CHECK_CHALLENGE5_FAIL_BS:PFCTree.View.Script
              id: 67211
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;"OR";Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_5_BP","CHALLENGE_5_BP","CHALLENGE_5_BP","CHALLENGE_5_BP","CHALLENGE_5_BP","CHALLENGE_5_BP","CHALLENGE_5_BP","CHALLENGE_5_BP","CHALLENGE_5_BP","CHALLENGE_5_BP","CHALLENGE_5_BP","CHALLENGE_5_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"TABULAR_CHECK\CHECK_RESULT[1]","TABULAR_CHECK\CHECK_RESULT[2]","TABULAR_CHECK\CHECK_RESULT[3]","TABULAR_CHECK\CHECK_RESULT[4]","TABULAR_CHECK\CHECK_RESULT[5]","TABULAR_CHECK\CHECK_RESULT[6]","TABULAR_CHECK\CHECK_RESULT[7]","TABULAR_CHECK\CHECK_RESULT[8]","TABULAR_CHECK\CHECK_RESULT[9]","TABULAR_CHECK\CHECK_RESULT[10]","TABULAR_CHECK\CHECK_RESULT[11]","TABULAR_CHECK\CHECK_RESULT[12]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{"Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail"};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"=","=","=","=","=","=","=","=","=","=","=","="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 2,330,130,55
              executeAtClientID: No
            END
            67211_67212:PFCTree.View.ControlLink
              id: 67218
              fromID: 67211
              toID: 67212
              bounds: 60,385,16,55
            END
            RE_ENABLE_CHALLENGE5_BS:PFCTree.View.Script
              id: 67212
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"CHALLENGE_5_OP"};Object name;;;false;;
                iObject_Reactivate;17;{YES};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,440,130,55
              executeAtClientID: No
            END
            67212_67213:PFCTree.View.Link
              id: 67219
              fromID: 67212
              toID: 67213
              bounds: 60,495,16,55
            END
            SerialConvergent67213:PFCTree.View.SerialConvergent
              id: 67213
              idEnd: 67210
              bounds: 2,550,130,40
            END
            67213_67214:PFCTree.View.Link
              id: 67220
              fromID: 67213
              toID: 67214
              bounds: 60,590,16,86
            END
            EndNode67214:PFCTree.View.EndNode
              id: 67214
              bounds: 2,676,130,32
            END
          END
          bounds: 582,1540,130,83
        END
        CHALLENGE_6_OP:PFCTree.View.Operation
          description: CRITICAL DEVICE CHALLENGES
          id: 67221
          order: 0
          design:
            BeginNode67222:PFCTree.View.BeginNode
              id: 67222
              bounds: 2,16,130,32
            END
            67222_67223:PFCTree.View.ControlLink
              id: 67229
              fromID: 67222
              toID: 67223
              bounds: 60,48,16,62
            END
            CHALLENGE_6_BP:PFCTree.View.Phase
              description: Machine Challenge
              buildingBlockElementID: GENERIC.TABULAR_CHECK
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Challenges performed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{$$ChallengeInstruction <> NULL ? $$ChallengeInstruction : "Error retrieving instruction",$$Eqp6Chall <> NULL ? $$Eqp6Chall : "ERROR",$$Eqp6ChallType <> NULL ? $$Eqp6ChallType : "ERROR"};Instruction List to be implemented by User;;;false;;
                iPassLabel;3;"Pass";Label for Pass Checkbox;;;false;;
                iFailLabel;3;"Fail";Label for Fail Checkbox;;;false;;
                iChecklist;19;Challenge6Bp_iChecklist;List of Checks to be completed;;;false;;
                iAutoAtypEvent;1;YES;Enable/Disable Auto Event on a failed check;;;false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_2
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 67223
              order: 0
              bounds: 2,110,130,83
            END
            67223_67224:PFCTree.View.Link
              id: 67230
              fromID: 67223
              toID: 67224
              bounds: 60,193,16,62
            END
            SerialDivergent67224:PFCTree.View.SerialDivergent
              id: 67224
              idEnd: 67227
              bounds: 2,255,130,40
            END
            67224_67225:PFCTree.View.Link
              id: 67231
              fromID: 67224
              toID: 67225
              bounds: 60,295,16,35
            END
            CHECK_CHALLENGE6_FAIL_BS:PFCTree.View.Script
              id: 67225
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;"OR";Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_6_BP","CHALLENGE_6_BP","CHALLENGE_6_BP","CHALLENGE_6_BP","CHALLENGE_6_BP","CHALLENGE_6_BP","CHALLENGE_6_BP","CHALLENGE_6_BP","CHALLENGE_6_BP","CHALLENGE_6_BP","CHALLENGE_6_BP","CHALLENGE_6_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"TABULAR_CHECK\CHECK_RESULT[1]","TABULAR_CHECK\CHECK_RESULT[2]","TABULAR_CHECK\CHECK_RESULT[3]","TABULAR_CHECK\CHECK_RESULT[4]","TABULAR_CHECK\CHECK_RESULT[5]","TABULAR_CHECK\CHECK_RESULT[6]","TABULAR_CHECK\CHECK_RESULT[7]","TABULAR_CHECK\CHECK_RESULT[8]","TABULAR_CHECK\CHECK_RESULT[9]","TABULAR_CHECK\CHECK_RESULT[10]","TABULAR_CHECK\CHECK_RESULT[11]","TABULAR_CHECK\CHECK_RESULT[12]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{"Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail"};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"=","=","=","=","=","=","=","=","=","=","=","="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 2,330,130,55
              executeAtClientID: No
            END
            67225_67226:PFCTree.View.ControlLink
              id: 67232
              fromID: 67225
              toID: 67226
              bounds: 60,385,16,55
            END
            RE_ENABLE_CHALLENGE6_BS:PFCTree.View.Script
              id: 67226
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"CHALLENGE_6_OP"};Object name;;;false;;
                iObject_Reactivate;17;{YES};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,440,130,55
              executeAtClientID: No
            END
            67226_67227:PFCTree.View.Link
              id: 67233
              fromID: 67226
              toID: 67227
              bounds: 60,495,16,55
            END
            SerialConvergent67227:PFCTree.View.SerialConvergent
              id: 67227
              idEnd: 67224
              bounds: 2,550,130,40
            END
            67227_67228:PFCTree.View.Link
              id: 67234
              fromID: 67227
              toID: 67228
              bounds: 60,590,16,86
            END
            EndNode67228:PFCTree.View.EndNode
              id: 67228
              bounds: 2,676,130,32
            END
          END
          bounds: 727,1540,130,83
        END
        CHALLENGE_7_OP:PFCTree.View.Operation
          description: CRITICAL DEVICE CHALLENGES
          id: 67235
          order: 0
          design:
            BeginNode67236:PFCTree.View.BeginNode
              id: 67236
              bounds: 2,16,130,32
            END
            67236_67237:PFCTree.View.ControlLink
              id: 67243
              fromID: 67236
              toID: 67237
              bounds: 60,48,16,62
            END
            CHALLENGE_7_BP:PFCTree.View.Phase
              description: Machine Challenge
              buildingBlockElementID: GENERIC.TABULAR_CHECK
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Challenges performed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{$$ChallengeInstruction <> NULL ? $$ChallengeInstruction : "Error retrieving instruction",$$Eqp7Chall <> NULL ? $$Eqp7Chall : "ERROR",$$Eqp7ChallType <> NULL ? $$Eqp7ChallType : "ERROR"};Instruction List to be implemented by User;;;false;;
                iPassLabel;3;"Pass";Label for Pass Checkbox;;;false;;
                iFailLabel;3;"Fail";Label for Fail Checkbox;;;false;;
                iChecklist;19;Challenge7Bp_iChecklist;List of Checks to be completed;;;false;;
                iAutoAtypEvent;1;YES;Enable/Disable Auto Event on a failed check;;;false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_2
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 67237
              order: 0
              bounds: 2,110,130,83
            END
            67237_67238:PFCTree.View.Link
              id: 67244
              fromID: 67237
              toID: 67238
              bounds: 60,193,16,62
            END
            SerialDivergent67238:PFCTree.View.SerialDivergent
              id: 67238
              idEnd: 67241
              bounds: 2,255,130,40
            END
            67238_67239:PFCTree.View.Link
              id: 67245
              fromID: 67238
              toID: 67239
              bounds: 60,295,16,35
            END
            CHECK_CHALLENGE7_FAIL_BS:PFCTree.View.Script
              id: 67239
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;"OR";Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_7_BP","CHALLENGE_7_BP","CHALLENGE_7_BP","CHALLENGE_7_BP","CHALLENGE_7_BP","CHALLENGE_7_BP","CHALLENGE_7_BP","CHALLENGE_7_BP","CHALLENGE_7_BP","CHALLENGE_7_BP","CHALLENGE_7_BP","CHALLENGE_7_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"TABULAR_CHECK\CHECK_RESULT[1]","TABULAR_CHECK\CHECK_RESULT[2]","TABULAR_CHECK\CHECK_RESULT[3]","TABULAR_CHECK\CHECK_RESULT[4]","TABULAR_CHECK\CHECK_RESULT[5]","TABULAR_CHECK\CHECK_RESULT[6]","TABULAR_CHECK\CHECK_RESULT[7]","TABULAR_CHECK\CHECK_RESULT[8]","TABULAR_CHECK\CHECK_RESULT[9]","TABULAR_CHECK\CHECK_RESULT[10]","TABULAR_CHECK\CHECK_RESULT[11]","TABULAR_CHECK\CHECK_RESULT[12]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{"Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail"};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"=","=","=","=","=","=","=","=","=","=","=","="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 2,330,130,55
              executeAtClientID: No
            END
            67239_67240:PFCTree.View.ControlLink
              id: 67246
              fromID: 67239
              toID: 67240
              bounds: 60,385,16,55
            END
            RE_ENABLE_CHALLENGE7_BS:PFCTree.View.Script
              id: 67240
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"CHALLENGE_7_OP"};Object name;;;false;;
                iObject_Reactivate;17;{YES};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,440,130,55
              executeAtClientID: No
            END
            67240_67241:PFCTree.View.Link
              id: 67247
              fromID: 67240
              toID: 67241
              bounds: 60,495,16,55
            END
            SerialConvergent67241:PFCTree.View.SerialConvergent
              id: 67241
              idEnd: 67238
              bounds: 2,550,130,40
            END
            67241_67242:PFCTree.View.Link
              id: 67248
              fromID: 67241
              toID: 67242
              bounds: 60,590,16,86
            END
            EndNode67242:PFCTree.View.EndNode
              id: 67242
              bounds: 2,676,130,32
            END
          END
          bounds: 872,1540,130,83
        END
        CHALLENGE_8_OP:PFCTree.View.Operation
          description: CRITICAL DEVICE CHALLENGES
          id: 67249
          order: 0
          design:
            BeginNode67250:PFCTree.View.BeginNode
              id: 67250
              bounds: 2,16,130,32
            END
            67250_67251:PFCTree.View.ControlLink
              id: 67257
              fromID: 67250
              toID: 67251
              bounds: 60,48,16,62
            END
            CHALLENGE_8_BP:PFCTree.View.Phase
              description: Machine Challenge
              buildingBlockElementID: GENERIC.TABULAR_CHECK
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Challenges performed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{$$ChallengeInstruction <> NULL ? $$ChallengeInstruction : "Error retrieving instruction",$$Eqp8Chall <> NULL ? $$Eqp8Chall : "ERROR",$$Eqp8ChallType <> NULL ? $$Eqp8ChallType : "ERROR"};Instruction List to be implemented by User;;;false;;
                iPassLabel;3;"Pass";Label for Pass Checkbox;;;false;;
                iFailLabel;3;"Fail";Label for Fail Checkbox;;;false;;
                iChecklist;19;Challenge8Bp_iChecklist;List of Checks to be completed;;;false;;
                iAutoAtypEvent;1;YES;Enable/Disable Auto Event on a failed check;;;false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_2
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 67251
              order: 0
              bounds: 2,110,130,83
            END
            67251_67252:PFCTree.View.Link
              id: 67258
              fromID: 67251
              toID: 67252
              bounds: 60,193,16,62
            END
            SerialDivergent67252:PFCTree.View.SerialDivergent
              id: 67252
              idEnd: 67255
              bounds: 2,255,130,40
            END
            67252_67253:PFCTree.View.Link
              id: 67259
              fromID: 67252
              toID: 67253
              bounds: 60,295,16,35
            END
            CHECK_CHALLENGE8_FAIL_BS:PFCTree.View.Script
              id: 67253
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;"OR";Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_8_BP","CHALLENGE_8_BP","CHALLENGE_8_BP","CHALLENGE_8_BP","CHALLENGE_8_BP","CHALLENGE_8_BP","CHALLENGE_8_BP","CHALLENGE_8_BP","CHALLENGE_8_BP","CHALLENGE_8_BP","CHALLENGE_8_BP","CHALLENGE_8_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"TABULAR_CHECK\CHECK_RESULT[1]","TABULAR_CHECK\CHECK_RESULT[2]","TABULAR_CHECK\CHECK_RESULT[3]","TABULAR_CHECK\CHECK_RESULT[4]","TABULAR_CHECK\CHECK_RESULT[5]","TABULAR_CHECK\CHECK_RESULT[6]","TABULAR_CHECK\CHECK_RESULT[7]","TABULAR_CHECK\CHECK_RESULT[8]","TABULAR_CHECK\CHECK_RESULT[9]","TABULAR_CHECK\CHECK_RESULT[10]","TABULAR_CHECK\CHECK_RESULT[11]","TABULAR_CHECK\CHECK_RESULT[12]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{"Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail","Fail"};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"=","=","=","=","=","=","=","=","=","=","=","="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 2,330,130,55
              executeAtClientID: No
            END
            67253_67254:PFCTree.View.ControlLink
              id: 67260
              fromID: 67253
              toID: 67254
              bounds: 60,385,16,55
            END
            RE_ENABLE_CHALLENGE8_BS:PFCTree.View.Script
              id: 67254
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"CHALLENGE_8_OP"};Object name;;;false;;
                iObject_Reactivate;17;{YES};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,440,130,55
              executeAtClientID: No
            END
            67254_67255:PFCTree.View.Link
              id: 67261
              fromID: 67254
              toID: 67255
              bounds: 60,495,16,55
            END
            SerialConvergent67255:PFCTree.View.SerialConvergent
              id: 67255
              idEnd: 67252
              bounds: 2,550,130,40
            END
            67255_67256:PFCTree.View.Link
              id: 67262
              fromID: 67255
              toID: 67256
              bounds: 60,590,16,86
            END
            EndNode67256:PFCTree.View.EndNode
              id: 67256
              bounds: 2,676,130,32
            END
          END
          bounds: 1017,1540,130,83
        END
        67151_67263:PFCTree.View.ControlLink
          id: 67380
          fromID: 67151
          toID: 67263
          bounds: 60,1623,16,27
        END
        67165_67264:PFCTree.View.ControlLink
          id: 67381
          fromID: 67165
          toID: 67264
          bounds: 205,1623,16,27
        END
        67179_67265:PFCTree.View.ControlLink
          id: 67382
          fromID: 67179
          toID: 67265
          bounds: 350,1623,16,27
        END
        67193_67266:PFCTree.View.ControlLink
          id: 67383
          fromID: 67193
          toID: 67266
          bounds: 495,1623,16,27
        END
        67207_67267:PFCTree.View.ControlLink
          id: 67384
          fromID: 67207
          toID: 67267
          bounds: 640,1623,16,27
        END
        67221_67268:PFCTree.View.ControlLink
          id: 67385
          fromID: 67221
          toID: 67268
          bounds: 785,1623,16,27
        END
        67235_67269:PFCTree.View.ControlLink
          id: 67386
          fromID: 67235
          toID: 67269
          bounds: 930,1623,16,27
        END
        67249_67270:PFCTree.View.ControlLink
          id: 67387
          fromID: 67249
          toID: 67270
          bounds: 1075,1623,16,27
        END
        REACTIVATE_CHALLENGE1_BS:PFCTree.View.Script
          id: 67263
          buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
          arguments:
            iReactivateByDefault;1;NO;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
          end
          type: 2
          order: 0
          bounds: 2,1650,130,55
          step: 67151
          executeAtClientID: No
        END
        REACTIVATE_CHALLENGE2_BS:PFCTree.View.Script
          id: 67264
          buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
          arguments:
            iReactivateByDefault;1;NO;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
          end
          type: 2
          order: 0
          bounds: 147,1650,130,55
          step: 67165
          executeAtClientID: No
        END
        REACTIVATE_CHALLENGE3_BS:PFCTree.View.Script
          id: 67265
          buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
          arguments:
            iReactivateByDefault;1;NO;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
          end
          type: 2
          order: 0
          bounds: 292,1650,130,55
          step: 67179
          executeAtClientID: No
        END
        REACTIVATE_CHALLENGE4_BS:PFCTree.View.Script
          id: 67266
          buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
          arguments:
            iReactivateByDefault;1;NO;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
          end
          type: 2
          order: 0
          bounds: 437,1650,130,55
          step: 67193
          executeAtClientID: No
        END
        REACTIVATE_CHALLENGE5_BS:PFCTree.View.Script
          id: 67267
          buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
          arguments:
            iReactivateByDefault;1;NO;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
          end
          type: 2
          order: 0
          bounds: 582,1650,130,55
          step: 67207
          executeAtClientID: No
        END
        REACTIVATE_CHALLENGE6_BS:PFCTree.View.Script
          id: 67268
          buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
          arguments:
            iReactivateByDefault;1;NO;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
          end
          type: 2
          order: 0
          bounds: 727,1650,130,55
          step: 67221
          executeAtClientID: No
        END
        REACTIVATE_CHALLENGE7_BS:PFCTree.View.Script
          id: 67269
          buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
          arguments:
            iReactivateByDefault;1;NO;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
          end
          type: 2
          order: 0
          bounds: 872,1650,130,55
          step: 67235
          executeAtClientID: No
        END
        REACTIVATE_CHALLENGE8_BS:PFCTree.View.Script
          id: 67270
          buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
          arguments:
            iReactivateByDefault;1;NO;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
          end
          type: 2
          order: 0
          bounds: 1017,1650,130,55
          step: 67249
          executeAtClientID: No
        END
        67263_67271:PFCTree.View.Link
          id: 67388
          fromID: 67263
          toID: 67271
          bounds: 60,1705,16,55
        END
        67264_67272:PFCTree.View.Link
          id: 67389
          fromID: 67264
          toID: 67272
          bounds: 205,1705,16,55
        END
        67265_67273:PFCTree.View.Link
          id: 67390
          fromID: 67265
          toID: 67273
          bounds: 350,1705,16,55
        END
        67266_67274:PFCTree.View.Link
          id: 67391
          fromID: 67266
          toID: 67274
          bounds: 495,1705,16,55
        END
        67267_67275:PFCTree.View.Link
          id: 67392
          fromID: 67267
          toID: 67275
          bounds: 640,1705,16,55
        END
        67268_67276:PFCTree.View.Link
          id: 67393
          fromID: 67268
          toID: 67276
          bounds: 785,1705,16,55
        END
        67269_67277:PFCTree.View.Link
          id: 67394
          fromID: 67269
          toID: 67277
          bounds: 930,1705,16,55
        END
        67270_67278:PFCTree.View.Link
          id: 67395
          fromID: 67270
          toID: 67278
          bounds: 1075,1705,16,55
        END
        SerialConvergent67271:PFCTree.View.SerialConvergent
          id: 67271
          idEnd: 67135
          bounds: 2,1760,130,40
        END
        SerialConvergent67272:PFCTree.View.SerialConvergent
          id: 67272
          idEnd: 67136
          bounds: 147,1760,130,40
        END
        SerialConvergent67273:PFCTree.View.SerialConvergent
          id: 67273
          idEnd: 67137
          bounds: 292,1760,130,40
        END
        SerialConvergent67274:PFCTree.View.SerialConvergent
          id: 67274
          idEnd: 67138
          bounds: 437,1760,130,40
        END
        SerialConvergent67275:PFCTree.View.SerialConvergent
          id: 67275
          idEnd: 67139
          bounds: 582,1760,130,40
        END
        SerialConvergent67276:PFCTree.View.SerialConvergent
          id: 67276
          idEnd: 67140
          bounds: 727,1760,130,40
        END
        SerialConvergent67277:PFCTree.View.SerialConvergent
          id: 67277
          idEnd: 67141
          bounds: 872,1760,130,40
        END
        SerialConvergent67278:PFCTree.View.SerialConvergent
          id: 67278
          idEnd: 67142
          bounds: 1017,1760,130,40
        END
        67271_67279:PFCTree.View.Link
          id: 67396
          fromID: 67271
          toID: 67279
          bounds: 60,1800,16,70
        END
        67272_67279:PFCTree.View.Link
          id: 67397
          fromID: 67272
          toID: 67279
          bounds: 205,1800,16,70
        END
        67273_67279:PFCTree.View.Link
          id: 67398
          fromID: 67273
          toID: 67279
          bounds: 350,1800,16,70
        END
        67274_67279:PFCTree.View.Link
          id: 67399
          fromID: 67274
          toID: 67279
          bounds: 495,1800,16,70
        END
        67275_67279:PFCTree.View.Link
          id: 67400
          fromID: 67275
          toID: 67279
          bounds: 640,1800,16,70
        END
        67276_67279:PFCTree.View.Link
          id: 67401
          fromID: 67276
          toID: 67279
          bounds: 785,1800,16,70
        END
        67277_67279:PFCTree.View.Link
          id: 67402
          fromID: 67277
          toID: 67279
          bounds: 930,1800,16,70
        END
        67278_67279:PFCTree.View.Link
          id: 67403
          fromID: 67278
          toID: 67279
          bounds: 1075,1800,16,70
        END
        ParallelConvergent67279:PFCTree.View.ParallelConvergent
          id: 67279
          idEnd: 67134
          bounds: 2,1870,1145,40
        END
        67279_67280:PFCTree.View.Link
          id: 67404
          fromID: 67279
          toID: 67280
          bounds: 567,1910,16,105
        END
        SerialDivergent67280:PFCTree.View.SerialDivergent
          id: 67280
          idEnd: 67329
          bounds: 2,2015,1145,40
        END
        67280_67281:PFCTree.View.Link
          id: 67405
          fromID: 67280
          toID: 67281
          bounds: 132,2055,16,35
        END
        67280_67282:PFCTree.View.Link
          id: 67406
          fromID: 67280
          toID: 67282
          bounds: 712,2055,16,70
        END
        CHK_EOB_CHALL_1_BS:PFCTree.View.Script
          id: 67281
          buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
          arguments:
            iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
            iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
            iSignal_Value;19;{"EOB"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
            iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
          end
          type: 0
          order: 0
          bounds: 74,2090,130,55
          executeAtClientID: No
        END
        SerialDivergent67282:PFCTree.View.SerialDivergent
          id: 67282
          idEnd: 67313
          bounds: 292,2125,855,40
        END
        67281_67283:PFCTree.View.Link
          id: 67407
          fromID: 67281
          toID: 67283
          bounds: 132,2145,16,90
        END
        67282_67284:PFCTree.View.Link
          id: 67408
          fromID: 67282
          toID: 67284
          bounds: 422,2165,16,35
        END
        67282_67285:PFCTree.View.Link
          id: 67409
          fromID: 67282
          toID: 67285
          bounds: 712,2165,16,35
        END
        67282_67286:PFCTree.View.Link
          id: 67410
          fromID: 67282
          toID: 67286
          bounds: 1002,2165,16,35
        END
        CHK_CHALL1_1_BS:PFCTree.View.Script
          id: 67284
          buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
          arguments:
            iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
            iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
            iSignal_Value;19;{"SOB"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
            iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
          end
          type: 0
          order: 0
          bounds: 364,2200,130,55
          executeAtClientID: No
        END
        CHK_CHALL1_2_BS:PFCTree.View.Script
          id: 67285
          buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
          arguments:
            iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
            iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
            iSignal_Value;19;{"StartShift"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
            iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
          end
          type: 0
          order: 1
          bounds: 654,2200,130,55
          executeAtClientID: No
        END
        CHK_CHALL1_3_BS:PFCTree.View.Script
          id: 67286
          buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
          arguments:
            iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignalCheck;3;"Any";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignal_Name;19;{"Challenge1","Challenge1","Challenge1","Challenge1","Challenge1","Challenge1","Challenge1","Challenge1","Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
            iSignal_GlobalVariable;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
            iSignal_Value;19;{"AdhocAll","Adhoc1","Adhoc2","Adhoc3","Adhoc4","Adhoc5","Adhoc6","Adhoc7","Adhoc8"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
            iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
          end
          type: 0
          order: 2
          bounds: 944,2200,130,55
          executeAtClientID: No
        END
        SerialDivergent67283:PFCTree.View.SerialDivergent
          id: 67283
          idEnd: 67303
          bounds: 2,2235,275,40
        END
        67284_67289:PFCTree.View.Link
          id: 67413
          fromID: 67284
          toID: 67289
          bounds: 422,2255,16,90
        END
        67285_67290:PFCTree.View.Link
          id: 67414
          fromID: 67285
          toID: 67290
          bounds: 712,2255,16,90
        END
        67286_67291:PFCTree.View.Link
          id: 67415
          fromID: 67286
          toID: 67291
          bounds: 1002,2255,16,90
        END
        67283_67287:PFCTree.View.Link
          id: 67411
          fromID: 67283
          toID: 67287
          bounds: 60,2275,16,35
        END
        67283_67288:PFCTree.View.Link
          id: 67412
          fromID: 67283
          toID: 67288
          bounds: 205,2275,16,70
        END
        S_DISABLE_HOLD_FOUR_BS:PFCTree.View.Script
          id: 67287
          buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
          arguments:
            iObject_Name;19;{"HOLD_CHALL_FOUR_BP"};Object name;;;false;;
            iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
          end
          type: 0
          order: 0
          bounds: 2,2310,130,55
          executeAtClientID: No
        END
        ParallelDivergent67288:PFCTree.View.ParallelDivergent
          id: 67288
          idEnd: 67299
          bounds: 147,2345,130,40
        END
        SerialDivergent67289:PFCTree.View.SerialDivergent
          id: 67289
          idEnd: 67308
          bounds: 292,2345,275,40
        END
        SerialDivergent67290:PFCTree.View.SerialDivergent
          id: 67290
          idEnd: 67309
          bounds: 582,2345,275,40
        END
        SerialDivergent67291:PFCTree.View.SerialDivergent
          id: 67291
          idEnd: 67310
          bounds: 872,2345,275,40
        END
        67287_67303:PFCTree.View.Link
          id: 67416
          fromID: 67287
          toID: 67303
          bounds: 60,2365,16,275
        END
        67288_67292:PFCTree.View.Link
          id: 67417
          fromID: 67288
          toID: 67292
          bounds: 205,2385,16,35
        END
        67289_67293:PFCTree.View.Link
          id: 67418
          fromID: 67289
          toID: 67293
          bounds: 350,2385,16,35
        END
        67289_67294:PFCTree.View.Link
          id: 67419
          fromID: 67289
          toID: 67294
          bounds: 495,2385,16,70
        END
        67290_67295:PFCTree.View.Link
          id: 67420
          fromID: 67290
          toID: 67295
          bounds: 640,2385,16,35
        END
        67290_67296:PFCTree.View.Link
          id: 67421
          fromID: 67290
          toID: 67296
          bounds: 785,2385,16,70
        END
        67291_67297:PFCTree.View.Link
          id: 67422
          fromID: 67291
          toID: 67297
          bounds: 930,2385,16,35
        END
        67291_67298:PFCTree.View.Link
          id: 67423
          fromID: 67291
          toID: 67298
          bounds: 1075,2385,16,70
        END
        P_DISABLE_HOLD_FOUR_BS:PFCTree.View.Script
          id: 67292
          buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
          arguments:
            iObject_Name;19;{"HOLD_CHALL_FOUR_BP"};Object name;;;false;;
            iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
          end
          type: 0
          order: 0
          bounds: 147,2420,130,55
          executeAtClientID: No
        END
        S_DISABLE_HOLD_ONE_BS:PFCTree.View.Script
          id: 67293
          buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
          arguments:
            iObject_Name;19;{"HOLD_CHALL_ONE_BP"};Object name;;;false;;
            iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
          end
          type: 0
          order: 0
          bounds: 292,2420,130,55
          executeAtClientID: No
        END
        S_DISABLE_HOLD_TWO_BS:PFCTree.View.Script
          id: 67295
          buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
          arguments:
            iObject_Name;19;{"HOLD_CHALL_TWO_BP"};Object name;;;false;;
            iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
          end
          type: 0
          order: 0
          bounds: 582,2420,130,55
          executeAtClientID: No
        END
        S_DISABLE_HOLD_THREE_BS:PFCTree.View.Script
          id: 67297
          buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
          arguments:
            iObject_Name;19;{"HOLD_CHALL_THREE_BP"};Object name;;;false;;
            iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
          end
          type: 0
          order: 0
          bounds: 872,2420,130,55
          executeAtClientID: No
        END
        ParallelDivergent67294:PFCTree.View.ParallelDivergent
          id: 67294
          idEnd: 67304
          bounds: 437,2455,130,40
        END
        ParallelDivergent67296:PFCTree.View.ParallelDivergent
          id: 67296
          idEnd: 67305
          bounds: 727,2455,130,40
        END
        ParallelDivergent67298:PFCTree.View.ParallelDivergent
          id: 67298
          idEnd: 67306
          bounds: 1017,2455,130,40
        END
        67292_67299:PFCTree.View.Link
          id: 67424
          fromID: 67292
          toID: 67299
          bounds: 205,2475,16,55
        END
        67293_67308:PFCTree.View.Link
          id: 67425
          fromID: 67293
          toID: 67308
          bounds: 350,2475,16,275
        END
        67295_67309:PFCTree.View.Link
          id: 67427
          fromID: 67295
          toID: 67309
          bounds: 640,2475,16,275
        END
        67297_67310:PFCTree.View.Link
          id: 67429
          fromID: 67297
          toID: 67310
          bounds: 930,2475,16,275
        END
        67294_67300:PFCTree.View.Link
          id: 67426
          fromID: 67294
          toID: 67300
          bounds: 495,2495,16,35
        END
        67296_67301:PFCTree.View.Link
          id: 67428
          fromID: 67296
          toID: 67301
          bounds: 785,2495,16,35
        END
        67298_67302:PFCTree.View.Link
          id: 67430
          fromID: 67298
          toID: 67302
          bounds: 1075,2495,16,35
        END
        ParallelConvergent67299:PFCTree.View.ParallelConvergent
          id: 67299
          idEnd: 67288
          bounds: 147,2530,130,40
        END
        P_DISABLE_HOLD_ONE_BS:PFCTree.View.Script
          id: 67300
          buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
          arguments:
            iObject_Name;19;{"HOLD_CHALL_ONE_BP"};Object name;;;false;;
            iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
          end
          type: 0
          order: 0
          bounds: 437,2530,130,55
          executeAtClientID: No
        END
        P_DISABLE_HOLD_TWO_BS:PFCTree.View.Script
          id: 67301
          buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
          arguments:
            iObject_Name;19;{"HOLD_CHALL_TWO_BP"};Object name;;;false;;
            iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
          end
          type: 0
          order: 0
          bounds: 727,2530,130,55
          executeAtClientID: No
        END
        P_DISABLE_HOLD_THREE_BS:PFCTree.View.Script
          id: 67302
          buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
          arguments:
            iObject_Name;19;{"HOLD_CHALL_THREE_BP"};Object name;;;false;;
            iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
          end
          type: 0
          order: 0
          bounds: 1017,2530,130,55
          executeAtClientID: No
        END
        67299_67303:PFCTree.View.Link
          id: 67431
          fromID: 67299
          toID: 67303
          bounds: 205,2570,16,70
        END
        67300_67304:PFCTree.View.Link
          id: 67432
          fromID: 67300
          toID: 67304
          bounds: 495,2585,16,55
        END
        67301_67305:PFCTree.View.Link
          id: 67433
          fromID: 67301
          toID: 67305
          bounds: 785,2585,16,55
        END
        67302_67306:PFCTree.View.Link
          id: 67434
          fromID: 67302
          toID: 67306
          bounds: 1075,2585,16,55
        END
        SerialConvergent67303:PFCTree.View.SerialConvergent
          id: 67303
          idEnd: 67283
          bounds: 2,2640,275,40
        END
        ParallelConvergent67304:PFCTree.View.ParallelConvergent
          id: 67304
          idEnd: 67294
          bounds: 437,2640,130,40
        END
        ParallelConvergent67305:PFCTree.View.ParallelConvergent
          id: 67305
          idEnd: 67296
          bounds: 727,2640,130,40
        END
        ParallelConvergent67306:PFCTree.View.ParallelConvergent
          id: 67306
          idEnd: 67298
          bounds: 1017,2640,130,40
        END
        67303_67307:PFCTree.View.Link
          id: 67435
          fromID: 67303
          toID: 67307
          bounds: 132,2680,16,105
        END
        67304_67308:PFCTree.View.Link
          id: 67436
          fromID: 67304
          toID: 67308
          bounds: 495,2680,16,70
        END
        67305_67309:PFCTree.View.Link
          id: 67437
          fromID: 67305
          toID: 67309
          bounds: 785,2680,16,70
        END
        67306_67310:PFCTree.View.Link
          id: 67438
          fromID: 67306
          toID: 67310
          bounds: 1075,2680,16,70
        END
        SerialConvergent67308:PFCTree.View.SerialConvergent
          id: 67308
          idEnd: 67289
          bounds: 292,2750,275,40
        END
        SerialConvergent67309:PFCTree.View.SerialConvergent
          id: 67309
          idEnd: 67290
          bounds: 582,2750,275,40
        END
        SerialConvergent67310:PFCTree.View.SerialConvergent
          id: 67310
          idEnd: 67291
          bounds: 872,2750,275,40
        END
        SerialDivergent67307:PFCTree.View.SerialDivergent
          id: 67307
          idEnd: 67319
          bounds: 2,2785,275,40
        END
        67308_67313:PFCTree.View.Link
          id: 67441
          fromID: 67308
          toID: 67313
          bounds: 422,2790,16,70
        END
        67309_67313:PFCTree.View.Link
          id: 67442
          fromID: 67309
          toID: 67313
          bounds: 712,2790,16,70
        END
        67310_67313:PFCTree.View.Link
          id: 67443
          fromID: 67310
          toID: 67313
          bounds: 1002,2790,16,70
        END
        67307_67311:PFCTree.View.Link
          id: 67439
          fromID: 67307
          toID: 67311
          bounds: 60,2825,16,35
        END
        67307_67312:PFCTree.View.Link
          id: 67440
          fromID: 67307
          toID: 67312
          bounds: 205,2825,16,70
        END
        S_EOB_CHALL_COMPLETE_BS:PFCTree.View.Script
          id: 67311
          buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
          arguments:
            iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
            iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
            iSignal_Value;19;{"Disable"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
          end
          type: 0
          order: 0
          bounds: 2,2860,130,55
          executeAtClientID: No
        END
        SerialConvergent67313:PFCTree.View.SerialConvergent
          id: 67313
          idEnd: 67282
          bounds: 292,2860,855,40
        END
        ParallelDivergent67312:PFCTree.View.ParallelDivergent
          id: 67312
          idEnd: 67316
          bounds: 147,2895,130,40
        END
        67313_67315:PFCTree.View.Link
          id: 67446
          fromID: 67313
          toID: 67315
          bounds: 712,2900,16,105
        END
        67311_67319:PFCTree.View.Link
          id: 67444
          fromID: 67311
          toID: 67319
          bounds: 60,2915,16,275
        END
        67312_67314:PFCTree.View.Link
          id: 67445
          fromID: 67312
          toID: 67314
          bounds: 205,2935,16,35
        END
        P_EOB_CHALL_COMPLETE_BS:PFCTree.View.Script
          id: 67314
          buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
          arguments:
            iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
            iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
            iSignal_Value;19;{"Disable"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
          end
          type: 0
          order: 0
          bounds: 147,2970,130,55
          executeAtClientID: No
        END
        SerialDivergent67315:PFCTree.View.SerialDivergent
          id: 67315
          idEnd: 67325
          bounds: 582,3005,275,40
        END
        67314_67316:PFCTree.View.Link
          id: 67447
          fromID: 67314
          toID: 67316
          bounds: 205,3025,16,55
        END
        67315_67317:PFCTree.View.Link
          id: 67448
          fromID: 67315
          toID: 67317
          bounds: 640,3045,16,35
        END
        67315_67318:PFCTree.View.Link
          id: 67449
          fromID: 67315
          toID: 67318
          bounds: 785,3045,16,70
        END
        ParallelConvergent67316:PFCTree.View.ParallelConvergent
          id: 67316
          idEnd: 67312
          bounds: 147,3080,130,40
        END
        S_RESET_SIGNALS_BS:PFCTree.View.Script
          id: 67317
          buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
          arguments:
            iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
            iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
            iSignal_Value;19;{"Hold"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
          end
          type: 0
          order: 0
          bounds: 582,3080,130,55
          executeAtClientID: No
        END
        ParallelDivergent67318:PFCTree.View.ParallelDivergent
          id: 67318
          idEnd: 67322
          bounds: 727,3115,130,40
        END
        67316_67319:PFCTree.View.Link
          id: 67450
          fromID: 67316
          toID: 67319
          bounds: 205,3120,16,70
        END
        67317_67325:PFCTree.View.Link
          id: 67451
          fromID: 67317
          toID: 67325
          bounds: 640,3135,16,275
        END
        67318_67320:PFCTree.View.Link
          id: 67452
          fromID: 67318
          toID: 67320
          bounds: 785,3155,16,35
        END
        SerialConvergent67319:PFCTree.View.SerialConvergent
          id: 67319
          idEnd: 67307
          bounds: 2,3190,275,40
        END
        P_RESET_SIGNALS_BS:PFCTree.View.Script
          id: 67320
          buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
          arguments:
            iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
            iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
            iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
            iSignal_Value;19;{"Hold"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
          end
          type: 0
          order: 0
          bounds: 727,3190,130,55
          executeAtClientID: No
        END
        67319_67321:PFCTree.View.Link
          id: 67453
          fromID: 67319
          toID: 67321
          bounds: 132,3230,16,105
        END
        67320_67322:PFCTree.View.Link
          id: 67454
          fromID: 67320
          toID: 67322
          bounds: 785,3245,16,55
        END
        ParallelConvergent67322:PFCTree.View.ParallelConvergent
          id: 67322
          idEnd: 67318
          bounds: 727,3300,130,40
        END
        SerialDivergent67321:PFCTree.View.SerialDivergent
          id: 67321
          idEnd: 67328
          bounds: 2,3335,275,40
        END
        67322_67325:PFCTree.View.Link
          id: 67457
          fromID: 67322
          toID: 67325
          bounds: 785,3340,16,70
        END
        67321_67323:PFCTree.View.Link
          id: 67455
          fromID: 67321
          toID: 67323
          bounds: 60,3375,16,35
        END
        67321_67324:PFCTree.View.Link
          id: 67456
          fromID: 67321
          toID: 67324
          bounds: 205,3375,16,70
        END
        S_DISABLE_CHALL_BS:PFCTree.View.Script
          id: 67323
          buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
          arguments:
            iSet_VarName;19;{"L3"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
            iSet_VarValue;16;{No};Value to set to the global variable;;;true;;
            iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
            iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
            iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
            iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
            iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
            iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
            iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
            iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
            iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
          end
          type: 0
          order: 0
          bounds: 2,3410,130,55
          executeAtClientID: No
        END
        SerialConvergent67325:PFCTree.View.SerialConvergent
          id: 67325
          idEnd: 67315
          bounds: 582,3410,275,40
        END
        ParallelDivergent67324:PFCTree.View.ParallelDivergent
          id: 67324
          idEnd: 67327
          bounds: 147,3445,130,40
        END
        67325_67329:PFCTree.View.Link
          id: 67460
          fromID: 67325
          toID: 67329
          bounds: 712,3450,16,400
        END
        67323_67328:PFCTree.View.Link
          id: 67458
          fromID: 67323
          toID: 67328
          bounds: 60,3465,16,275
        END
        67324_67326:PFCTree.View.Link
          id: 67459
          fromID: 67324
          toID: 67326
          bounds: 205,3485,16,35
        END
        P_DISABLE_CHALL_BS:PFCTree.View.Script
          id: 67326
          buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
          arguments:
            iSet_VarName;19;{"L3"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
            iSet_VarValue;16;{No};Value to set to the global variable;;;true;;
            iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
            iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
            iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
            iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
            iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
            iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
            iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
            iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
            iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
          end
          type: 0
          order: 0
          bounds: 147,3520,130,55
          executeAtClientID: No
        END
        67326_67327:PFCTree.View.Link
          id: 67461
          fromID: 67326
          toID: 67327
          bounds: 205,3575,16,55
        END
        ParallelConvergent67327:PFCTree.View.ParallelConvergent
          id: 67327
          idEnd: 67324
          bounds: 147,3630,130,40
        END
        67327_67328:PFCTree.View.Link
          id: 67462
          fromID: 67327
          toID: 67328
          bounds: 205,3670,16,70
        END
        SerialConvergent67328:PFCTree.View.SerialConvergent
          id: 67328
          idEnd: 67321
          bounds: 2,3740,275,40
        END
        67328_67329:PFCTree.View.Link
          id: 67463
          fromID: 67328
          toID: 67329
          bounds: 132,3780,16,70
        END
        SerialConvergent67329:PFCTree.View.SerialConvergent
          id: 67329
          idEnd: 67280
          bounds: 2,3850,1145,40
        END
        67329_67330:PFCTree.View.Link
          id: 67464
          fromID: 67329
          toID: 67330
          bounds: 567,3890,16,105
        END
        SerialDivergent67330:PFCTree.View.SerialDivergent
          id: 67330
          idEnd: 67335
          bounds: 437,3995,275,40
        END
        67330_67331:PFCTree.View.Link
          id: 67465
          fromID: 67330
          toID: 67331
          bounds: 495,4035,16,35
        END
        67330_67332:PFCTree.View.Link
          id: 67466
          fromID: 67330
          toID: 67332
          bounds: 640,4035,16,70
        END
        S_SET_CHAL_NULL_BS:PFCTree.View.Script
          id: 67331
          buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
          arguments:
            iSet_VarName;19;{"Alrm3"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
            iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
            iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
            iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
            iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
            iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
            iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
            iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
            iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
            iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
            iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
          end
          type: 0
          order: 0
          bounds: 437,4070,130,55
          executeAtClientID: No
        END
        ParallelDivergent67332:PFCTree.View.ParallelDivergent
          id: 67332
          idEnd: 67334
          bounds: 582,4105,130,40
        END
        67331_67335:PFCTree.View.Link
          id: 67467
          fromID: 67331
          toID: 67335
          bounds: 495,4125,16,275
        END
        67332_67333:PFCTree.View.Link
          id: 67468
          fromID: 67332
          toID: 67333
          bounds: 640,4145,16,35
        END
        P_SET_CHAL_NULL_BS:PFCTree.View.Script
          id: 67333
          buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
          arguments:
            iSet_VarName;19;{"Alrm3"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
            iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
            iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
            iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
            iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
            iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
            iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
            iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
            iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
            iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
            iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
          end
          type: 0
          order: 0
          bounds: 582,4180,130,55
          executeAtClientID: No
        END
        67333_67334:PFCTree.View.Link
          id: 67469
          fromID: 67333
          toID: 67334
          bounds: 640,4235,16,55
        END
        ParallelConvergent67334:PFCTree.View.ParallelConvergent
          id: 67334
          idEnd: 67332
          bounds: 582,4290,130,40
        END
        67334_67335:PFCTree.View.Link
          id: 67470
          fromID: 67334
          toID: 67335
          bounds: 640,4330,16,70
        END
        SerialConvergent67335:PFCTree.View.SerialConvergent
          id: 67335
          idEnd: 67330
          bounds: 437,4400,275,40
        END
        67335_67336:PFCTree.View.Link
          id: 67471
          fromID: 67335
          toID: 67336
          bounds: 567,4440,16,86
        END
        EndNode67336:PFCTree.View.EndNode
          id: 67336
          bounds: 509,4526,130,32
        END
      END
      bounds: 292,550,130,83
    END
    P_MANUAL_ACTIVITIES_UP:PFCTree.View.UnitProcedure
      description: MANUAL ACTIVITIES
      id: 3906
      order: 2
      design:
        BeginNode3907:PFCTree.View.BeginNode
          id: 3907
          bounds: 219,16,130,32
        END
        3907_3908:PFCTree.View.Link
          id: 3949
          fromID: 3907
          toID: 3908
          bounds: 277,48,16,97
        END
        ParallelDivergent3908:PFCTree.View.ParallelDivergent
          id: 3908
          idEnd: 3947
          bounds: 2,145,565,40
        END
        3908_60590:PFCTree.View.Link
          id: 60938
          fromID: 3908
          toID: 60590
          bounds: 60,185,16,35
        END
        3908_59255:PFCTree.View.Link
          id: 59333
          fromID: 3908
          toID: 59255
          bounds: 205,185,16,35
        END
        3908_21501:PFCTree.View.Link
          id: 21509
          fromID: 3908
          toID: 21501
          bounds: 350,185,16,35
        END
        3908_21511:PFCTree.View.Link
          id: 21519
          fromID: 3908
          toID: 21511
          bounds: 495,185,16,35
        END
        MANUAL_ADHOC_CHALLENGE_OP:PFCTree.View.Operation
          description: MANUAL CHALLENGES
          id: 60590
          order: 0
          design:
            BeginNode60591:PFCTree.View.BeginNode
              id: 60591
              bounds: 1234,16,130,32
            END
            60591_68205:PFCTree.View.ControlLink
              id: 68206
              fromID: 60591
              toID: 68205
              bounds: 1292,48,16,62
            END
            WAIT_CHLG_BS:PFCTree.View.Script
              id: 68205
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"SCH_CHALLENGE"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 1234,110,130,55
              executeAtClientID: No
            END
            68205_60592:PFCTree.View.ControlLink
              id: 68207
              fromID: 68205
              toID: 60592
              bounds: 1292,165,16,55
            END
            CHALLENGE_REQUIRED_BP:PFCTree.View.Phase
              description: In Batch Challenge Required
              buildingBlockElementID: GENERIC.CHECKLIST
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"In batch equipment challenge selected";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;NULL;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Select equipment to be challenged"};Instructions with a maximum of 3 lines;;;false;;
                iCheckList_Option;19;ChallengeRequiredBp_iCheckList_Option;Check List lines to follow;;;false;;
                iCheckList_SigReq;19;ChallengeRequiredBp_iCheckList_SigReq;Required signature level for the option;;1 signature,2 signatures;true;;
                iMode;3;"One Check";Selection mode;;={ TRANSLATE("GENERIC.L_CheckListAllCheck"), TRANSLATE("GENERIC.L_CheckListOneCheck") };false;;
                iAlarm_Alarm;19;{"Alrm3"};Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;{YES};Block Validation if Alarm message diffrent than null;;;true;;
                iPartial_SignOff;1;NO;Indicates if is not necesary to check all elements at the same time;;;false;;
                iEnforceCheckListSequence;1;NO;Indicates if checking items according to the list sequence is enforced;;;false;;
              end
              wksResource: BC_UDO_Packing_2
              autoStart: No
              usePhaseRet: Yes
              Converge: No
              id: 60592
              order: 0
              bounds: 1234,220,130,83
            END
            60592_63991:PFCTree.View.Link
              id: 63994
              fromID: 60592
              toID: 63991
              bounds: 1292,303,16,62
            END
            SerialDivergent63991:PFCTree.View.SerialDivergent
              id: 63991
              idEnd: 63992
              bounds: 1162,365,275,40
            END
            63991_63996:PFCTree.View.Link
              id: 63997
              fromID: 63991
              toID: 63996
              bounds: 1220,405,16,35
            END
            63991_63999:PFCTree.View.Link
              id: 64002
              fromID: 63991
              toID: 63999
              bounds: 1365,405,16,70
            END
            S_SIGNAL_HOLD_MAN_BS:PFCTree.View.Script
              id: 63996
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Hold"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 1162,440,130,55
              executeAtClientID: No
            END
            ParallelDivergent63999:PFCTree.View.ParallelDivergent
              id: 63999
              idEnd: 64000
              bounds: 1307,475,130,40
            END
            63996_63992:PFCTree.View.Link
              id: 63998
              fromID: 63996
              toID: 63992
              bounds: 1220,495,16,275
            END
            63999_64004:PFCTree.View.Link
              id: 64005
              fromID: 63999
              toID: 64004
              bounds: 1365,515,16,35
            END
            P_SIGNAL_HOLD_MAN_BS:PFCTree.View.Script
              id: 64004
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Hold"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 1307,550,130,55
              executeAtClientID: No
            END
            64004_64000:PFCTree.View.Link
              id: 64006
              fromID: 64004
              toID: 64000
              bounds: 1365,605,16,55
            END
            EndParallelDivergent63999:PFCTree.View.ParallelConvergent
              id: 64000
              idEnd: 63999
              bounds: 1307,660,130,40
            END
            64000_63992:PFCTree.View.Link
              id: 64003
              fromID: 64000
              toID: 63992
              bounds: 1365,700,16,70
            END
            EndSerialDivergent63991:PFCTree.View.SerialConvergent
              id: 63992
              idEnd: 63991
              bounds: 1162,770,275,40
            END
            63992_60593:PFCTree.View.Link
              id: 63995
              fromID: 63992
              toID: 60593
              bounds: 1292,810,16,105
            END
            SerialDivergent60593:PFCTree.View.SerialDivergent
              id: 60593
              idEnd: 60657
              bounds: 2,915,2595,40
            END
            60593_60594:PFCTree.View.Link
              id: 60748
              fromID: 60593
              toID: 60594
              bounds: 132,955,16,35
            END
            60593_60595:PFCTree.View.Link
              id: 60749
              fromID: 60593
              toID: 60595
              bounds: 422,955,16,35
            END
            60593_60596:PFCTree.View.Link
              id: 60750
              fromID: 60593
              toID: 60596
              bounds: 712,955,16,35
            END
            60593_60597:PFCTree.View.Link
              id: 60751
              fromID: 60593
              toID: 60597
              bounds: 1002,955,16,35
            END
            60593_60598:PFCTree.View.Link
              id: 60752
              fromID: 60593
              toID: 60598
              bounds: 1292,955,16,35
            END
            60593_60599:PFCTree.View.Link
              id: 60753
              fromID: 60593
              toID: 60599
              bounds: 1582,955,16,35
            END
            60593_60600:PFCTree.View.Link
              id: 60754
              fromID: 60593
              toID: 60600
              bounds: 1872,955,16,35
            END
            60593_60601:PFCTree.View.Link
              id: 60755
              fromID: 60593
              toID: 60601
              bounds: 2162,955,16,35
            END
            60593_60602:PFCTree.View.Link
              id: 60756
              fromID: 60593
              toID: 60602
              bounds: 2452,955,16,35
            END
            CHECK_SEL_1_BS:PFCTree.View.Script
              id: 60594
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_REQUIRED_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[1]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 74,990,130,55
              executeAtClientID: No
            END
            CHECK_SEL_2_BS:PFCTree.View.Script
              id: 60595
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_REQUIRED_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[2]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 1
              bounds: 364,990,130,55
              executeAtClientID: No
            END
            CHECK_SEL_3_BS:PFCTree.View.Script
              id: 60596
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_REQUIRED_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[3]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 2
              bounds: 654,990,130,55
              executeAtClientID: No
            END
            CHECK_SEL_4_BS:PFCTree.View.Script
              id: 60597
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_REQUIRED_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[4]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 3
              bounds: 944,990,130,55
              executeAtClientID: No
            END
            CHECK_SEL_5_BS:PFCTree.View.Script
              id: 60598
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_REQUIRED_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[5]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 4
              bounds: 1234,990,130,55
              executeAtClientID: No
            END
            CHECK_SEL_6_BS:PFCTree.View.Script
              id: 60599
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_REQUIRED_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[6]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 5
              bounds: 1524,990,130,55
              executeAtClientID: No
            END
            CHECK_SEL_7_BS:PFCTree.View.Script
              id: 60600
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_REQUIRED_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[7]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 6
              bounds: 1814,990,130,55
              executeAtClientID: No
            END
            CHECK_SEL_8_BS:PFCTree.View.Script
              id: 60601
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_REQUIRED_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[8]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 7
              bounds: 2104,990,130,55
              executeAtClientID: No
            END
            CHECK_SEL_9_BS:PFCTree.View.Script
              id: 60602
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_REQUIRED_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[9]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 8
              bounds: 2394,990,130,55
              executeAtClientID: No
            END
            60594_60603:PFCTree.View.Link
              id: 60757
              fromID: 60594
              toID: 60603
              bounds: 132,1045,16,90
            END
            60595_60604:PFCTree.View.Link
              id: 60758
              fromID: 60595
              toID: 60604
              bounds: 422,1045,16,90
            END
            60596_60605:PFCTree.View.Link
              id: 60759
              fromID: 60596
              toID: 60605
              bounds: 712,1045,16,90
            END
            60597_60606:PFCTree.View.Link
              id: 60760
              fromID: 60597
              toID: 60606
              bounds: 1002,1045,16,90
            END
            60598_60607:PFCTree.View.Link
              id: 60761
              fromID: 60598
              toID: 60607
              bounds: 1292,1045,16,90
            END
            60599_60608:PFCTree.View.Link
              id: 60762
              fromID: 60599
              toID: 60608
              bounds: 1582,1045,16,90
            END
            60600_60609:PFCTree.View.Link
              id: 60763
              fromID: 60600
              toID: 60609
              bounds: 1872,1045,16,90
            END
            60601_60610:PFCTree.View.Link
              id: 60764
              fromID: 60601
              toID: 60610
              bounds: 2162,1045,16,90
            END
            60602_60611:PFCTree.View.Link
              id: 60765
              fromID: 60602
              toID: 60611
              bounds: 2452,1045,16,90
            END
            SerialDivergent60603:PFCTree.View.SerialDivergent
              id: 60603
              idEnd: 60648
              bounds: 2,1135,275,40
            END
            SerialDivergent60604:PFCTree.View.SerialDivergent
              id: 60604
              idEnd: 60649
              bounds: 292,1135,275,40
            END
            SerialDivergent60605:PFCTree.View.SerialDivergent
              id: 60605
              idEnd: 60650
              bounds: 582,1135,275,40
            END
            SerialDivergent60606:PFCTree.View.SerialDivergent
              id: 60606
              idEnd: 60651
              bounds: 872,1135,275,40
            END
            SerialDivergent60607:PFCTree.View.SerialDivergent
              id: 60607
              idEnd: 60652
              bounds: 1162,1135,275,40
            END
            SerialDivergent60608:PFCTree.View.SerialDivergent
              id: 60608
              idEnd: 60653
              bounds: 1452,1135,275,40
            END
            SerialDivergent60609:PFCTree.View.SerialDivergent
              id: 60609
              idEnd: 60654
              bounds: 1742,1135,275,40
            END
            SerialDivergent60610:PFCTree.View.SerialDivergent
              id: 60610
              idEnd: 60655
              bounds: 2032,1135,275,40
            END
            SerialDivergent60611:PFCTree.View.SerialDivergent
              id: 60611
              idEnd: 60656
              bounds: 2322,1135,275,40
            END
            60603_60612:PFCTree.View.Link
              id: 60766
              fromID: 60603
              toID: 60612
              bounds: 60,1175,16,35
            END
            60603_60613:PFCTree.View.Link
              id: 60767
              fromID: 60603
              toID: 60613
              bounds: 205,1175,16,70
            END
            60604_60614:PFCTree.View.Link
              id: 60768
              fromID: 60604
              toID: 60614
              bounds: 350,1175,16,35
            END
            60604_60615:PFCTree.View.Link
              id: 60769
              fromID: 60604
              toID: 60615
              bounds: 495,1175,16,70
            END
            60605_60616:PFCTree.View.Link
              id: 60770
              fromID: 60605
              toID: 60616
              bounds: 640,1175,16,35
            END
            60605_60617:PFCTree.View.Link
              id: 60771
              fromID: 60605
              toID: 60617
              bounds: 785,1175,16,70
            END
            60606_60618:PFCTree.View.Link
              id: 60772
              fromID: 60606
              toID: 60618
              bounds: 930,1175,16,35
            END
            60606_60619:PFCTree.View.Link
              id: 60773
              fromID: 60606
              toID: 60619
              bounds: 1075,1175,16,70
            END
            60607_60620:PFCTree.View.Link
              id: 60774
              fromID: 60607
              toID: 60620
              bounds: 1220,1175,16,35
            END
            60607_60621:PFCTree.View.Link
              id: 60775
              fromID: 60607
              toID: 60621
              bounds: 1365,1175,16,70
            END
            60608_60622:PFCTree.View.Link
              id: 60776
              fromID: 60608
              toID: 60622
              bounds: 1510,1175,16,35
            END
            60608_60623:PFCTree.View.Link
              id: 60777
              fromID: 60608
              toID: 60623
              bounds: 1655,1175,16,70
            END
            60609_60624:PFCTree.View.Link
              id: 60778
              fromID: 60609
              toID: 60624
              bounds: 1800,1175,16,35
            END
            60609_60625:PFCTree.View.Link
              id: 60779
              fromID: 60609
              toID: 60625
              bounds: 1945,1175,16,70
            END
            60610_60626:PFCTree.View.Link
              id: 60780
              fromID: 60610
              toID: 60626
              bounds: 2090,1175,16,35
            END
            60610_60627:PFCTree.View.Link
              id: 60781
              fromID: 60610
              toID: 60627
              bounds: 2235,1175,16,70
            END
            60611_60628:PFCTree.View.Link
              id: 60782
              fromID: 60611
              toID: 60628
              bounds: 2380,1175,16,35
            END
            60611_60629:PFCTree.View.Link
              id: 60783
              fromID: 60611
              toID: 60629
              bounds: 2525,1175,16,70
            END
            S_SELECTION_1_BS:PFCTree.View.Script
              id: 60612
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeSelection","ChallengeDescription"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"The following equipment requires challenging:",$$EqpAllChall};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,1210,130,55
              executeAtClientID: No
            END
            S_SELECTION_2_BS:PFCTree.View.Script
              id: 60614
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeSelection","ChallengeDescription"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"The following equipment requires challenging:",$$Eqp1Chall};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 292,1210,130,55
              executeAtClientID: No
            END
            S_SELECTION_3_BS:PFCTree.View.Script
              id: 60616
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeSelection","ChallengeDescription"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"The following equipment requires challenging:",$$Eqp2Chall};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 582,1210,130,55
              executeAtClientID: No
            END
            S_SELECTION_4_BS:PFCTree.View.Script
              id: 60618
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeSelection","ChallengeDescription"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"The following equipment requires challenging:",$$Eqp3Chall};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 872,1210,130,55
              executeAtClientID: No
            END
            S_SELECTION_5_BS:PFCTree.View.Script
              id: 60620
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeSelection","ChallengeDescription"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"The following equipment requires challenging:",$$Eqp4Chall};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1162,1210,130,55
              executeAtClientID: No
            END
            S_SELECTION_6_BS:PFCTree.View.Script
              id: 60622
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeSelection","ChallengeDescription"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"The following equipment requires challenging:",$$Eqp5Chall};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1452,1210,130,55
              executeAtClientID: No
            END
            S_SELECTION_7_BS:PFCTree.View.Script
              id: 60624
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeSelection","ChallengeDescription"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"The following equipment requires challenging:",$$Eqp6Chall};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1742,1210,130,55
              executeAtClientID: No
            END
            S_SELECTION_8_BS:PFCTree.View.Script
              id: 60626
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeSelection","ChallengeDescription"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"The following equipment requires challenging:",$$Eqp7Chall};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2032,1210,130,55
              executeAtClientID: No
            END
            S_SELECTION_9_BS:PFCTree.View.Script
              id: 60628
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeSelection","ChallengeDescription"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"The following equipment requires challenging:",$$Eqp8Chall};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2322,1210,130,55
              executeAtClientID: No
            END
            ParallelDivergent60613:PFCTree.View.ParallelDivergent
              id: 60613
              idEnd: 60639
              bounds: 147,1245,130,40
            END
            ParallelDivergent60615:PFCTree.View.ParallelDivergent
              id: 60615
              idEnd: 60640
              bounds: 437,1245,130,40
            END
            ParallelDivergent60617:PFCTree.View.ParallelDivergent
              id: 60617
              idEnd: 60641
              bounds: 727,1245,130,40
            END
            ParallelDivergent60619:PFCTree.View.ParallelDivergent
              id: 60619
              idEnd: 60642
              bounds: 1017,1245,130,40
            END
            ParallelDivergent60621:PFCTree.View.ParallelDivergent
              id: 60621
              idEnd: 60643
              bounds: 1307,1245,130,40
            END
            ParallelDivergent60623:PFCTree.View.ParallelDivergent
              id: 60623
              idEnd: 60644
              bounds: 1597,1245,130,40
            END
            ParallelDivergent60625:PFCTree.View.ParallelDivergent
              id: 60625
              idEnd: 60645
              bounds: 1887,1245,130,40
            END
            ParallelDivergent60627:PFCTree.View.ParallelDivergent
              id: 60627
              idEnd: 60646
              bounds: 2177,1245,130,40
            END
            ParallelDivergent60629:PFCTree.View.ParallelDivergent
              id: 60629
              idEnd: 60647
              bounds: 2467,1245,130,40
            END
            60612_60648:PFCTree.View.Link
              id: 60784
              fromID: 60612
              toID: 60648
              bounds: 60,1265,16,275
            END
            60614_60649:PFCTree.View.Link
              id: 60786
              fromID: 60614
              toID: 60649
              bounds: 350,1265,16,275
            END
            60616_60650:PFCTree.View.Link
              id: 60788
              fromID: 60616
              toID: 60650
              bounds: 640,1265,16,275
            END
            60618_60651:PFCTree.View.Link
              id: 60790
              fromID: 60618
              toID: 60651
              bounds: 930,1265,16,275
            END
            60620_60652:PFCTree.View.Link
              id: 60792
              fromID: 60620
              toID: 60652
              bounds: 1220,1265,16,275
            END
            60622_60653:PFCTree.View.Link
              id: 60794
              fromID: 60622
              toID: 60653
              bounds: 1510,1265,16,275
            END
            60624_60654:PFCTree.View.Link
              id: 60796
              fromID: 60624
              toID: 60654
              bounds: 1800,1265,16,275
            END
            60626_60655:PFCTree.View.Link
              id: 60798
              fromID: 60626
              toID: 60655
              bounds: 2090,1265,16,275
            END
            60628_60656:PFCTree.View.Link
              id: 60800
              fromID: 60628
              toID: 60656
              bounds: 2380,1265,16,275
            END
            60613_60630:PFCTree.View.Link
              id: 60785
              fromID: 60613
              toID: 60630
              bounds: 205,1285,16,35
            END
            60615_60631:PFCTree.View.Link
              id: 60787
              fromID: 60615
              toID: 60631
              bounds: 495,1285,16,35
            END
            60617_60632:PFCTree.View.Link
              id: 60789
              fromID: 60617
              toID: 60632
              bounds: 785,1285,16,35
            END
            60619_60633:PFCTree.View.Link
              id: 60791
              fromID: 60619
              toID: 60633
              bounds: 1075,1285,16,35
            END
            60621_60634:PFCTree.View.Link
              id: 60793
              fromID: 60621
              toID: 60634
              bounds: 1365,1285,16,35
            END
            60623_60635:PFCTree.View.Link
              id: 60795
              fromID: 60623
              toID: 60635
              bounds: 1655,1285,16,35
            END
            60625_60636:PFCTree.View.Link
              id: 60797
              fromID: 60625
              toID: 60636
              bounds: 1945,1285,16,35
            END
            60627_60637:PFCTree.View.Link
              id: 60799
              fromID: 60627
              toID: 60637
              bounds: 2235,1285,16,35
            END
            60629_60638:PFCTree.View.Link
              id: 60801
              fromID: 60629
              toID: 60638
              bounds: 2525,1285,16,35
            END
            P_SELECTION_1_BS:PFCTree.View.Script
              id: 60630
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeSelection","ChallengeDescription"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"The following equipment requires challenging:",$$EqpAllChall};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,1320,130,55
              executeAtClientID: No
            END
            P_SELECTION_2_BS:PFCTree.View.Script
              id: 60631
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeSelection","ChallengeDescription"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"The following equipment requires challenging:",$$Eqp1Chall};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 437,1320,130,55
              executeAtClientID: No
            END
            S_SELECTION_3_BS_1:PFCTree.View.Script
              id: 60632
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeSelection","ChallengeDescription"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"The following equipment requires challenging:",$$Eqp2Chall};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 727,1320,130,55
              executeAtClientID: No
            END
            P_SELECTION_4_BS:PFCTree.View.Script
              id: 60633
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeSelection","ChallengeDescription"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"The following equipment requires challenging:",$$Eqp3Chall};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1017,1320,130,55
              executeAtClientID: No
            END
            P_SELECTION_5_BS:PFCTree.View.Script
              id: 60634
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeSelection","ChallengeDescription"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"The following equipment requires challenging:",$$Eqp4Chall};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1307,1320,130,55
              executeAtClientID: No
            END
            P_SELECTION_6_BS:PFCTree.View.Script
              id: 60635
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeSelection","ChallengeDescription"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"The following equipment requires challenging:",$$Eqp5Chall};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1597,1320,130,55
              executeAtClientID: No
            END
            P_SELECTION_7_BS:PFCTree.View.Script
              id: 60636
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeSelection","ChallengeDescription"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"The following equipment requires challenging:",$$Eqp6Chall};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1887,1320,130,55
              executeAtClientID: No
            END
            P_SELECTION_8_BS:PFCTree.View.Script
              id: 60637
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeSelection","ChallengeDescription"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"The following equipment requires challenging:",$$Eqp7Chall};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2177,1320,130,55
              executeAtClientID: No
            END
            P_SELECTION_9_BS:PFCTree.View.Script
              id: 60638
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeSelection","ChallengeDescription"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"The following equipment requires challenging:",$$Eqp8Chall};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2467,1320,130,55
              executeAtClientID: No
            END
            60630_60639:PFCTree.View.Link
              id: 60802
              fromID: 60630
              toID: 60639
              bounds: 205,1375,16,55
            END
            60631_60640:PFCTree.View.Link
              id: 60803
              fromID: 60631
              toID: 60640
              bounds: 495,1375,16,55
            END
            60632_60641:PFCTree.View.Link
              id: 60804
              fromID: 60632
              toID: 60641
              bounds: 785,1375,16,55
            END
            60633_60642:PFCTree.View.Link
              id: 60805
              fromID: 60633
              toID: 60642
              bounds: 1075,1375,16,55
            END
            60634_60643:PFCTree.View.Link
              id: 60806
              fromID: 60634
              toID: 60643
              bounds: 1365,1375,16,55
            END
            60635_60644:PFCTree.View.Link
              id: 60807
              fromID: 60635
              toID: 60644
              bounds: 1655,1375,16,55
            END
            60636_60645:PFCTree.View.Link
              id: 60808
              fromID: 60636
              toID: 60645
              bounds: 1945,1375,16,55
            END
            60637_60646:PFCTree.View.Link
              id: 60809
              fromID: 60637
              toID: 60646
              bounds: 2235,1375,16,55
            END
            60638_60647:PFCTree.View.Link
              id: 60810
              fromID: 60638
              toID: 60647
              bounds: 2525,1375,16,55
            END
            ParallelConvergent60639:PFCTree.View.ParallelConvergent
              id: 60639
              idEnd: 60613
              bounds: 147,1430,130,40
            END
            ParallelConvergent60640:PFCTree.View.ParallelConvergent
              id: 60640
              idEnd: 60615
              bounds: 437,1430,130,40
            END
            ParallelConvergent60641:PFCTree.View.ParallelConvergent
              id: 60641
              idEnd: 60617
              bounds: 727,1430,130,40
            END
            ParallelConvergent60642:PFCTree.View.ParallelConvergent
              id: 60642
              idEnd: 60619
              bounds: 1017,1430,130,40
            END
            ParallelConvergent60643:PFCTree.View.ParallelConvergent
              id: 60643
              idEnd: 60621
              bounds: 1307,1430,130,40
            END
            ParallelConvergent60644:PFCTree.View.ParallelConvergent
              id: 60644
              idEnd: 60623
              bounds: 1597,1430,130,40
            END
            ParallelConvergent60645:PFCTree.View.ParallelConvergent
              id: 60645
              idEnd: 60625
              bounds: 1887,1430,130,40
            END
            ParallelConvergent60646:PFCTree.View.ParallelConvergent
              id: 60646
              idEnd: 60627
              bounds: 2177,1430,130,40
            END
            ParallelConvergent60647:PFCTree.View.ParallelConvergent
              id: 60647
              idEnd: 60629
              bounds: 2467,1430,130,40
            END
            60639_60648:PFCTree.View.Link
              id: 60811
              fromID: 60639
              toID: 60648
              bounds: 205,1470,16,70
            END
            60640_60649:PFCTree.View.Link
              id: 60812
              fromID: 60640
              toID: 60649
              bounds: 495,1470,16,70
            END
            60641_60650:PFCTree.View.Link
              id: 60813
              fromID: 60641
              toID: 60650
              bounds: 785,1470,16,70
            END
            60642_60651:PFCTree.View.Link
              id: 60814
              fromID: 60642
              toID: 60651
              bounds: 1075,1470,16,70
            END
            60643_60652:PFCTree.View.Link
              id: 60815
              fromID: 60643
              toID: 60652
              bounds: 1365,1470,16,70
            END
            60644_60653:PFCTree.View.Link
              id: 60816
              fromID: 60644
              toID: 60653
              bounds: 1655,1470,16,70
            END
            60645_60654:PFCTree.View.Link
              id: 60817
              fromID: 60645
              toID: 60654
              bounds: 1945,1470,16,70
            END
            60646_60655:PFCTree.View.Link
              id: 60818
              fromID: 60646
              toID: 60655
              bounds: 2235,1470,16,70
            END
            60647_60656:PFCTree.View.Link
              id: 60819
              fromID: 60647
              toID: 60656
              bounds: 2525,1470,16,70
            END
            SerialConvergent60648:PFCTree.View.SerialConvergent
              id: 60648
              idEnd: 60603
              bounds: 2,1540,275,40
            END
            SerialConvergent60649:PFCTree.View.SerialConvergent
              id: 60649
              idEnd: 60604
              bounds: 292,1540,275,40
            END
            SerialConvergent60650:PFCTree.View.SerialConvergent
              id: 60650
              idEnd: 60605
              bounds: 582,1540,275,40
            END
            SerialConvergent60651:PFCTree.View.SerialConvergent
              id: 60651
              idEnd: 60606
              bounds: 872,1540,275,40
            END
            SerialConvergent60652:PFCTree.View.SerialConvergent
              id: 60652
              idEnd: 60607
              bounds: 1162,1540,275,40
            END
            SerialConvergent60653:PFCTree.View.SerialConvergent
              id: 60653
              idEnd: 60608
              bounds: 1452,1540,275,40
            END
            SerialConvergent60654:PFCTree.View.SerialConvergent
              id: 60654
              idEnd: 60609
              bounds: 1742,1540,275,40
            END
            SerialConvergent60655:PFCTree.View.SerialConvergent
              id: 60655
              idEnd: 60610
              bounds: 2032,1540,275,40
            END
            SerialConvergent60656:PFCTree.View.SerialConvergent
              id: 60656
              idEnd: 60611
              bounds: 2322,1540,275,40
            END
            60648_60657:PFCTree.View.Link
              id: 60820
              fromID: 60648
              toID: 60657
              bounds: 132,1580,16,70
            END
            60649_60657:PFCTree.View.Link
              id: 60821
              fromID: 60649
              toID: 60657
              bounds: 422,1580,16,70
            END
            60650_60657:PFCTree.View.Link
              id: 60822
              fromID: 60650
              toID: 60657
              bounds: 712,1580,16,70
            END
            60651_60657:PFCTree.View.Link
              id: 60823
              fromID: 60651
              toID: 60657
              bounds: 1002,1580,16,70
            END
            60652_60657:PFCTree.View.Link
              id: 60824
              fromID: 60652
              toID: 60657
              bounds: 1292,1580,16,70
            END
            60653_60657:PFCTree.View.Link
              id: 60825
              fromID: 60653
              toID: 60657
              bounds: 1582,1580,16,70
            END
            60654_60657:PFCTree.View.Link
              id: 60826
              fromID: 60654
              toID: 60657
              bounds: 1872,1580,16,70
            END
            60655_60657:PFCTree.View.Link
              id: 60827
              fromID: 60655
              toID: 60657
              bounds: 2162,1580,16,70
            END
            60656_60657:PFCTree.View.Link
              id: 60828
              fromID: 60656
              toID: 60657
              bounds: 2452,1580,16,70
            END
            SerialConvergent60657:PFCTree.View.SerialConvergent
              id: 60657
              idEnd: 60593
              bounds: 2,1650,2595,40
            END
            60657_60940:PFCTree.View.Link
              id: 60943
              fromID: 60657
              toID: 60940
              bounds: 1292,1690,16,105
            END
            SerialDivergent60940:PFCTree.View.SerialDivergent
              id: 60940
              idEnd: 60941
              bounds: 1162,1795,275,40
            END
            60940_60945:PFCTree.View.Link
              id: 60946
              fromID: 60940
              toID: 60945
              bounds: 1220,1835,16,35
            END
            60940_60948:PFCTree.View.Link
              id: 60951
              fromID: 60940
              toID: 60948
              bounds: 1365,1835,16,70
            END
            S_SET_ADHOC_INSTRUCTION_BS:PFCTree.View.Script
              id: 60945
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeInstruction"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Carry out In Batch Challenges "};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1162,1870,130,55
              executeAtClientID: No
            END
            ParallelDivergent60948:PFCTree.View.ParallelDivergent
              id: 60948
              idEnd: 60949
              bounds: 1307,1905,130,40
            END
            60945_60941:PFCTree.View.Link
              id: 60947
              fromID: 60945
              toID: 60941
              bounds: 1220,1925,16,275
            END
            60948_60954:PFCTree.View.Link
              id: 60955
              fromID: 60948
              toID: 60954
              bounds: 1365,1945,16,35
            END
            P_SET_ADHOC_INSTRUCTION_BS:PFCTree.View.Script
              id: 60954
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"ChallengeInstruction"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Carry out In Batch Challenges "};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1307,1980,130,55
              executeAtClientID: No
            END
            60954_60949:PFCTree.View.Link
              id: 60956
              fromID: 60954
              toID: 60949
              bounds: 1365,2035,16,55
            END
            EndParallelDivergent60948:PFCTree.View.ParallelConvergent
              id: 60949
              idEnd: 60948
              bounds: 1307,2090,130,40
            END
            60949_60941:PFCTree.View.Link
              id: 60952
              fromID: 60949
              toID: 60941
              bounds: 1365,2130,16,70
            END
            EndSerialDivergent60940:PFCTree.View.SerialConvergent
              id: 60941
              idEnd: 60940
              bounds: 1162,2200,275,40
            END
            60941_60957:PFCTree.View.Link
              id: 60958
              fromID: 60941
              toID: 60957
              bounds: 1292,2240,16,70
            END
            ADHOC_CHAL_EVENT_BP:PFCTree.View.Phase
              description: Adhoc Challenge Atypical Event
              buildingBlockElementID: EVENT_MANAGEMENT.ATYPICAL_EVENT
              arguments:
                iEventDescription;19;{"In Batch AdHoc Challenge triggered by OPERATOR",$$ChallengeSelection,$$ChallengeDescription};Event Description when Automatic Atypical Event;;;true;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iPathWriteID;3;NULL;Path to write ATYPICAL_EVENT_ID characteristic;;;true;;
              end
              wksResource: BC_UDO_Packing_2
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 60957
              order: 0
              bounds: 1234,2310,130,83
            END
            60957_60667:PFCTree.View.Link
              id: 60962
              fromID: 60957
              toID: 60667
              bounds: 1292,2393,16,62
            END
            SerialDivergent60667:PFCTree.View.SerialDivergent
              id: 60667
              idEnd: 60731
              bounds: 2,2455,2595,40
            END
            60667_60668:PFCTree.View.Link
              id: 60841
              fromID: 60667
              toID: 60668
              bounds: 132,2495,16,35
            END
            60667_60669:PFCTree.View.Link
              id: 60842
              fromID: 60667
              toID: 60669
              bounds: 422,2495,16,35
            END
            60667_60670:PFCTree.View.Link
              id: 60843
              fromID: 60667
              toID: 60670
              bounds: 712,2495,16,35
            END
            60667_60671:PFCTree.View.Link
              id: 60844
              fromID: 60667
              toID: 60671
              bounds: 1002,2495,16,35
            END
            60667_60672:PFCTree.View.Link
              id: 60845
              fromID: 60667
              toID: 60672
              bounds: 1292,2495,16,35
            END
            60667_60673:PFCTree.View.Link
              id: 60846
              fromID: 60667
              toID: 60673
              bounds: 1582,2495,16,35
            END
            60667_60674:PFCTree.View.Link
              id: 60847
              fromID: 60667
              toID: 60674
              bounds: 1872,2495,16,35
            END
            60667_60675:PFCTree.View.Link
              id: 60848
              fromID: 60667
              toID: 60675
              bounds: 2162,2495,16,35
            END
            60667_60676:PFCTree.View.Link
              id: 60849
              fromID: 60667
              toID: 60676
              bounds: 2452,2495,16,35
            END
            CHECK_SEL_1_BS_1:PFCTree.View.Script
              id: 60668
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_REQUIRED_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[1]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 74,2530,130,55
              executeAtClientID: No
            END
            CHECK_SEL_2_BS_1:PFCTree.View.Script
              id: 60669
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_REQUIRED_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[2]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 1
              bounds: 364,2530,130,55
              executeAtClientID: No
            END
            CHECK_SEL_3_BS_1:PFCTree.View.Script
              id: 60670
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_REQUIRED_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[3]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 2
              bounds: 654,2530,130,55
              executeAtClientID: No
            END
            CHECK_SEL_4_BS_1:PFCTree.View.Script
              id: 60671
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_REQUIRED_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[4]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 3
              bounds: 944,2530,130,55
              executeAtClientID: No
            END
            CHECK_SEL_5_BS_1:PFCTree.View.Script
              id: 60672
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_REQUIRED_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[5]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 4
              bounds: 1234,2530,130,55
              executeAtClientID: No
            END
            CHECK_SEL_6_BS_1:PFCTree.View.Script
              id: 60673
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_REQUIRED_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[6]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 5
              bounds: 1524,2530,130,55
              executeAtClientID: No
            END
            CHECK_SEL_7_BS_1:PFCTree.View.Script
              id: 60674
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_REQUIRED_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[7]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 6
              bounds: 1814,2530,130,55
              executeAtClientID: No
            END
            CHECK_SEL_8_BS_1:PFCTree.View.Script
              id: 60675
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_REQUIRED_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[8]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 7
              bounds: 2104,2530,130,55
              executeAtClientID: No
            END
            CHECK_SEL_9_BS_1:PFCTree.View.Script
              id: 60676
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"CHALLENGE_REQUIRED_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[9]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 8
              bounds: 2394,2530,130,55
              executeAtClientID: No
            END
            60668_60677:PFCTree.View.Link
              id: 60850
              fromID: 60668
              toID: 60677
              bounds: 132,2585,16,90
            END
            60669_60678:PFCTree.View.Link
              id: 60851
              fromID: 60669
              toID: 60678
              bounds: 422,2585,16,90
            END
            60670_60679:PFCTree.View.Link
              id: 60852
              fromID: 60670
              toID: 60679
              bounds: 712,2585,16,90
            END
            60671_60680:PFCTree.View.Link
              id: 60853
              fromID: 60671
              toID: 60680
              bounds: 1002,2585,16,90
            END
            60672_60681:PFCTree.View.Link
              id: 60854
              fromID: 60672
              toID: 60681
              bounds: 1292,2585,16,90
            END
            60673_60682:PFCTree.View.Link
              id: 60855
              fromID: 60673
              toID: 60682
              bounds: 1582,2585,16,90
            END
            60674_60683:PFCTree.View.Link
              id: 60856
              fromID: 60674
              toID: 60683
              bounds: 1872,2585,16,90
            END
            60675_60684:PFCTree.View.Link
              id: 60857
              fromID: 60675
              toID: 60684
              bounds: 2162,2585,16,90
            END
            60676_60685:PFCTree.View.Link
              id: 60858
              fromID: 60676
              toID: 60685
              bounds: 2452,2585,16,90
            END
            SerialDivergent60677:PFCTree.View.SerialDivergent
              id: 60677
              idEnd: 60722
              bounds: 2,2675,275,40
            END
            SerialDivergent60678:PFCTree.View.SerialDivergent
              id: 60678
              idEnd: 60723
              bounds: 292,2675,275,40
            END
            SerialDivergent60679:PFCTree.View.SerialDivergent
              id: 60679
              idEnd: 60724
              bounds: 582,2675,275,40
            END
            SerialDivergent60680:PFCTree.View.SerialDivergent
              id: 60680
              idEnd: 60725
              bounds: 872,2675,275,40
            END
            SerialDivergent60681:PFCTree.View.SerialDivergent
              id: 60681
              idEnd: 60726
              bounds: 1162,2675,275,40
            END
            SerialDivergent60682:PFCTree.View.SerialDivergent
              id: 60682
              idEnd: 60727
              bounds: 1452,2675,275,40
            END
            SerialDivergent60683:PFCTree.View.SerialDivergent
              id: 60683
              idEnd: 60728
              bounds: 1742,2675,275,40
            END
            SerialDivergent60684:PFCTree.View.SerialDivergent
              id: 60684
              idEnd: 60729
              bounds: 2032,2675,275,40
            END
            SerialDivergent60685:PFCTree.View.SerialDivergent
              id: 60685
              idEnd: 60730
              bounds: 2322,2675,275,40
            END
            60677_60686:PFCTree.View.Link
              id: 60859
              fromID: 60677
              toID: 60686
              bounds: 60,2715,16,35
            END
            60677_60687:PFCTree.View.Link
              id: 60860
              fromID: 60677
              toID: 60687
              bounds: 205,2715,16,70
            END
            60678_60688:PFCTree.View.Link
              id: 60861
              fromID: 60678
              toID: 60688
              bounds: 350,2715,16,35
            END
            60678_60689:PFCTree.View.Link
              id: 60862
              fromID: 60678
              toID: 60689
              bounds: 495,2715,16,70
            END
            60679_60690:PFCTree.View.Link
              id: 60863
              fromID: 60679
              toID: 60690
              bounds: 640,2715,16,35
            END
            60679_60691:PFCTree.View.Link
              id: 60864
              fromID: 60679
              toID: 60691
              bounds: 785,2715,16,70
            END
            60680_60692:PFCTree.View.Link
              id: 60865
              fromID: 60680
              toID: 60692
              bounds: 930,2715,16,35
            END
            60680_60693:PFCTree.View.Link
              id: 60866
              fromID: 60680
              toID: 60693
              bounds: 1075,2715,16,70
            END
            60681_60694:PFCTree.View.Link
              id: 60867
              fromID: 60681
              toID: 60694
              bounds: 1220,2715,16,35
            END
            60681_60695:PFCTree.View.Link
              id: 60868
              fromID: 60681
              toID: 60695
              bounds: 1365,2715,16,70
            END
            60682_60696:PFCTree.View.Link
              id: 60869
              fromID: 60682
              toID: 60696
              bounds: 1510,2715,16,35
            END
            60682_60697:PFCTree.View.Link
              id: 60870
              fromID: 60682
              toID: 60697
              bounds: 1655,2715,16,70
            END
            60683_60698:PFCTree.View.Link
              id: 60871
              fromID: 60683
              toID: 60698
              bounds: 1800,2715,16,35
            END
            60683_60699:PFCTree.View.Link
              id: 60872
              fromID: 60683
              toID: 60699
              bounds: 1945,2715,16,70
            END
            60684_60700:PFCTree.View.Link
              id: 60873
              fromID: 60684
              toID: 60700
              bounds: 2090,2715,16,35
            END
            60684_60701:PFCTree.View.Link
              id: 60874
              fromID: 60684
              toID: 60701
              bounds: 2235,2715,16,70
            END
            60685_60702:PFCTree.View.Link
              id: 60875
              fromID: 60685
              toID: 60702
              bounds: 2380,2715,16,35
            END
            60685_60703:PFCTree.View.Link
              id: 60876
              fromID: 60685
              toID: 60703
              bounds: 2525,2715,16,70
            END
            S_SIGNAL_ALL_BS:PFCTree.View.Script
              id: 60686
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"AdhocAll"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 2,2750,130,55
              executeAtClientID: No
            END
            S_SIGNAL_1_BS:PFCTree.View.Script
              id: 60688
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Adhoc1"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 292,2750,130,55
              executeAtClientID: No
            END
            S_SIGNAL_2_BS:PFCTree.View.Script
              id: 60690
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Adhoc2"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 582,2750,130,55
              executeAtClientID: No
            END
            S_SIGNAL_3_BS:PFCTree.View.Script
              id: 60692
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Adhoc3"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 872,2750,130,55
              executeAtClientID: No
            END
            S_SIGNAL_4_BS:PFCTree.View.Script
              id: 60694
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Adhoc4"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 1162,2750,130,55
              executeAtClientID: No
            END
            S_SIGNAL_5_BS:PFCTree.View.Script
              id: 60696
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Adhoc5"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 1452,2750,130,55
              executeAtClientID: No
            END
            S_SIGNAL_6_BS:PFCTree.View.Script
              id: 60698
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Adhoc6"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 1742,2750,130,55
              executeAtClientID: No
            END
            S_SIGNAL_7_BS:PFCTree.View.Script
              id: 60700
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Adhoc7"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 2032,2750,130,55
              executeAtClientID: No
            END
            S_SIGNAL_8_BS:PFCTree.View.Script
              id: 60702
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Adhoc8"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 2322,2750,130,55
              executeAtClientID: No
            END
            ParallelDivergent60687:PFCTree.View.ParallelDivergent
              id: 60687
              idEnd: 60713
              bounds: 147,2785,130,40
            END
            ParallelDivergent60689:PFCTree.View.ParallelDivergent
              id: 60689
              idEnd: 60714
              bounds: 437,2785,130,40
            END
            ParallelDivergent60691:PFCTree.View.ParallelDivergent
              id: 60691
              idEnd: 60715
              bounds: 727,2785,130,40
            END
            ParallelDivergent60693:PFCTree.View.ParallelDivergent
              id: 60693
              idEnd: 60716
              bounds: 1017,2785,130,40
            END
            ParallelDivergent60695:PFCTree.View.ParallelDivergent
              id: 60695
              idEnd: 60717
              bounds: 1307,2785,130,40
            END
            ParallelDivergent60697:PFCTree.View.ParallelDivergent
              id: 60697
              idEnd: 60718
              bounds: 1597,2785,130,40
            END
            ParallelDivergent60699:PFCTree.View.ParallelDivergent
              id: 60699
              idEnd: 60719
              bounds: 1887,2785,130,40
            END
            ParallelDivergent60701:PFCTree.View.ParallelDivergent
              id: 60701
              idEnd: 60720
              bounds: 2177,2785,130,40
            END
            ParallelDivergent60703:PFCTree.View.ParallelDivergent
              id: 60703
              idEnd: 60721
              bounds: 2467,2785,130,40
            END
            60686_60722:PFCTree.View.Link
              id: 60877
              fromID: 60686
              toID: 60722
              bounds: 60,2805,16,275
            END
            60688_60723:PFCTree.View.Link
              id: 60879
              fromID: 60688
              toID: 60723
              bounds: 350,2805,16,275
            END
            60690_60724:PFCTree.View.Link
              id: 60881
              fromID: 60690
              toID: 60724
              bounds: 640,2805,16,275
            END
            60692_60725:PFCTree.View.Link
              id: 60883
              fromID: 60692
              toID: 60725
              bounds: 930,2805,16,275
            END
            60694_60726:PFCTree.View.Link
              id: 60885
              fromID: 60694
              toID: 60726
              bounds: 1220,2805,16,275
            END
            60696_60727:PFCTree.View.Link
              id: 60887
              fromID: 60696
              toID: 60727
              bounds: 1510,2805,16,275
            END
            60698_60728:PFCTree.View.Link
              id: 60889
              fromID: 60698
              toID: 60728
              bounds: 1800,2805,16,275
            END
            60700_60729:PFCTree.View.Link
              id: 60891
              fromID: 60700
              toID: 60729
              bounds: 2090,2805,16,275
            END
            60702_60730:PFCTree.View.Link
              id: 60893
              fromID: 60702
              toID: 60730
              bounds: 2380,2805,16,275
            END
            60687_60704:PFCTree.View.Link
              id: 60878
              fromID: 60687
              toID: 60704
              bounds: 205,2825,16,35
            END
            60689_60705:PFCTree.View.Link
              id: 60880
              fromID: 60689
              toID: 60705
              bounds: 495,2825,16,35
            END
            60691_60706:PFCTree.View.Link
              id: 60882
              fromID: 60691
              toID: 60706
              bounds: 785,2825,16,35
            END
            60693_60707:PFCTree.View.Link
              id: 60884
              fromID: 60693
              toID: 60707
              bounds: 1075,2825,16,35
            END
            60695_60708:PFCTree.View.Link
              id: 60886
              fromID: 60695
              toID: 60708
              bounds: 1365,2825,16,35
            END
            60697_60709:PFCTree.View.Link
              id: 60888
              fromID: 60697
              toID: 60709
              bounds: 1655,2825,16,35
            END
            60699_60710:PFCTree.View.Link
              id: 60890
              fromID: 60699
              toID: 60710
              bounds: 1945,2825,16,35
            END
            60701_60711:PFCTree.View.Link
              id: 60892
              fromID: 60701
              toID: 60711
              bounds: 2235,2825,16,35
            END
            60703_60712:PFCTree.View.Link
              id: 60894
              fromID: 60703
              toID: 60712
              bounds: 2525,2825,16,35
            END
            P_SIGNAL_ALL_BS:PFCTree.View.Script
              id: 60704
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"AdhocAll"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 147,2860,130,55
              executeAtClientID: No
            END
            P_SIGNAL_1_BS:PFCTree.View.Script
              id: 60705
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Adhoc1"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 437,2860,130,55
              executeAtClientID: No
            END
            P_SIGNAL_2_BS:PFCTree.View.Script
              id: 60706
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Adhoc2"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 727,2860,130,55
              executeAtClientID: No
            END
            P_SIGNAL_3_BS:PFCTree.View.Script
              id: 60707
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Adhoc3"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 1017,2860,130,55
              executeAtClientID: No
            END
            P_SIGNAL_4_BS:PFCTree.View.Script
              id: 60708
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Adhoc4"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 1307,2860,130,55
              executeAtClientID: No
            END
            P_SIGNAL_5_BS:PFCTree.View.Script
              id: 60709
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Adhoc5"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 1597,2860,130,55
              executeAtClientID: No
            END
            P_SIGNAL_6_BS:PFCTree.View.Script
              id: 60710
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Adhoc6"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 1887,2860,130,55
              executeAtClientID: No
            END
            P_SIGNAL_7_BS:PFCTree.View.Script
              id: 60711
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Adhoc7"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 2177,2860,130,55
              executeAtClientID: No
            END
            P_SIGNAL_8_BS:PFCTree.View.Script
              id: 60712
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Adhoc8"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 2467,2860,130,55
              executeAtClientID: No
            END
            60704_60713:PFCTree.View.Link
              id: 60895
              fromID: 60704
              toID: 60713
              bounds: 205,2915,16,55
            END
            60705_60714:PFCTree.View.Link
              id: 60896
              fromID: 60705
              toID: 60714
              bounds: 495,2915,16,55
            END
            60706_60715:PFCTree.View.Link
              id: 60897
              fromID: 60706
              toID: 60715
              bounds: 785,2915,16,55
            END
            60707_60716:PFCTree.View.Link
              id: 60898
              fromID: 60707
              toID: 60716
              bounds: 1075,2915,16,55
            END
            60708_60717:PFCTree.View.Link
              id: 60899
              fromID: 60708
              toID: 60717
              bounds: 1365,2915,16,55
            END
            60709_60718:PFCTree.View.Link
              id: 60900
              fromID: 60709
              toID: 60718
              bounds: 1655,2915,16,55
            END
            60710_60719:PFCTree.View.Link
              id: 60901
              fromID: 60710
              toID: 60719
              bounds: 1945,2915,16,55
            END
            60711_60720:PFCTree.View.Link
              id: 60902
              fromID: 60711
              toID: 60720
              bounds: 2235,2915,16,55
            END
            60712_60721:PFCTree.View.Link
              id: 60903
              fromID: 60712
              toID: 60721
              bounds: 2525,2915,16,55
            END
            ParallelConvergent60713:PFCTree.View.ParallelConvergent
              id: 60713
              idEnd: 60687
              bounds: 147,2970,130,40
            END
            ParallelConvergent60714:PFCTree.View.ParallelConvergent
              id: 60714
              idEnd: 60689
              bounds: 437,2970,130,40
            END
            ParallelConvergent60715:PFCTree.View.ParallelConvergent
              id: 60715
              idEnd: 60691
              bounds: 727,2970,130,40
            END
            ParallelConvergent60716:PFCTree.View.ParallelConvergent
              id: 60716
              idEnd: 60693
              bounds: 1017,2970,130,40
            END
            ParallelConvergent60717:PFCTree.View.ParallelConvergent
              id: 60717
              idEnd: 60695
              bounds: 1307,2970,130,40
            END
            ParallelConvergent60718:PFCTree.View.ParallelConvergent
              id: 60718
              idEnd: 60697
              bounds: 1597,2970,130,40
            END
            ParallelConvergent60719:PFCTree.View.ParallelConvergent
              id: 60719
              idEnd: 60699
              bounds: 1887,2970,130,40
            END
            ParallelConvergent60720:PFCTree.View.ParallelConvergent
              id: 60720
              idEnd: 60701
              bounds: 2177,2970,130,40
            END
            ParallelConvergent60721:PFCTree.View.ParallelConvergent
              id: 60721
              idEnd: 60703
              bounds: 2467,2970,130,40
            END
            60713_60722:PFCTree.View.Link
              id: 60904
              fromID: 60713
              toID: 60722
              bounds: 205,3010,16,70
            END
            60714_60723:PFCTree.View.Link
              id: 60905
              fromID: 60714
              toID: 60723
              bounds: 495,3010,16,70
            END
            60715_60724:PFCTree.View.Link
              id: 60906
              fromID: 60715
              toID: 60724
              bounds: 785,3010,16,70
            END
            60716_60725:PFCTree.View.Link
              id: 60907
              fromID: 60716
              toID: 60725
              bounds: 1075,3010,16,70
            END
            60717_60726:PFCTree.View.Link
              id: 60908
              fromID: 60717
              toID: 60726
              bounds: 1365,3010,16,70
            END
            60718_60727:PFCTree.View.Link
              id: 60909
              fromID: 60718
              toID: 60727
              bounds: 1655,3010,16,70
            END
            60719_60728:PFCTree.View.Link
              id: 60910
              fromID: 60719
              toID: 60728
              bounds: 1945,3010,16,70
            END
            60720_60729:PFCTree.View.Link
              id: 60911
              fromID: 60720
              toID: 60729
              bounds: 2235,3010,16,70
            END
            60721_60730:PFCTree.View.Link
              id: 60912
              fromID: 60721
              toID: 60730
              bounds: 2525,3010,16,70
            END
            SerialConvergent60722:PFCTree.View.SerialConvergent
              id: 60722
              idEnd: 60677
              bounds: 2,3080,275,40
            END
            SerialConvergent60723:PFCTree.View.SerialConvergent
              id: 60723
              idEnd: 60678
              bounds: 292,3080,275,40
            END
            SerialConvergent60724:PFCTree.View.SerialConvergent
              id: 60724
              idEnd: 60679
              bounds: 582,3080,275,40
            END
            SerialConvergent60725:PFCTree.View.SerialConvergent
              id: 60725
              idEnd: 60680
              bounds: 872,3080,275,40
            END
            SerialConvergent60726:PFCTree.View.SerialConvergent
              id: 60726
              idEnd: 60681
              bounds: 1162,3080,275,40
            END
            SerialConvergent60727:PFCTree.View.SerialConvergent
              id: 60727
              idEnd: 60682
              bounds: 1452,3080,275,40
            END
            SerialConvergent60728:PFCTree.View.SerialConvergent
              id: 60728
              idEnd: 60683
              bounds: 1742,3080,275,40
            END
            SerialConvergent60729:PFCTree.View.SerialConvergent
              id: 60729
              idEnd: 60684
              bounds: 2032,3080,275,40
            END
            SerialConvergent60730:PFCTree.View.SerialConvergent
              id: 60730
              idEnd: 60685
              bounds: 2322,3080,275,40
            END
            60722_60731:PFCTree.View.Link
              id: 60913
              fromID: 60722
              toID: 60731
              bounds: 132,3120,16,70
            END
            60723_60731:PFCTree.View.Link
              id: 60914
              fromID: 60723
              toID: 60731
              bounds: 422,3120,16,70
            END
            60724_60731:PFCTree.View.Link
              id: 60915
              fromID: 60724
              toID: 60731
              bounds: 712,3120,16,70
            END
            60725_60731:PFCTree.View.Link
              id: 60916
              fromID: 60725
              toID: 60731
              bounds: 1002,3120,16,70
            END
            60726_60731:PFCTree.View.Link
              id: 60917
              fromID: 60726
              toID: 60731
              bounds: 1292,3120,16,70
            END
            60727_60731:PFCTree.View.Link
              id: 60918
              fromID: 60727
              toID: 60731
              bounds: 1582,3120,16,70
            END
            60728_60731:PFCTree.View.Link
              id: 60919
              fromID: 60728
              toID: 60731
              bounds: 1872,3120,16,70
            END
            60729_60731:PFCTree.View.Link
              id: 60920
              fromID: 60729
              toID: 60731
              bounds: 2162,3120,16,70
            END
            60730_60731:PFCTree.View.Link
              id: 60921
              fromID: 60730
              toID: 60731
              bounds: 2452,3120,16,70
            END
            SerialConvergent60731:PFCTree.View.SerialConvergent
              id: 60731
              idEnd: 60667
              bounds: 2,3190,2595,40
            END
            60731_60732:PFCTree.View.Link
              id: 60922
              fromID: 60731
              toID: 60732
              bounds: 1292,3230,16,105
            END
            SerialDivergent60732:PFCTree.View.SerialDivergent
              id: 60732
              idEnd: 60737
              bounds: 1162,3335,275,40
            END
            60732_60733:PFCTree.View.Link
              id: 60923
              fromID: 60732
              toID: 60733
              bounds: 1220,3375,16,35
            END
            60732_60734:PFCTree.View.Link
              id: 60924
              fromID: 60732
              toID: 60734
              bounds: 1365,3375,16,70
            END
            S_DISABLE_CHALL_PHASE_3_BS:PFCTree.View.Script
              id: 60733
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"DISABLE_CHALLENGE_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 1162,3410,130,55
              executeAtClientID: No
            END
            ParallelDivergent60734:PFCTree.View.ParallelDivergent
              id: 60734
              idEnd: 60736
              bounds: 1307,3445,130,40
            END
            60733_60737:PFCTree.View.Link
              id: 60925
              fromID: 60733
              toID: 60737
              bounds: 1220,3465,16,275
            END
            60734_60735:PFCTree.View.Link
              id: 60926
              fromID: 60734
              toID: 60735
              bounds: 1365,3485,16,35
            END
            P_DISABLE_CHALL_PHASE_3_BS:PFCTree.View.Script
              id: 60735
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"DISABLE_CHALLENGE_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 1307,3520,130,55
              executeAtClientID: No
            END
            60735_60736:PFCTree.View.Link
              id: 60927
              fromID: 60735
              toID: 60736
              bounds: 1365,3575,16,55
            END
            ParallelConvergent60736:PFCTree.View.ParallelConvergent
              id: 60736
              idEnd: 60734
              bounds: 1307,3630,130,40
            END
            60736_60737:PFCTree.View.Link
              id: 60928
              fromID: 60736
              toID: 60737
              bounds: 1365,3670,16,70
            END
            SerialConvergent60737:PFCTree.View.SerialConvergent
              id: 60737
              idEnd: 60732
              bounds: 1162,3740,275,40
            END
            60737_60744:PFCTree.View.Link
              id: 60965
              fromID: 60737
              toID: 60744
              bounds: 1292,3780,16,70
            END
            HOLD_CHALL_THREE_BP:PFCTree.View.Phase
              description: WORKFLOW DISABLE
              buildingBlockElementID: GENERIC.INSTRUCTION
              arguments:
                iSignature_Required;3;"Ok button";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;NULL;RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;NULL;Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_Print;1;NO;Print button visible;;;false;;
                iButton_Report;19;;Reports available for report button. If Null, report button is not visible;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iEquipment_Type;3;;Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;3;;Equipment Allocation Phase;;;true;;
                iStepAutoComplete;18;;PLC step that signals the completion of the automatic process;;;true;;
                iInstruction;19;{"THIS WILL BE DISABLED BY WORKFLOW"};Default Instructions;;;false;;
                iStep_Instruction;19;;Instructions for step;;;true;;
                iStep_Start;18;;Step range start;;;true;;
                iStep_End;18;;Step range end;;;true;;
                iForceViewPEL;1;NO;If Yes, PEL report must have been called to allow phase validation;;;false;;
                iEnforcedReportName;19;;The Report selected must be viewed by the user before sign off the Phase;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iLabelTemplate;3;;Label template to be printed;;=TRANSLATE ( "OVERALL.L_" + PARSE_LIST ( GET_CONFIG ( "<OVERALL.CONFIG_KEYS>LabelTemplateSpecialList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Disable
              autoStart: No
              usePhaseRet: Yes
              Converge: No
              id: 60744
              order: 0
              bounds: 1234,3850,130,83
            END
            60744_60745:PFCTree.View.ControlLink
              id: 60937
              fromID: 60744
              toID: 60745
              bounds: 1292,3933,16,43
            END
            EndNode60745:PFCTree.View.EndNode
              id: 60745
              bounds: 1234,3976,130,32
            END
          END
          bounds: 2,220,130,83
        END
        MANUAL_LC_OP:PFCTree.View.Operation
          description: MANUAL LINE CLEARANCE
          id: 59255
          order: 1
          design:
            BeginNode59256:PFCTree.View.BeginNode
              id: 59256
              bounds: 74,16,130,32
            END
            59256_68208:PFCTree.View.ControlLink
              id: 68209
              fromID: 59256
              toID: 68208
              bounds: 132,48,16,62
            END
            WAIT_M_LC_BS:PFCTree.View.Script
              id: 68208
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"SCH_LINECLEAR"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 74,110,130,55
              executeAtClientID: No
            END
            68208_59257:PFCTree.View.ControlLink
              id: 68210
              fromID: 68208
              toID: 59257
              bounds: 132,165,16,55
            END
            EXECUTE_LC_BP:PFCTree.View.Phase
              description: Line Clearance
              buildingBlockElementID: GENERIC.CHECKLIST
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Reason for Line Clearance selected";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Select reason for Line Clearance."};Instructions with a maximum of 3 lines;;;false;;
                iCheckList_Option;19;{"Rogue Found.","Engineering Event.","Other."};Check List lines to follow;;;false;;
                iCheckList_SigReq;19;{NULL,NULL,NULL};Required signature level for the option;;1 signature,2 signatures;true;;
                iMode;3;"One Check";Selection mode;;={ TRANSLATE("GENERIC.L_CheckListAllCheck"), TRANSLATE("GENERIC.L_CheckListOneCheck") };false;;
                iAlarm_Alarm;19;{"AlrmLC","AlrmLCSetup"};Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;{YES,YES};Block Validation if Alarm message diffrent than null;;;true;;
                iPartial_SignOff;1;NO;Indicates if is not necesary to check all elements at the same time;;;false;;
                iEnforceCheckListSequence;1;NO;Indicates if checking items according to the list sequence is enforced;;;false;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: No
              usePhaseRet: Yes
              Converge: No
              id: 59257
              order: 0
              bounds: 74,220,130,83
            END
            59257_63925:PFCTree.View.Link
              id: 63928
              fromID: 59257
              toID: 63925
              bounds: 132,303,16,62
            END
            SerialDivergent63925:PFCTree.View.SerialDivergent
              id: 63925
              idEnd: 63926
              bounds: 2,365,275,40
            END
            63925_63930:PFCTree.View.Link
              id: 63931
              fromID: 63925
              toID: 63930
              bounds: 60,405,16,35
            END
            63925_63938:PFCTree.View.Link
              id: 63941
              fromID: 63925
              toID: 63938
              bounds: 205,405,16,70
            END
            S_SET_ALRM_MAN_LC_BS:PFCTree.View.Script
              id: 63930
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AlrmLC"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Line Clearance in progress"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,440,130,55
              executeAtClientID: No
            END
            ParallelDivergent63938:PFCTree.View.ParallelDivergent
              id: 63938
              idEnd: 63939
              bounds: 147,475,130,40
            END
            63930_63926:PFCTree.View.Link
              id: 63932
              fromID: 63930
              toID: 63926
              bounds: 60,495,16,275
            END
            63938_63943:PFCTree.View.Link
              id: 63944
              fromID: 63938
              toID: 63943
              bounds: 205,515,16,35
            END
            P_SET_ALRM_MAN_LC_BS:PFCTree.View.Script
              id: 63943
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AlrmLC"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Line Clearance in progress"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,550,130,55
              executeAtClientID: No
            END
            63943_63939:PFCTree.View.Link
              id: 63945
              fromID: 63943
              toID: 63939
              bounds: 205,605,16,55
            END
            EndParallelDivergent63938:PFCTree.View.ParallelConvergent
              id: 63939
              idEnd: 63938
              bounds: 147,660,130,40
            END
            63939_63926:PFCTree.View.Link
              id: 63942
              fromID: 63939
              toID: 63926
              bounds: 205,700,16,70
            END
            EndSerialDivergent63925:PFCTree.View.SerialConvergent
              id: 63926
              idEnd: 63925
              bounds: 2,770,275,40
            END
            63926_63952:PFCTree.View.Link
              id: 63955
              fromID: 63926
              toID: 63952
              bounds: 132,810,16,105
            END
            SerialDivergent63952:PFCTree.View.SerialDivergent
              id: 63952
              idEnd: 63953
              bounds: 2,915,275,40
            END
            63952_63962:PFCTree.View.Link
              id: 63963
              fromID: 63952
              toID: 63962
              bounds: 60,955,16,35
            END
            63952_63957:PFCTree.View.Link
              id: 63960
              fromID: 63952
              toID: 63957
              bounds: 205,955,16,70
            END
            S_LC_HOLD_BS:PFCTree.View.Script
              id: 63962
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LineClearance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Hold"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 2,990,130,55
              executeAtClientID: No
            END
            ParallelDivergent63957:PFCTree.View.ParallelDivergent
              id: 63957
              idEnd: 63958
              bounds: 147,1025,130,40
            END
            63962_63953:PFCTree.View.Link
              id: 63964
              fromID: 63962
              toID: 63953
              bounds: 60,1045,16,275
            END
            63957_63968:PFCTree.View.Link
              id: 63969
              fromID: 63957
              toID: 63968
              bounds: 205,1065,16,35
            END
            P_LC_HOLD_BS:PFCTree.View.Script
              id: 63968
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LineClearance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Hold"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 147,1100,130,55
              executeAtClientID: No
            END
            63968_63958:PFCTree.View.Link
              id: 63970
              fromID: 63968
              toID: 63958
              bounds: 205,1155,16,55
            END
            EndParallelDivergent63957:PFCTree.View.ParallelConvergent
              id: 63958
              idEnd: 63957
              bounds: 147,1210,130,40
            END
            63958_63953:PFCTree.View.Link
              id: 63961
              fromID: 63958
              toID: 63953
              bounds: 205,1250,16,70
            END
            EndSerialDivergent63952:PFCTree.View.SerialConvergent
              id: 63953
              idEnd: 63952
              bounds: 2,1320,275,40
            END
            63953_59258:PFCTree.View.Link
              id: 63956
              fromID: 63953
              toID: 59258
              bounds: 132,1360,16,105
            END
            SerialDivergent59258:PFCTree.View.SerialDivergent
              id: 59258
              idEnd: 59263
              bounds: 2,1465,275,40
            END
            59258_59259:PFCTree.View.Link
              id: 59294
              fromID: 59258
              toID: 59259
              bounds: 60,1505,16,35
            END
            59258_59260:PFCTree.View.Link
              id: 59295
              fromID: 59258
              toID: 59260
              bounds: 205,1505,16,70
            END
            S_GET_REASON_BS:PFCTree.View.Script
              id: 59259
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"C5"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"EXECUTE_LC_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CHECKLIST\SELECTION"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,1540,130,55
              executeAtClientID: No
            END
            ParallelDivergent59260:PFCTree.View.ParallelDivergent
              id: 59260
              idEnd: 59262
              bounds: 147,1575,130,40
            END
            59259_59263:PFCTree.View.Link
              id: 59296
              fromID: 59259
              toID: 59263
              bounds: 60,1595,16,275
            END
            59260_59261:PFCTree.View.Link
              id: 59297
              fromID: 59260
              toID: 59261
              bounds: 205,1615,16,35
            END
            P_GET_REASON_BS:PFCTree.View.Script
              id: 59261
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"C5"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"EXECUTE_LC_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CHECKLIST\SELECTION"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,1650,130,55
              executeAtClientID: No
            END
            59261_59262:PFCTree.View.Link
              id: 59298
              fromID: 59261
              toID: 59262
              bounds: 205,1705,16,55
            END
            ParallelConvergent59262:PFCTree.View.ParallelConvergent
              id: 59262
              idEnd: 59260
              bounds: 147,1760,130,40
            END
            59262_59263:PFCTree.View.Link
              id: 59299
              fromID: 59262
              toID: 59263
              bounds: 205,1800,16,70
            END
            SerialConvergent59263:PFCTree.View.SerialConvergent
              id: 59263
              idEnd: 59258
              bounds: 2,1870,275,40
            END
            59263_59264:PFCTree.View.Link
              id: 59300
              fromID: 59263
              toID: 59264
              bounds: 132,1910,16,105
            END
            SerialDivergent59264:PFCTree.View.SerialDivergent
              id: 59264
              idEnd: 59269
              bounds: 2,2015,275,40
            END
            59264_59265:PFCTree.View.Link
              id: 59301
              fromID: 59264
              toID: 59265
              bounds: 60,2055,16,35
            END
            59264_59266:PFCTree.View.Link
              id: 59302
              fromID: 59264
              toID: 59266
              bounds: 205,2055,16,70
            END
            S_GET_ATYP_DESC_BS:PFCTree.View.Script
              id: 59265
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"C6"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"EXECUTE_LC_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CHECKLIST\CHECK_LIST[" +$$C5 + "]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,2090,130,55
              executeAtClientID: No
            END
            ParallelDivergent59266:PFCTree.View.ParallelDivergent
              id: 59266
              idEnd: 59268
              bounds: 147,2125,130,40
            END
            59265_59269:PFCTree.View.Link
              id: 59303
              fromID: 59265
              toID: 59269
              bounds: 60,2145,16,275
            END
            59266_59267:PFCTree.View.Link
              id: 59304
              fromID: 59266
              toID: 59267
              bounds: 205,2165,16,35
            END
            P_GET_ATYP_DESC_BS:PFCTree.View.Script
              id: 59267
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"C6"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"EXECUTE_LC_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CHECKLIST\CHECK_LIST[" +$$C5 + "]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,2200,130,55
              executeAtClientID: No
            END
            59267_59268:PFCTree.View.Link
              id: 59305
              fromID: 59267
              toID: 59268
              bounds: 205,2255,16,55
            END
            ParallelConvergent59268:PFCTree.View.ParallelConvergent
              id: 59268
              idEnd: 59266
              bounds: 147,2310,130,40
            END
            59268_59269:PFCTree.View.Link
              id: 59306
              fromID: 59268
              toID: 59269
              bounds: 205,2350,16,70
            END
            SerialConvergent59269:PFCTree.View.SerialConvergent
              id: 59269
              idEnd: 59264
              bounds: 2,2420,275,40
            END
            59269_63902:PFCTree.View.Link
              id: 63905
              fromID: 59269
              toID: 63902
              bounds: 132,2460,16,105
            END
            SerialDivergent63902:PFCTree.View.SerialDivergent
              id: 63902
              idEnd: 63903
              bounds: 2,2565,275,40
            END
            63902_63912:PFCTree.View.Link
              id: 63913
              fromID: 63902
              toID: 63912
              bounds: 60,2605,16,35
            END
            63902_63907:PFCTree.View.Link
              id: 63910
              fromID: 63902
              toID: 63907
              bounds: 205,2605,16,70
            END
            S_SET_LCTYPE_FULL_3_BS:PFCTree.View.Script
              id: 63912
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"varLCType"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Full"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,2640,130,55
              executeAtClientID: No
            END
            ParallelDivergent63907:PFCTree.View.ParallelDivergent
              id: 63907
              idEnd: 63908
              bounds: 147,2675,130,40
            END
            63912_63903:PFCTree.View.Link
              id: 63914
              fromID: 63912
              toID: 63903
              bounds: 60,2695,16,275
            END
            63907_63916:PFCTree.View.Link
              id: 63917
              fromID: 63907
              toID: 63916
              bounds: 205,2715,16,35
            END
            P_SET_LCTYPE_FULL_3_BS:PFCTree.View.Script
              id: 63916
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"varLCType"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Full"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,2750,130,55
              executeAtClientID: No
            END
            63916_63908:PFCTree.View.Link
              id: 63918
              fromID: 63916
              toID: 63908
              bounds: 205,2805,16,55
            END
            EndParallelDivergent63907:PFCTree.View.ParallelConvergent
              id: 63908
              idEnd: 63907
              bounds: 147,2860,130,40
            END
            63908_63903:PFCTree.View.Link
              id: 63911
              fromID: 63908
              toID: 63903
              bounds: 205,2900,16,70
            END
            EndSerialDivergent63902:PFCTree.View.SerialConvergent
              id: 63903
              idEnd: 63902
              bounds: 2,2970,275,40
            END
            63903_63919:PFCTree.View.Link
              id: 63920
              fromID: 63903
              toID: 63919
              bounds: 132,3010,16,70
            END
            LC_ATYPICAL_EVENT_BP:PFCTree.View.Phase
              description: Manual Atypical Event
              buildingBlockElementID: EVENT_MANAGEMENT.ATYPICAL_EVENT
              arguments:
                iEventDescription;19;{$$C6 <> NULL ? $$C6 : "ERROR SETTING DESCRIPTION"};Event Description when Automatic Atypical Event;;;true;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iPathWriteID;3;NULL;Path to write ATYPICAL_EVENT_ID characteristic;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 63919
              order: 0
              bounds: 74,3080,130,83
            END
            63919_59285:PFCTree.View.Link
              id: 63967
              fromID: 63919
              toID: 59285
              bounds: 132,3163,16,62
            END
            SerialDivergent59285:PFCTree.View.SerialDivergent
              id: 59285
              idEnd: 59290
              bounds: 2,3225,275,40
            END
            59285_59286:PFCTree.View.Link
              id: 59326
              fromID: 59285
              toID: 59286
              bounds: 60,3265,16,35
            END
            59285_59287:PFCTree.View.Link
              id: 59327
              fromID: 59285
              toID: 59287
              bounds: 205,3265,16,70
            END
            S_DISABLE_LC_PHASE_4_BS:PFCTree.View.Script
              id: 59286
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"DISABLE_LC_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,3300,130,55
              executeAtClientID: No
            END
            ParallelDivergent59287:PFCTree.View.ParallelDivergent
              id: 59287
              idEnd: 59289
              bounds: 147,3335,130,40
            END
            59286_59290:PFCTree.View.Link
              id: 59328
              fromID: 59286
              toID: 59290
              bounds: 60,3355,16,275
            END
            59287_59288:PFCTree.View.Link
              id: 59329
              fromID: 59287
              toID: 59288
              bounds: 205,3375,16,35
            END
            P_DISABLE_LC_PHASE_4_BS:PFCTree.View.Script
              id: 59288
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"DISABLE_LC_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 147,3410,130,55
              executeAtClientID: No
            END
            59288_59289:PFCTree.View.Link
              id: 59330
              fromID: 59288
              toID: 59289
              bounds: 205,3465,16,55
            END
            ParallelConvergent59289:PFCTree.View.ParallelConvergent
              id: 59289
              idEnd: 59287
              bounds: 147,3520,130,40
            END
            59289_59290:PFCTree.View.Link
              id: 59331
              fromID: 59289
              toID: 59290
              bounds: 205,3560,16,70
            END
            SerialConvergent59290:PFCTree.View.SerialConvergent
              id: 59290
              idEnd: 59285
              bounds: 2,3630,275,40
            END
            59290_59291:PFCTree.View.Link
              id: 59332
              fromID: 59290
              toID: 59291
              bounds: 132,3670,16,86
            END
            EndNode59291:PFCTree.View.EndNode
              id: 59291
              bounds: 74,3756,130,32
            END
          END
          bounds: 147,220,130,83
        END
        OVERPRINT_RUN_OP:PFCTree.View.Operation
          description: MANUAL OVERPRINT
          id: 21501
          order: 2
          design:
            BeginNode21502:PFCTree.View.BeginNode
              id: 21502
              bounds: 2,16,130,32
            END
            21502_68211:PFCTree.View.ControlLink
              id: 68212
              fromID: 21502
              toID: 68211
              bounds: 60,48,16,62
            END
            WAIT_OP_BS:PFCTree.View.Script
              id: 68211
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"SCH_OVERPRINT"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 2,110,130,55
              executeAtClientID: No
            END
            68211_21503:PFCTree.View.ControlLink
              id: 68213
              fromID: 68211
              toID: 21503
              bounds: 60,165,16,55
            END
            OVERPRINT_REVER_ATYP_BP:PFCTree.View.Phase
              description: Atypical Event Overprint Reverification
              buildingBlockElementID: EVENT_MANAGEMENT.ATYPICAL_EVENT
              arguments:
                iEventDescription;19;{"Overprint Re-setup/Verification"};Event Description when Automatic Atypical Event;;;true;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iPathWriteID;3;NULL;Path to write ATYPICAL_EVENT_ID characteristic;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: No
              usePhaseRet: Yes
              Converge: No
              id: 21503
              order: 0
              bounds: 2,220,130,83
            END
            21503_35152:PFCTree.View.ControlLink
              id: 35155
              fromID: 21503
              toID: 35152
              bounds: 60,303,16,27
            END
            OVERPRINT_RUN_REVER_BP:PFCTree.View.Phase
              description: Overprint Reverification
              buildingBlockElementID: MERPS_CHECK.PRINTED_COMPONENT
              arguments:
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Overprint verified";Signature meaning for Standard 1st level;;;true;;
                iSignature_Config_Permission;3;"OPERATOR";RUDO for signature for AdHoc screen;;=GET_UDOS();true;;
                iSignature_Config_Meaning;3;"Overprint AdHoc selected";Signature meaning for AdHoc screen;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_AdHoc;1;YES;If yes then Ad-Hoc button is displayed in overview screen;;;false;;
                iCreateAtypEventForAdhoc;1;YES;Indicates if an atypical event is created when a component is added with Ad-hoc screen;;;true;;
                iSetup_Display;19;;Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_SignatureRequired;19;;Required signature level for Setup component;;={"Ok button","1 signature","2 signatures"};true;;
                iSetup_SignaturePermission2ndLevel;19;;RUDO for second level signature for Setup component;;=GET_UDOS();true;;
                iSetup_SignatureMeaning2ndLevel;19;;Signature meaning for 2nd level signature for Setup component;;;true;;
                iSetup_ComponentType;19;;Setup Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_ComponentAction;19;;Setup Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_ComponentReason;19;;Setup Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentSetupReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_Instruction;19;;Setup Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_AdditionalInfo1Label;19;;Setup additional info label 1;;;true;;
                iSetup_AdditionalInfo1Value;19;;Setup additional info value 1;;;true;;
                iSetup_AdditionalInfo2Label;19;;Setup additional info label 2;;;true;;
                iSetup_AdditionalInfo2Value;19;;Setup additional info value 2;;;true;;
                iSetup_AdditionalInfo3Label;19;;Setup additional info label 3;;;true;;
                iSetup_AdditionalInfo3Value;19;;Setup additional info value 3;;;true;;
                iSetup_RequirePassFail;17;;Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
                iRun_Display;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintRunReverBp_iRun_Display : OverprintRunReverBp_iRun_Display;Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_SignatureRequired;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintRunReverBp_iRun_SignatureRequired : OverprintRunReverBp_iRun_SignatureRequired;Required signature level for Run component;;={"Ok button","1 signature","2 signatures"};true;;
                iRun_SignaturePermission2ndLevel;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintRunReverBp_iRun_SignaturePermission2ndLevel : OverprintRunReverBp_iRun_SignaturePermission2ndLevel;RUDO for second level signature for Run component;;=GET_UDOS();true;;
                iRun_SignatureMeaning2ndLevel;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintRunReverBp_iRun_SignatureMeaning2ndLevel : OverprintRunReverBp_iRun_SignatureMeaning2ndLevel;Signature meaning for 2nd level signature for Run component;;;true;;
                iRun_ComponentType;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintRunReverBp_iRun_ComponentType : OverprintRunReverBp_iRun_ComponentType;Run Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_ComponentAction;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintRunReverBp_iRun_ComponentAction : OverprintRunReverBp_iRun_ComponentAction;Run Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_ComponentReason;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintRunReverBp_iRun_ComponentReason : OverprintRunReverBp_iRun_ComponentReason;Run Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentRunReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_Instruction;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintRunReverBp_iRun_Instruction : OverprintRunReverBp_iRun_Instruction;Run Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_AdditionalInfo1Label;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintRunReverBp_iRun_AdditionalInfo1Label : OverprintRunReverBp_iRun_AdditionalInfo1Label;Run additional info label 1;;;true;;
                iRun_AdditionalInfo1Value;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintRunReverBp_iRun_AdditionalInfo1Value : OverprintRunReverBp_iRun_AdditionalInfo1Value;Run additional info value 1;;;true;;
                iRun_AdditionalInfo2Label;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintRunReverBp_iRun_AdditionalInfo2Label : OverprintRunReverBp_iRun_AdditionalInfo2Label;Run additional info label 2;;;true;;
                iRun_AdditionalInfo2Value;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintRunReverBp_iRun_AdditionalInfo2Value : OverprintRunReverBp_iRun_AdditionalInfo2Value;Run additional info value 2;;;true;;
                iRun_AdditionalInfo3Label;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintRunReverBp_iRun_AdditionalInfo3Label : OverprintRunReverBp_iRun_AdditionalInfo3Label;Run additional info label 3;;;true;;
                iRun_AdditionalInfo3Value;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintRunReverBp_iRun_AdditionalInfo3Value : OverprintRunReverBp_iRun_AdditionalInfo3Value;Run additional info value 3;;;true;;
                iRun_RequirePassFail;17;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintRunReverBp_iRun_RequirePassFail : OverprintRunReverBp_iRun_RequirePassFail;Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
                iMissingItemAllowed;1;YES;If yes then BP can be closed with missing Component;;;false;;
                iValidation_OrderStatus;3;;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;;Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;;Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;;Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 35152
              order: 0
              bounds: 2,330,130,83
            END
            35152_39540:PFCTree.View.Link
              id: 39543
              fromID: 35152
              toID: 39540
              bounds: 60,413,16,62
            END
            SerialDivergent39540:PFCTree.View.SerialDivergent
              id: 39540
              idEnd: 39541
              bounds: 2,475,130,40
            END
            39540_39560:PFCTree.View.Link
              id: 39561
              fromID: 39540
              toID: 39560
              bounds: 60,515,16,35
            END
            CHECK_SERIAL_3_BS:PFCTree.View.Script
              id: 39560
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;"AND";Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"vs_Serial","DecomChecks"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"Yes","Yes"};Global variable value;;;true;;
                iCheck_Condition;19;{"=","="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 2,550,130,55
              executeAtClientID: No
            END
            39560_43140:PFCTree.View.ControlLink
              id: 43141
              fromID: 39560
              toID: 43140
              bounds: 60,605,16,55
            END
            OVP_REVER_DECOMMISSION_BP:PFCTree.View.Phase
              description: Serialisation De-commissioning
              buildingBlockElementID: GENERIC.CHECKLIST
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"De-commissioning performed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Confirm De-commissioning activities have been completed."};Instructions with a maximum of 3 lines;;;false;;
                iCheckList_Option;19;{"In Batch Overprint Sample De-Commissioned"};Check List lines to follow;;;false;;
                iCheckList_SigReq;19;{NULL};Required signature level for the option;;1 signature,2 signatures;true;;
                iMode;3;"All Check";Selection mode;;={ TRANSLATE("GENERIC.L_CheckListAllCheck"), TRANSLATE("GENERIC.L_CheckListOneCheck") };false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
                iPartial_SignOff;1;NO;Indicates if is not necesary to check all elements at the same time;;;false;;
                iEnforceCheckListSequence;1;NO;Indicates if checking items according to the list sequence is enforced;;;false;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 43140
              order: 0
              bounds: 2,660,130,83
            END
            43140_39541:PFCTree.View.Link
              id: 43143
              fromID: 43140
              toID: 39541
              bounds: 60,743,16,27
            END
            EndSerialDivergent39540:PFCTree.View.SerialConvergent
              id: 39541
              idEnd: 39540
              bounds: 2,770,130,40
            END
            39541_21505:PFCTree.View.Link
              id: 39545
              fromID: 39541
              toID: 21505
              bounds: 60,810,16,86
            END
            EndNode21505:PFCTree.View.EndNode
              id: 21505
              bounds: 2,896,130,32
            END
          END
          bounds: 292,220,130,83
        END
        PHARMACODE_RUN_OP:PFCTree.View.Operation
          description: MANUAL PHARMACODE
          id: 21511
          order: 3
          design:
            BeginNode21512:PFCTree.View.BeginNode
              id: 21512
              bounds: 2,16,130,32
            END
            21512_68214:PFCTree.View.ControlLink
              id: 68215
              fromID: 21512
              toID: 68214
              bounds: 60,48,16,62
            END
            WAIT_PC_BS:PFCTree.View.Script
              id: 68214
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"SCH_PHARMACODE"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 2,110,130,55
              executeAtClientID: No
            END
            68214_21513:PFCTree.View.ControlLink
              id: 68216
              fromID: 68214
              toID: 21513
              bounds: 60,165,16,55
            END
            PHARMACODE_RESET_ATYP_BP:PFCTree.View.Phase
              description: Atypical Event Pharmacode Re Setup/Verification
              buildingBlockElementID: EVENT_MANAGEMENT.ATYPICAL_EVENT
              arguments:
                iEventDescription;19;{"Pharmacode ReSetup/ Verification"};Event Description when Automatic Atypical Event;;;true;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iPathWriteID;3;NULL;Path to write ATYPICAL_EVENT_ID characteristic;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: No
              usePhaseRet: Yes
              Converge: No
              id: 21513
              order: 0
              bounds: 2,220,130,83
            END
            21513_21514:PFCTree.View.ControlLink
              id: 21517
              fromID: 21513
              toID: 21514
              bounds: 60,303,16,27
            END
            PHARMACODE_RE_VER_BP:PFCTree.View.Phase
              description: Pharmacode Re Verification
              buildingBlockElementID: MERPS_CHECK.PRINTED_COMPONENT
              arguments:
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Pharmacode verified ";Signature meaning for Standard 1st level;;;true;;
                iSignature_Config_Permission;3;"OPERATOR";RUDO for signature for AdHoc screen;;=GET_UDOS();true;;
                iSignature_Config_Meaning;3;"AdHoc Pharmacode added";Signature meaning for AdHoc screen;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_AdHoc;1;YES;If yes then Ad-Hoc button is displayed in overview screen;;;false;;
                iCreateAtypEventForAdhoc;1;YES;Indicates if an atypical event is created when a component is added with Ad-hoc screen;;;true;;
                iSetup_Display;19;PharmacodeReVerBp_iSetup_Display;Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_SignatureRequired;19;PharmacodeReVerBp_iSetup_SignatureRequired;Required signature level for Setup component;;={"Ok button","1 signature","2 signatures"};true;;
                iSetup_SignaturePermission2ndLevel;19;PharmacodeReVerBp_iSetup_SignaturePermission2ndLevel;RUDO for second level signature for Setup component;;=GET_UDOS();true;;
                iSetup_SignatureMeaning2ndLevel;19;PharmacodeReVerBp_iSetup_SignatureMeaning2ndLevel;Signature meaning for 2nd level signature for Setup component;;;true;;
                iSetup_ComponentType;19;PharmacodeReVerBp_iSetup_ComponentType;Setup Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_ComponentAction;19;PharmacodeReVerBp_iSetup_ComponentAction;Setup Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_ComponentReason;19;PharmacodeReVerBp_iSetup_ComponentReason;Setup Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentSetupReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_Instruction;19;PharmacodeReVerBp_iSetup_Instruction;Setup Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_AdditionalInfo1Label;19;PharmacodeReVerBp_iSetup_AdditionalInfo1Label;Setup additional info label 1;;;true;;
                iSetup_AdditionalInfo1Value;19;PharmacodeReVerBp_iSetup_AdditionalInfo1Value;Setup additional info value 1;;;true;;
                iSetup_AdditionalInfo2Label;19;PharmacodeReVerBp_iSetup_AdditionalInfo2Label;Setup additional info label 2;;;true;;
                iSetup_AdditionalInfo2Value;19;PharmacodeReVerBp_iSetup_AdditionalInfo2Value;Setup additional info value 2;;;true;;
                iSetup_AdditionalInfo3Label;19;PharmacodeReVerBp_iSetup_AdditionalInfo3Label;Setup additional info label 3;;;true;;
                iSetup_AdditionalInfo3Value;19;PharmacodeReVerBp_iSetup_AdditionalInfo3Value;Setup additional info value 3;;;true;;
                iSetup_RequirePassFail;17;PharmacodeReVerBp_iSetup_RequirePassFail;Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
                iRun_Display;19;;Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_SignatureRequired;19;;Required signature level for Run component;;={"Ok button","1 signature","2 signatures"};true;;
                iRun_SignaturePermission2ndLevel;19;;RUDO for second level signature for Run component;;=GET_UDOS();true;;
                iRun_SignatureMeaning2ndLevel;19;;Signature meaning for 2nd level signature for Run component;;;true;;
                iRun_ComponentType;19;;Run Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_ComponentAction;19;;Run Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_ComponentReason;19;;Run Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentRunReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_Instruction;19;;Run Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_AdditionalInfo1Label;19;;Run additional info label 1;;;true;;
                iRun_AdditionalInfo1Value;19;;Run additional info value 1;;;true;;
                iRun_AdditionalInfo2Label;19;;Run additional info label 2;;;true;;
                iRun_AdditionalInfo2Value;19;;Run additional info value 2;;;true;;
                iRun_AdditionalInfo3Label;19;;Run additional info label 3;;;true;;
                iRun_AdditionalInfo3Value;19;;Run additional info value 3;;;true;;
                iRun_RequirePassFail;17;;Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
                iMissingItemAllowed;1;YES;If yes then BP can be closed with missing Component;;;false;;
                iValidation_OrderStatus;3;NULL;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;NULL;Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;NULL;Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;NULL;Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 21514
              order: 0
              bounds: 2,330,130,83
            END
            21514_21515:PFCTree.View.ControlLink
              id: 21518
              fromID: 21514
              toID: 21515
              bounds: 60,413,16,43
            END
            EndNode21515:PFCTree.View.EndNode
              id: 21515
              bounds: 2,456,130,32
            END
          END
          bounds: 437,220,130,83
        END
        60590_8139:PFCTree.View.ControlLink
          id: 60939
          fromID: 60590
          toID: 8139
          bounds: 60,303,16,27
        END
        59255_3930:PFCTree.View.ControlLink
          id: 59334
          fromID: 59255
          toID: 3930
          bounds: 205,303,16,27
        END
        21501_21521:PFCTree.View.ControlLink
          id: 21522
          fromID: 21501
          toID: 21521
          bounds: 350,303,16,27
        END
        21511_21524:PFCTree.View.ControlLink
          id: 21525
          fromID: 21511
          toID: 21524
          bounds: 495,303,16,27
        END
        R_ADHOC_CHALLENGE_BS:PFCTree.View.Script
          id: 8139
          buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
          arguments:
            iReactivateByDefault;1;YES;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
          end
          type: 2
          order: 0
          bounds: 2,330,130,55
          step: 60590
          executeAtClientID: No
        END
        R_MANUAL_LC_BS:PFCTree.View.Script
          id: 3930
          buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
          arguments:
            iReactivateByDefault;1;YES;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
          end
          type: 2
          order: 0
          bounds: 147,330,130,55
          step: 59255
          executeAtClientID: No
        END
        R_OVERPRINT_BS:PFCTree.View.Script
          id: 21521
          buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
          arguments:
            iReactivateByDefault;1;YES;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
          end
          type: 2
          order: 0
          bounds: 292,330,130,55
          step: 21501
          executeAtClientID: No
        END
        R_PHARMACODE_BS:PFCTree.View.Script
          id: 21524
          buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
          arguments:
            iReactivateByDefault;1;YES;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
          end
          type: 2
          order: 0
          bounds: 437,330,130,55
          step: 21511
          executeAtClientID: No
        END
        8139_3947:PFCTree.View.Link
          id: 8141
          fromID: 8139
          toID: 3947
          bounds: 60,385,16,55
        END
        3930_3947:PFCTree.View.Link
          id: 3956
          fromID: 3930
          toID: 3947
          bounds: 205,385,16,55
        END
        21521_3947:PFCTree.View.Link
          id: 21523
          fromID: 21521
          toID: 3947
          bounds: 350,385,16,55
        END
        21524_3947:PFCTree.View.Link
          id: 21526
          fromID: 21524
          toID: 3947
          bounds: 495,385,16,55
        END
        ParallelConvergent3947:PFCTree.View.ParallelConvergent
          id: 3947
          idEnd: 3908
          bounds: 2,440,565,40
        END
        3947_3948:PFCTree.View.Link
          id: 3958
          fromID: 3947
          toID: 3948
          bounds: 277,480,16,86
        END
        EndNode3948:PFCTree.View.EndNode
          id: 3948
          bounds: 219,566,130,32
        END
      END
      bounds: 437,550,130,83
    END
    P_LINE_CLEARANCE_UP:PFCTree.View.UnitProcedure
      description: LINE CLEARANCE
      id: 58742
      order: 3
      design:
        BeginNode58743:PFCTree.View.BeginNode
          id: 58743
          bounds: 147,16,130,32
        END
        58743_58744:PFCTree.View.ControlLink
          id: 59232
          fromID: 58743
          toID: 58744
          bounds: 205,48,16,62
        END
        LC_DISABLE_OP:PFCTree.View.Operation
          description: DISABLE LC PHASE
          id: 58744
          order: 0
          design:
            BeginNode58745:PFCTree.View.BeginNode
              id: 58745
              bounds: 74,16,130,32
            END
            58745_58746:PFCTree.View.ControlLink
              id: 58754
              fromID: 58745
              toID: 58746
              bounds: 132,48,16,62
            END
            DISABLE_LC_BP:PFCTree.View.Phase
              description: WORKFLOW DISABLE
              buildingBlockElementID: GENERIC.INSTRUCTION
              arguments:
                iSignature_Required;3;"Ok button";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;NULL;RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;NULL;Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_Print;1;NO;Print button visible;;;false;;
                iButton_Report;19;;Reports available for report button. If Null, report button is not visible;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iEquipment_Type;3;;Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;3;;Equipment Allocation Phase;;;true;;
                iStepAutoComplete;18;;PLC step that signals the completion of the automatic process;;;true;;
                iInstruction;19;{"THIS WILL BE DISABLED BY WORKFLOW"};Default Instructions;;;false;;
                iStep_Instruction;19;;Instructions for step;;;true;;
                iStep_Start;18;;Step range start;;;true;;
                iStep_End;18;;Step range end;;;true;;
                iForceViewPEL;1;NO;If Yes, PEL report must have been called to allow phase validation;;;false;;
                iEnforcedReportName;19;;The Report selected must be viewed by the user before sign off the Phase;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iLabelTemplate;3;;Label template to be printed;;=TRANSLATE ( "OVERALL.L_" + PARSE_LIST ( GET_CONFIG ( "<OVERALL.CONFIG_KEYS>LabelTemplateSpecialList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Disable
              autoStart: No
              usePhaseRet: Yes
              Converge: No
              id: 58746
              order: 0
              bounds: 74,110,130,83
            END
            58746_58747:PFCTree.View.Link
              id: 58755
              fromID: 58746
              toID: 58747
              bounds: 132,193,16,62
            END
            SerialDivergent58747:PFCTree.View.SerialDivergent
              id: 58747
              idEnd: 58752
              bounds: 2,255,275,40
            END
            58747_58748:PFCTree.View.Link
              id: 58756
              fromID: 58747
              toID: 58748
              bounds: 60,295,16,35
            END
            58747_58749:PFCTree.View.Link
              id: 58757
              fromID: 58747
              toID: 58749
              bounds: 205,295,16,70
            END
            S_SET_ALRM_LC_BS:PFCTree.View.Script
              id: 58748
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AlrmLC"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Line Clearance in progress"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,330,130,55
              executeAtClientID: No
            END
            ParallelDivergent58749:PFCTree.View.ParallelDivergent
              id: 58749
              idEnd: 58751
              bounds: 147,365,130,40
            END
            58748_58752:PFCTree.View.Link
              id: 58758
              fromID: 58748
              toID: 58752
              bounds: 60,385,16,275
            END
            58749_58750:PFCTree.View.Link
              id: 58759
              fromID: 58749
              toID: 58750
              bounds: 205,405,16,35
            END
            P_SET_ALRM_LC_BS:PFCTree.View.Script
              id: 58750
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AlrmLC"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Line Clearance in progress"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,440,130,55
              executeAtClientID: No
            END
            58750_58751:PFCTree.View.Link
              id: 58760
              fromID: 58750
              toID: 58751
              bounds: 205,495,16,55
            END
            ParallelConvergent58751:PFCTree.View.ParallelConvergent
              id: 58751
              idEnd: 58749
              bounds: 147,550,130,40
            END
            58751_58752:PFCTree.View.Link
              id: 58761
              fromID: 58751
              toID: 58752
              bounds: 205,590,16,70
            END
            SerialConvergent58752:PFCTree.View.SerialConvergent
              id: 58752
              idEnd: 58747
              bounds: 2,660,275,40
            END
            58752_64007:PFCTree.View.Link
              id: 64010
              fromID: 58752
              toID: 64007
              bounds: 132,700,16,105
            END
            SerialDivergent64007:PFCTree.View.SerialDivergent
              id: 64007
              idEnd: 64008
              bounds: 2,805,275,40
            END
            64007_64012:PFCTree.View.Link
              id: 64013
              fromID: 64007
              toID: 64012
              bounds: 60,845,16,35
            END
            64007_64015:PFCTree.View.Link
              id: 64018
              fromID: 64007
              toID: 64015
              bounds: 205,845,16,70
            END
            S_SET_L2_YES_BS:PFCTree.View.Script
              id: 64012
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"L2"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{Yes};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,880,130,55
              executeAtClientID: No
            END
            ParallelDivergent64015:PFCTree.View.ParallelDivergent
              id: 64015
              idEnd: 64016
              bounds: 147,915,130,40
            END
            64012_64008:PFCTree.View.Link
              id: 64014
              fromID: 64012
              toID: 64008
              bounds: 60,935,16,275
            END
            64015_64020:PFCTree.View.Link
              id: 64021
              fromID: 64015
              toID: 64020
              bounds: 205,955,16,35
            END
            P_SET_L2_YES_BS:PFCTree.View.Script
              id: 64020
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"L2"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{Yes};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,990,130,55
              executeAtClientID: No
            END
            64020_64016:PFCTree.View.Link
              id: 64022
              fromID: 64020
              toID: 64016
              bounds: 205,1045,16,55
            END
            EndParallelDivergent64015:PFCTree.View.ParallelConvergent
              id: 64016
              idEnd: 64015
              bounds: 147,1100,130,40
            END
            64016_64008:PFCTree.View.Link
              id: 64019
              fromID: 64016
              toID: 64008
              bounds: 205,1140,16,70
            END
            EndSerialDivergent64007:PFCTree.View.SerialConvergent
              id: 64008
              idEnd: 64007
              bounds: 2,1210,275,40
            END
            64008_58753:PFCTree.View.Link
              id: 64011
              fromID: 64008
              toID: 58753
              bounds: 132,1250,16,86
            END
            EndNode58753:PFCTree.View.EndNode
              id: 58753
              bounds: 74,1336,130,32
            END
          END
          bounds: 147,110,130,83
        END
        58744_58763:PFCTree.View.ControlLink
          id: 59233
          fromID: 58744
          toID: 58763
          bounds: 205,193,16,27
        END
        PRE_LC_CHECKS_OP:PFCTree.View.Operation
          description: Pre LC Checks OP
          id: 58763
          order: 0
          design:
            BeginNode58764:PFCTree.View.BeginNode
              id: 58764
              bounds: 2,16,130,32
            END
            58764_58765:PFCTree.View.ControlLink
              id: 58767
              fromID: 58764
              toID: 58765
              bounds: 60,48,16,62
            END
            PRE_LC_CHECKS_BP:PFCTree.View.Phase
              description: Pre Line Clearance Checks
              buildingBlockElementID: GENERIC.CHECKLIST
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Confirm all activities have been completed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Confirm all pre Line Clearance activities are completed"};Instructions with a maximum of 3 lines;;;false;;
                iCheckList_Option;19;{"Cycle equipment, belts and tracks checked","Print and Pharmacode batch specific details removed from equipment","Isolate equipment where required","Remove/open all identified guards","Line secured and line clearance signs in place","Line clearance tools available","Line clearance huddle performed by Team Manager (or designate)"};Check List lines to follow;;;false;;
                iCheckList_SigReq;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL};Required signature level for the option;;1 signature,2 signatures;true;;
                iMode;3;"All Check";Selection mode;;={ TRANSLATE("GENERIC.L_CheckListAllCheck"), TRANSLATE("GENERIC.L_CheckListOneCheck") };false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
                iPartial_SignOff;1;NO;Indicates if is not necesary to check all elements at the same time;;;false;;
                iEnforceCheckListSequence;1;NO;Indicates if checking items according to the list sequence is enforced;;;false;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 58765
              order: 0
              bounds: 2,110,130,83
            END
            58765_58766:PFCTree.View.ControlLink
              id: 58768
              fromID: 58765
              toID: 58766
              bounds: 60,193,16,43
            END
            EndNode58766:PFCTree.View.EndNode
              id: 58766
              bounds: 2,236,130,32
            END
          END
          bounds: 147,220,130,83
        END
        58763_58769:PFCTree.View.ControlLink
          id: 59234
          fromID: 58763
          toID: 58769
          bounds: 205,303,16,27
        END
        LC_TYPE_OP:PFCTree.View.Operation
          description: Line Clearance Type
          id: 58769
          order: 0
          design:
            BeginNode58770:PFCTree.View.BeginNode
              id: 58770
              bounds: 147,16,130,32
            END
            58770_58771:PFCTree.View.Link
              id: 58788
              fromID: 58770
              toID: 58771
              bounds: 205,48,16,97
            END
            SerialDivergent58771:PFCTree.View.SerialDivergent
              id: 58771
              idEnd: 58786
              bounds: 2,145,420,40
            END
            58771_58772:PFCTree.View.Link
              id: 58789
              fromID: 58771
              toID: 58772
              bounds: 132,185,16,35
            END
            58771_58773:PFCTree.View.Link
              id: 58790
              fromID: 58771
              toID: 58773
              bounds: 350,185,16,35
            END
            CHECK_LC_VAR_FULL_BS:PFCTree.View.Script
              id: 58772
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;NULL;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"varLCType"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"Full"};Global variable value;;;true;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 74,220,130,55
              executeAtClientID: No
            END
            LC_TYPE_BP:PFCTree.View.Phase
              description: Line Clearance Type
              buildingBlockElementID: EQUIPMENT_CHECKS.LINE_CLEARANCE_TYPE
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Line Clearance Type selected";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed this Phase;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iLCType_Name;19;{"Full Line Clearance","Partial LineClearance"};LC Type to be listed in the BP;;=STRUCT_GATHER(GET_GENERIC_LIST("type='LCTypeList'"), "[*].name");false;;
                iLCType_CreateAtypEvent;17;{NO,NO};If YES and that LC Type is selected, then an atypical event will be created;;;false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 58773
              order: 1
              bounds: 292,220,130,83
            END
            58772_58774:PFCTree.View.Link
              id: 58791
              fromID: 58772
              toID: 58774
              bounds: 132,275,16,90
            END
            58773_58786:PFCTree.View.Link
              id: 58792
              fromID: 58773
              toID: 58786
              bounds: 350,303,16,1127
            END
            SerialDivergent58774:PFCTree.View.SerialDivergent
              id: 58774
              idEnd: 58779
              bounds: 2,365,275,40
            END
            58774_58775:PFCTree.View.Link
              id: 58793
              fromID: 58774
              toID: 58775
              bounds: 60,405,16,35
            END
            58774_58776:PFCTree.View.Link
              id: 58794
              fromID: 58774
              toID: 58776
              bounds: 205,405,16,70
            END
            S_SET_LC_TYPE_1_BS:PFCTree.View.Script
              id: 58775
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_LCType","vs_LCReason"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Full Line Clearance",$$C6};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,440,130,55
              executeAtClientID: No
            END
            ParallelDivergent58776:PFCTree.View.ParallelDivergent
              id: 58776
              idEnd: 58778
              bounds: 147,475,130,40
            END
            58775_58779:PFCTree.View.Link
              id: 58795
              fromID: 58775
              toID: 58779
              bounds: 60,495,16,275
            END
            58776_58777:PFCTree.View.Link
              id: 58796
              fromID: 58776
              toID: 58777
              bounds: 205,515,16,35
            END
            P_SET_LC_TYPE_1_BS:PFCTree.View.Script
              id: 58777
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_LCType","vs_LCReason"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Full Line Clearance",$$C6};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,550,130,55
              executeAtClientID: No
            END
            58777_58778:PFCTree.View.Link
              id: 58797
              fromID: 58777
              toID: 58778
              bounds: 205,605,16,55
            END
            ParallelConvergent58778:PFCTree.View.ParallelConvergent
              id: 58778
              idEnd: 58776
              bounds: 147,660,130,40
            END
            58778_58779:PFCTree.View.Link
              id: 58798
              fromID: 58778
              toID: 58779
              bounds: 205,700,16,70
            END
            SerialConvergent58779:PFCTree.View.SerialConvergent
              id: 58779
              idEnd: 58774
              bounds: 2,770,275,40
            END
            58779_58780:PFCTree.View.Link
              id: 58799
              fromID: 58779
              toID: 58780
              bounds: 132,810,16,105
            END
            SerialDivergent58780:PFCTree.View.SerialDivergent
              id: 58780
              idEnd: 58785
              bounds: 2,915,275,40
            END
            58780_58781:PFCTree.View.Link
              id: 58800
              fromID: 58780
              toID: 58781
              bounds: 60,955,16,35
            END
            58780_58782:PFCTree.View.Link
              id: 58801
              fromID: 58780
              toID: 58782
              bounds: 205,955,16,70
            END
            S_LC_EVENT_OPEN_BS:PFCTree.View.Script
              id: 58781
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.CREATE_CLOSE_EVENT
              arguments:
                iMode;3;"Open";Script mode: Open, close or sign-off event;;Open,Close,Sign-off;false;;
                iEquipment_Type;19;NULL;Equipment types;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));true;;
                iEquipment_AllocationPhase;19;NULL;EquipmentsAllocation Phases;;;true;;
                iEquipment_Id;19;;Equipment IDs to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iDescription;3;"Full Line Clearance";Description of event. Required for open mode. Should it blank in close mode;;;true;;
                iComment;19;;Comments for the event. Should it blank in open mode. Optional for close mode.;;;true;;
                iSubType_Monitoring;3;;Subtype for Monitoring event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMonitoring" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_AdditionalProdActivities;3;;Subtype for AdditionalProdActivities event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventAdditionalProdActivities" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineClearance;3;"All Zones";Subtype for LineClearance event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineClearance" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Engineering;3;NULL;Subtype for Engineering event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEngineering" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Cleaning;3;;Subtype for Cleaning event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventCleaning" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_NonCommProd;3;;Subtype for NonCommProd event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventNonCommProd" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Training;3;;Subtype for Training event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventTraining" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Equipment;3;;Subtype for Equipment event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEquipment" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Movement;3;;Subtype for Movement event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMovement" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Status;3;;Subtype for Status event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventStatus" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Production;3;NULL;Subtype for Production event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventProduction" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineChange;3;;Subtype for LineChange event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineChange" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Intervention;3;;Subtype for Intervention event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventIntervention" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iReset_LCType;1;NO;When value is YES, line clearance global variables are set to NULL;;;false;;
                iMerpsRef;3;;Merps ref field;;;true;;
                iChangeControlRef;3;;Change control ref field;;;true;;
                iUserId;3;;If it is defined uses this user for creating/closing the event;;;true;;
                iOpenEvent_RPLName;3;;RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iOpenEvent_Script;3;;Only used at Close mode. If it is defined, then it closes the event opened by the script indicated in this argument.;;;true;;
                iCreateEventOnlyInProcessCell;1;NO;Only used at Open mode and if event is created for the entire process cell. If it is YES, event isn't created in the Mobile Equipment log books;;;false;;
                iApprovalReq;1;;Only used at Close mode. When value is not NULL (YES or NO), then it overrides the approval configuration for that event type;;;true;;
              end
              type: 0
              order: 0
              bounds: 2,990,130,55
              executeAtClientID: No
            END
            ParallelDivergent58782:PFCTree.View.ParallelDivergent
              id: 58782
              idEnd: 58784
              bounds: 147,1025,130,40
            END
            58781_58785:PFCTree.View.Link
              id: 58802
              fromID: 58781
              toID: 58785
              bounds: 60,1045,16,275
            END
            58782_58783:PFCTree.View.Link
              id: 58803
              fromID: 58782
              toID: 58783
              bounds: 205,1065,16,35
            END
            P_LC_EVENT_OPEN_BS:PFCTree.View.Script
              id: 58783
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.CREATE_CLOSE_EVENT
              arguments:
                iMode;3;"Open";Script mode: Open, close or sign-off event;;Open,Close,Sign-off;false;;
                iEquipment_Type;19;NULL;Equipment types;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));true;;
                iEquipment_AllocationPhase;19;NULL;EquipmentsAllocation Phases;;;true;;
                iEquipment_Id;19;;Equipment IDs to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iDescription;3;"Full Line Clearance";Description of event. Required for open mode. Should it blank in close mode;;;true;;
                iComment;19;;Comments for the event. Should it blank in open mode. Optional for close mode.;;;true;;
                iSubType_Monitoring;3;;Subtype for Monitoring event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMonitoring" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_AdditionalProdActivities;3;;Subtype for AdditionalProdActivities event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventAdditionalProdActivities" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineClearance;3;"All Zones";Subtype for LineClearance event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineClearance" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Engineering;3;NULL;Subtype for Engineering event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEngineering" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Cleaning;3;;Subtype for Cleaning event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventCleaning" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_NonCommProd;3;;Subtype for NonCommProd event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventNonCommProd" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Training;3;;Subtype for Training event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventTraining" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Equipment;3;;Subtype for Equipment event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEquipment" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Movement;3;;Subtype for Movement event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMovement" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Status;3;;Subtype for Status event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventStatus" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Production;3;NULL;Subtype for Production event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventProduction" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineChange;3;;Subtype for LineChange event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineChange" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Intervention;3;;Subtype for Intervention event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventIntervention" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iReset_LCType;1;NO;When value is YES, line clearance global variables are set to NULL;;;false;;
                iMerpsRef;3;;Merps ref field;;;true;;
                iChangeControlRef;3;;Change control ref field;;;true;;
                iUserId;3;;If it is defined uses this user for creating/closing the event;;;true;;
                iOpenEvent_RPLName;3;;RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iOpenEvent_Script;3;;Only used at Close mode. If it is defined, then it closes the event opened by the script indicated in this argument.;;;true;;
                iCreateEventOnlyInProcessCell;1;NO;Only used at Open mode and if event is created for the entire process cell. If it is YES, event isn't created in the Mobile Equipment log books;;;false;;
                iApprovalReq;1;;Only used at Close mode. When value is not NULL (YES or NO), then it overrides the approval configuration for that event type;;;true;;
              end
              type: 0
              order: 0
              bounds: 147,1100,130,55
              executeAtClientID: No
            END
            58783_58784:PFCTree.View.Link
              id: 58804
              fromID: 58783
              toID: 58784
              bounds: 205,1155,16,55
            END
            ParallelConvergent58784:PFCTree.View.ParallelConvergent
              id: 58784
              idEnd: 58782
              bounds: 147,1210,130,40
            END
            58784_58785:PFCTree.View.Link
              id: 58805
              fromID: 58784
              toID: 58785
              bounds: 205,1250,16,70
            END
            SerialConvergent58785:PFCTree.View.SerialConvergent
              id: 58785
              idEnd: 58780
              bounds: 2,1320,275,40
            END
            58785_58786:PFCTree.View.Link
              id: 58806
              fromID: 58785
              toID: 58786
              bounds: 132,1360,16,70
            END
            SerialConvergent58786:PFCTree.View.SerialConvergent
              id: 58786
              idEnd: 58771
              bounds: 2,1430,420,40
            END
            58786_58787:PFCTree.View.Link
              id: 58807
              fromID: 58786
              toID: 58787
              bounds: 205,1470,16,86
            END
            EndNode58787:PFCTree.View.EndNode
              id: 58787
              bounds: 147,1556,130,32
            END
          END
          bounds: 147,330,130,83
        END
        58769_58808:PFCTree.View.Link
          id: 59235
          fromID: 58769
          toID: 58808
          bounds: 205,413,16,62
        END
        ParallelDivergent58808:PFCTree.View.ParallelDivergent
          id: 58808
          idEnd: 59176
          bounds: 2,475,420,40
        END
        58808_58809:PFCTree.View.Link
          id: 59236
          fromID: 58808
          toID: 58809
          bounds: 60,515,16,35
        END
        58808_58901:PFCTree.View.Link
          id: 59237
          fromID: 58808
          toID: 58901
          bounds: 277,515,16,70
        END
        LC_MONITOR_OP:PFCTree.View.Operation
          description: Line Clearance Monitor
          id: 58809
          order: 0
          design:
            BeginNode58810:PFCTree.View.BeginNode
              id: 58810
              bounds: 0,0,200,70
            END
            58810_58811:PFCTree.View.ControlLink
              id: 58853
              fromID: 58810
              toID: 58811
              bounds: 98,70,6,10
            END
            CHECK_LC_ERROR_BS:PFCTree.View.Script
              id: 58811
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"LCError_Flag"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{Yes};Global variable value;;;true;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,80,200,7
              executeAtClientID: No
            END
            58811_58812:PFCTree.View.Link
              id: 58854
              fromID: 58811
              toID: 58812
              bounds: 98,87,6,73
            END
            SerialDivergent58812:PFCTree.View.SerialDivergent
              id: 58812
              idEnd: 58851
              bounds: 0,160,415,7
            END
            58812_58813:PFCTree.View.Link
              id: 58855
              fromID: 58812
              toID: 58813
              bounds: 98,167,6,73
            END
            LC_FAST_DISABLE_BS:PFCTree.View.Script
              id: 58813
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"LCError_Flag"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{Yes};Global variable value;;;true;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,240,200,7
              executeAtClientID: No
            END
            58813_58814:PFCTree.View.Link
              id: 58856
              fromID: 58813
              toID: 58814
              bounds: 98,247,6,73
            END
            SerialDivergent58814:PFCTree.View.SerialDivergent
              id: 58814
              idEnd: 58819
              bounds: 0,320,415,7
            END
            58814_58815:PFCTree.View.Link
              id: 58857
              fromID: 58814
              toID: 58815
              bounds: 98,327,6,73
            END
            58814_58816:PFCTree.View.Link
              id: 58858
              fromID: 58814
              toID: 58816
              bounds: 313,327,6,73
            END
            S_SET_ALRM_1_BS:PFCTree.View.Script
              id: 58815
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"Alrm1"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Line Clearance Error - Cancel from this screen"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,400,200,7
              executeAtClientID: No
            END
            ParallelDivergent58816:PFCTree.View.ParallelDivergent
              id: 58816
              idEnd: 58818
              bounds: 215,400,200,7
            END
            58815_58819:PFCTree.View.Link
              id: 58859
              fromID: 58815
              toID: 58819
              bounds: 98,407,6,233
            END
            58816_58817:PFCTree.View.Link
              id: 58860
              fromID: 58816
              toID: 58817
              bounds: 313,407,6,73
            END
            P_SET_ALRM_1_BS:PFCTree.View.Script
              id: 58817
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"Alrm1"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Line Clearance Error - Cancel from this screen"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,480,200,7
              executeAtClientID: No
            END
            58817_58818:PFCTree.View.Link
              id: 58861
              fromID: 58817
              toID: 58818
              bounds: 313,487,6,73
            END
            ParallelConvergent58818:PFCTree.View.ParallelConvergent
              id: 58818
              idEnd: 58816
              bounds: 215,560,200,7
            END
            58818_58819:PFCTree.View.Link
              id: 58862
              fromID: 58818
              toID: 58819
              bounds: 313,567,6,73
            END
            SerialConvergent58819:PFCTree.View.SerialConvergent
              id: 58819
              idEnd: 58814
              bounds: 0,640,415,7
            END
            58819_58820:PFCTree.View.Link
              id: 58863
              fromID: 58819
              toID: 58820
              bounds: 98,647,6,73
            END
            LC_EVENT_CLOSE_1_BS:PFCTree.View.Script
              id: 58820
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.CREATE_CLOSE_EVENT
              arguments:
                iMode;3;"Close";Script mode: Open, close or sign-off event;;Open,Close,Sign-off;false;;
                iEquipment_Type;19;NULL;Equipment types;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));true;;
                iEquipment_AllocationPhase;19;NULL;EquipmentsAllocation Phases;;;true;;
                iEquipment_Id;19;;Equipment IDs to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iDescription;3;NULL;Description of event. Required for open mode. Should it blank in close mode;;;true;;
                iComment;19;;Comments for the event. Should it blank in open mode. Optional for close mode.;;;true;;
                iSubType_Monitoring;3;;Subtype for Monitoring event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMonitoring" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_AdditionalProdActivities;3;;Subtype for AdditionalProdActivities event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventAdditionalProdActivities" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineClearance;3;"All Zones";Subtype for LineClearance event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineClearance" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Engineering;3;NULL;Subtype for Engineering event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEngineering" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Cleaning;3;;Subtype for Cleaning event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventCleaning" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_NonCommProd;3;;Subtype for NonCommProd event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventNonCommProd" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Training;3;;Subtype for Training event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventTraining" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Equipment;3;;Subtype for Equipment event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEquipment" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Movement;3;;Subtype for Movement event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMovement" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Status;3;;Subtype for Status event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventStatus" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Production;3;NULL;Subtype for Production event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventProduction" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineChange;3;;Subtype for LineChange event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineChange" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Intervention;3;;Subtype for Intervention event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventIntervention" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iReset_LCType;1;YES;When value is YES, line clearance global variables are set to NULL;;;false;;
                iMerpsRef;3;;Merps ref field;;;true;;
                iChangeControlRef;3;;Change control ref field;;;true;;
                iUserId;3;;If it is defined uses this user for creating/closing the event;;;true;;
                iOpenEvent_RPLName;3;;RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iOpenEvent_Script;3;;Only used at Close mode. If it is defined, then it closes the event opened by the script indicated in this argument.;;;true;;
                iCreateEventOnlyInProcessCell;1;NO;Only used at Open mode and if event is created for the entire process cell. If it is YES, event isn't created in the Mobile Equipment log books;;;false;;
                iApprovalReq;1;;Only used at Close mode. When value is not NULL (YES or NO), then it overrides the approval configuration for that event type;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,720,200,7
              executeAtClientID: No
            END
            58820_58821:PFCTree.View.Link
              id: 58864
              fromID: 58820
              toID: 58821
              bounds: 98,727,6,73
            END
            SerialDivergent58821:PFCTree.View.SerialDivergent
              id: 58821
              idEnd: 58837
              bounds: 0,800,845,7
            END
            58821_58822:PFCTree.View.Link
              id: 58865
              fromID: 58821
              toID: 58822
              bounds: 98,807,6,73
            END
            58821_58823:PFCTree.View.Link
              id: 58866
              fromID: 58821
              toID: 58823
              bounds: 635,807,6,73
            END
            CHECK_FOR_LC_FAILURE2_BS:PFCTree.View.Script
              id: 58822
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;"OR";Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"LC_CLEAR_ZONE1_BP","LC_CLEAR_ZONE2_BP","LC_CLEAN_ZONE1_BP","LC_CLEAN_ZONE2_BP","LC_CHECK_ZONE1_BP","LC_CHECK_ZONE1_BP","LC_CHECK_ZONE2_BP","LC_CHECK_ZONE2_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"LINE_CLEARANCE_CHECKPOINT\RESULT[3]","LINE_CLEARANCE_CHECKPOINT\RESULT[3]","LINE_CLEARANCE_CHECKPOINT\RESULT[3]","LINE_CLEARANCE_CHECKPOINT\RESULT[3]","LINE_CLEARANCE_CHECKPOINT\RESULT[3]","LINE_CLEARANCE_CHECKPOINT\RESULT[4]","LINE_CLEARANCE_CHECKPOINT\RESULT[3]","LINE_CLEARANCE_CHECKPOINT\RESULT[4]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{"No","No","No","No","No","No","No","No"};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"=","=","=","=","=","=","=","="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,880,200,7
              executeAtClientID: No
            END
            SerialDivergent58823:PFCTree.View.SerialDivergent
              id: 58823
              idEnd: 58833
              bounds: 430,880,415,7
            END
            58822_58824:PFCTree.View.Link
              id: 58867
              fromID: 58822
              toID: 58824
              bounds: 98,887,6,73
            END
            58823_58825:PFCTree.View.Link
              id: 58868
              fromID: 58823
              toID: 58825
              bounds: 528,887,6,73
            END
            58823_58826:PFCTree.View.Link
              id: 58869
              fromID: 58823
              toID: 58826
              bounds: 743,887,6,73
            END
            SerialDivergent58824:PFCTree.View.SerialDivergent
              id: 58824
              idEnd: 58834
              bounds: 0,960,415,7
            END
            S_SET_LC_TYPE_FULL_BS:PFCTree.View.Script
              id: 58825
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_LCType","vs_LCReason"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Full Line Clearance","Line Clearance Error"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 430,960,200,7
              executeAtClientID: No
            END
            ParallelDivergent58826:PFCTree.View.ParallelDivergent
              id: 58826
              idEnd: 58831
              bounds: 645,960,200,7
            END
            58824_58827:PFCTree.View.Link
              id: 58870
              fromID: 58824
              toID: 58827
              bounds: 98,967,6,73
            END
            58824_58828:PFCTree.View.Link
              id: 58871
              fromID: 58824
              toID: 58828
              bounds: 313,967,6,73
            END
            58825_58833:PFCTree.View.Link
              id: 58872
              fromID: 58825
              toID: 58833
              bounds: 528,967,6,233
            END
            58826_58829:PFCTree.View.Link
              id: 58873
              fromID: 58826
              toID: 58829
              bounds: 743,967,6,73
            END
            S_SET_LC_TYPE_ADHOC_BS:PFCTree.View.Script
              id: 58827
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_LCType","vs_LCReason"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Ad-Hoc","Line Clearance Error"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,1040,200,7
              executeAtClientID: No
            END
            ParallelDivergent58828:PFCTree.View.ParallelDivergent
              id: 58828
              idEnd: 58832
              bounds: 215,1040,200,7
            END
            P_SET_LC_TYPE_FULL_BS:PFCTree.View.Script
              id: 58829
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_LCType","vs_LCReason"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Full Line Clearance","Line Clearance Error"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 645,1040,200,7
              executeAtClientID: No
            END
            58827_58834:PFCTree.View.Link
              id: 58874
              fromID: 58827
              toID: 58834
              bounds: 98,1047,6,233
            END
            58828_58830:PFCTree.View.Link
              id: 58875
              fromID: 58828
              toID: 58830
              bounds: 313,1047,6,73
            END
            58829_58831:PFCTree.View.Link
              id: 58876
              fromID: 58829
              toID: 58831
              bounds: 743,1047,6,73
            END
            P_SET_LC_TYPE_ADHOC_BS:PFCTree.View.Script
              id: 58830
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_LCType","vs_LCReason"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Ad-Hoc","Line Clearance Error"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,1120,200,7
              executeAtClientID: No
            END
            ParallelConvergent58831:PFCTree.View.ParallelConvergent
              id: 58831
              idEnd: 58826
              bounds: 645,1120,200,7
            END
            58830_58832:PFCTree.View.Link
              id: 58877
              fromID: 58830
              toID: 58832
              bounds: 313,1127,6,73
            END
            58831_58833:PFCTree.View.Link
              id: 58878
              fromID: 58831
              toID: 58833
              bounds: 743,1127,6,73
            END
            ParallelConvergent58832:PFCTree.View.ParallelConvergent
              id: 58832
              idEnd: 58828
              bounds: 215,1200,200,7
            END
            SerialConvergent58833:PFCTree.View.SerialConvergent
              id: 58833
              idEnd: 58823
              bounds: 430,1200,415,7
            END
            58832_58834:PFCTree.View.Link
              id: 58879
              fromID: 58832
              toID: 58834
              bounds: 313,1207,6,73
            END
            58833_67523:PFCTree.View.Link
              id: 67526
              fromID: 58833
              toID: 67523
              bounds: 635,1207,6,73
            END
            SerialConvergent58834:PFCTree.View.SerialConvergent
              id: 58834
              idEnd: 58824
              bounds: 0,1280,415,7
            END
            SerialDivergent67523:PFCTree.View.SerialDivergent
              id: 67523
              idEnd: 67524
              bounds: 430,1280,415,7
            END
            58834_67506:PFCTree.View.Link
              id: 67509
              fromID: 58834
              toID: 67506
              bounds: 205,1287,6,73
            END
            67523_67529:PFCTree.View.Link
              id: 67530
              fromID: 67523
              toID: 67529
              bounds: 528,1287,6,73
            END
            67523_67532:PFCTree.View.Link
              id: 67535
              fromID: 67523
              toID: 67532
              bounds: 743,1287,6,73
            END
            SerialDivergent67506:PFCTree.View.SerialDivergent
              id: 67506
              idEnd: 67507
              bounds: 0,1360,415,7
            END
            S_LC_EVENT_REOPEN_1_BS:PFCTree.View.Script
              id: 67529
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.CREATE_CLOSE_EVENT
              arguments:
                iMode;3;"Open";Script mode: Open, close or sign-off event;;Open,Close,Sign-off;false;;
                iEquipment_Type;19;NULL;Equipment types;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));true;;
                iEquipment_AllocationPhase;19;NULL;EquipmentsAllocation Phases;;;true;;
                iEquipment_Id;19;;Equipment IDs to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iDescription;3;"Full Line Clearance";Description of event. Required for open mode. Should it blank in close mode;;;true;;
                iComment;19;;Comments for the event. Should it blank in open mode. Optional for close mode.;;;true;;
                iSubType_Monitoring;3;;Subtype for Monitoring event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMonitoring" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_AdditionalProdActivities;3;;Subtype for AdditionalProdActivities event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventAdditionalProdActivities" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineClearance;3;"All Zones";Subtype for LineClearance event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineClearance" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Engineering;3;NULL;Subtype for Engineering event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEngineering" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Cleaning;3;;Subtype for Cleaning event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventCleaning" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_NonCommProd;3;;Subtype for NonCommProd event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventNonCommProd" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Training;3;;Subtype for Training event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventTraining" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Equipment;3;;Subtype for Equipment event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEquipment" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Movement;3;;Subtype for Movement event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMovement" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Status;3;;Subtype for Status event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventStatus" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Production;3;NULL;Subtype for Production event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventProduction" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineChange;3;;Subtype for LineChange event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineChange" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Intervention;3;;Subtype for Intervention event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventIntervention" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iReset_LCType;1;NO;When value is YES, line clearance global variables are set to NULL;;;false;;
                iMerpsRef;3;;Merps ref field;;;true;;
                iChangeControlRef;3;;Change control ref field;;;true;;
                iUserId;3;;If it is defined uses this user for creating/closing the event;;;true;;
                iOpenEvent_RPLName;3;;RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iOpenEvent_Script;3;;Only used at Close mode. If it is defined, then it closes the event opened by the script indicated in this argument.;;;true;;
                iCreateEventOnlyInProcessCell;1;NO;Only used at Open mode and if event is created for the entire process cell. If it is YES, event isn't created in the Mobile Equipment log books;;;false;;
                iApprovalReq;1;;Only used at Close mode. When value is not NULL (YES or NO), then it overrides the approval configuration for that event type;;;true;;
              end
              type: 0
              order: 0
              bounds: 430,1360,200,7
              executeAtClientID: No
            END
            ParallelDivergent67532:PFCTree.View.ParallelDivergent
              id: 67532
              idEnd: 67533
              bounds: 645,1360,200,7
            END
            67506_67512:PFCTree.View.Link
              id: 67513
              fromID: 67506
              toID: 67512
              bounds: 98,1367,6,73
            END
            67506_67515:PFCTree.View.Link
              id: 67518
              fromID: 67506
              toID: 67515
              bounds: 313,1367,6,73
            END
            67529_67524:PFCTree.View.Link
              id: 67531
              fromID: 67529
              toID: 67524
              bounds: 528,1367,6,233
            END
            67532_67537:PFCTree.View.Link
              id: 67538
              fromID: 67532
              toID: 67537
              bounds: 743,1367,6,73
            END
            S_LC_EVENT_REOPEN_2_BS:PFCTree.View.Script
              id: 67512
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.CREATE_CLOSE_EVENT
              arguments:
                iMode;3;"Open";Script mode: Open, close or sign-off event;;Open,Close,Sign-off;false;;
                iEquipment_Type;19;NULL;Equipment types;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));true;;
                iEquipment_AllocationPhase;19;NULL;EquipmentsAllocation Phases;;;true;;
                iEquipment_Id;19;;Equipment IDs to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iDescription;3;"Adhoc Line Clearance";Description of event. Required for open mode. Should it blank in close mode;;;true;;
                iComment;19;;Comments for the event. Should it blank in open mode. Optional for close mode.;;;true;;
                iSubType_Monitoring;3;;Subtype for Monitoring event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMonitoring" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_AdditionalProdActivities;3;;Subtype for AdditionalProdActivities event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventAdditionalProdActivities" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineClearance;3;"All Zones";Subtype for LineClearance event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineClearance" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Engineering;3;NULL;Subtype for Engineering event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEngineering" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Cleaning;3;;Subtype for Cleaning event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventCleaning" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_NonCommProd;3;;Subtype for NonCommProd event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventNonCommProd" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Training;3;;Subtype for Training event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventTraining" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Equipment;3;;Subtype for Equipment event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEquipment" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Movement;3;;Subtype for Movement event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMovement" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Status;3;;Subtype for Status event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventStatus" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Production;3;NULL;Subtype for Production event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventProduction" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineChange;3;;Subtype for LineChange event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineChange" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Intervention;3;;Subtype for Intervention event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventIntervention" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iReset_LCType;1;NO;When value is YES, line clearance global variables are set to NULL;;;false;;
                iMerpsRef;3;;Merps ref field;;;true;;
                iChangeControlRef;3;;Change control ref field;;;true;;
                iUserId;3;;If it is defined uses this user for creating/closing the event;;;true;;
                iOpenEvent_RPLName;3;;RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iOpenEvent_Script;3;;Only used at Close mode. If it is defined, then it closes the event opened by the script indicated in this argument.;;;true;;
                iCreateEventOnlyInProcessCell;1;NO;Only used at Open mode and if event is created for the entire process cell. If it is YES, event isn't created in the Mobile Equipment log books;;;false;;
                iApprovalReq;1;;Only used at Close mode. When value is not NULL (YES or NO), then it overrides the approval configuration for that event type;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,1440,200,7
              executeAtClientID: No
            END
            ParallelDivergent67515:PFCTree.View.ParallelDivergent
              id: 67515
              idEnd: 67516
              bounds: 215,1440,200,7
            END
            P_LC_EVENT_REOPEN_1_BS:PFCTree.View.Script
              id: 67537
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.CREATE_CLOSE_EVENT
              arguments:
                iMode;3;"Open";Script mode: Open, close or sign-off event;;Open,Close,Sign-off;false;;
                iEquipment_Type;19;NULL;Equipment types;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));true;;
                iEquipment_AllocationPhase;19;NULL;EquipmentsAllocation Phases;;;true;;
                iEquipment_Id;19;;Equipment IDs to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iDescription;3;"Full Line Clearance";Description of event. Required for open mode. Should it blank in close mode;;;true;;
                iComment;19;;Comments for the event. Should it blank in open mode. Optional for close mode.;;;true;;
                iSubType_Monitoring;3;;Subtype for Monitoring event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMonitoring" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_AdditionalProdActivities;3;;Subtype for AdditionalProdActivities event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventAdditionalProdActivities" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineClearance;3;"All Zones";Subtype for LineClearance event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineClearance" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Engineering;3;NULL;Subtype for Engineering event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEngineering" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Cleaning;3;;Subtype for Cleaning event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventCleaning" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_NonCommProd;3;;Subtype for NonCommProd event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventNonCommProd" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Training;3;;Subtype for Training event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventTraining" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Equipment;3;;Subtype for Equipment event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEquipment" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Movement;3;;Subtype for Movement event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMovement" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Status;3;;Subtype for Status event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventStatus" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Production;3;NULL;Subtype for Production event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventProduction" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineChange;3;;Subtype for LineChange event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineChange" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Intervention;3;;Subtype for Intervention event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventIntervention" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iReset_LCType;1;NO;When value is YES, line clearance global variables are set to NULL;;;false;;
                iMerpsRef;3;;Merps ref field;;;true;;
                iChangeControlRef;3;;Change control ref field;;;true;;
                iUserId;3;;If it is defined uses this user for creating/closing the event;;;true;;
                iOpenEvent_RPLName;3;;RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iOpenEvent_Script;3;;Only used at Close mode. If it is defined, then it closes the event opened by the script indicated in this argument.;;;true;;
                iCreateEventOnlyInProcessCell;1;NO;Only used at Open mode and if event is created for the entire process cell. If it is YES, event isn't created in the Mobile Equipment log books;;;false;;
                iApprovalReq;1;;Only used at Close mode. When value is not NULL (YES or NO), then it overrides the approval configuration for that event type;;;true;;
              end
              type: 0
              order: 0
              bounds: 645,1440,200,7
              executeAtClientID: No
            END
            67512_67507:PFCTree.View.Link
              id: 67514
              fromID: 67512
              toID: 67507
              bounds: 98,1447,6,233
            END
            67515_67520:PFCTree.View.Link
              id: 67521
              fromID: 67515
              toID: 67520
              bounds: 313,1447,6,73
            END
            67537_67533:PFCTree.View.Link
              id: 67539
              fromID: 67537
              toID: 67533
              bounds: 743,1447,6,73
            END
            P_LC_EVENT_REOPEN_2_BS:PFCTree.View.Script
              id: 67520
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.CREATE_CLOSE_EVENT
              arguments:
                iMode;3;"Open";Script mode: Open, close or sign-off event;;Open,Close,Sign-off;false;;
                iEquipment_Type;19;NULL;Equipment types;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));true;;
                iEquipment_AllocationPhase;19;NULL;EquipmentsAllocation Phases;;;true;;
                iEquipment_Id;19;;Equipment IDs to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iDescription;3;"Adhoc Line Clearance";Description of event. Required for open mode. Should it blank in close mode;;;true;;
                iComment;19;;Comments for the event. Should it blank in open mode. Optional for close mode.;;;true;;
                iSubType_Monitoring;3;;Subtype for Monitoring event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMonitoring" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_AdditionalProdActivities;3;;Subtype for AdditionalProdActivities event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventAdditionalProdActivities" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineClearance;3;"All Zones";Subtype for LineClearance event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineClearance" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Engineering;3;NULL;Subtype for Engineering event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEngineering" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Cleaning;3;;Subtype for Cleaning event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventCleaning" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_NonCommProd;3;;Subtype for NonCommProd event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventNonCommProd" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Training;3;;Subtype for Training event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventTraining" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Equipment;3;;Subtype for Equipment event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEquipment" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Movement;3;;Subtype for Movement event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMovement" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Status;3;;Subtype for Status event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventStatus" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Production;3;NULL;Subtype for Production event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventProduction" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineChange;3;;Subtype for LineChange event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineChange" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Intervention;3;;Subtype for Intervention event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventIntervention" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iReset_LCType;1;NO;When value is YES, line clearance global variables are set to NULL;;;false;;
                iMerpsRef;3;;Merps ref field;;;true;;
                iChangeControlRef;3;;Change control ref field;;;true;;
                iUserId;3;;If it is defined uses this user for creating/closing the event;;;true;;
                iOpenEvent_RPLName;3;;RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iOpenEvent_Script;3;;Only used at Close mode. If it is defined, then it closes the event opened by the script indicated in this argument.;;;true;;
                iCreateEventOnlyInProcessCell;1;NO;Only used at Open mode and if event is created for the entire process cell. If it is YES, event isn't created in the Mobile Equipment log books;;;false;;
                iApprovalReq;1;;Only used at Close mode. When value is not NULL (YES or NO), then it overrides the approval configuration for that event type;;;true;;
              end
              type: 0
              order: 0
              bounds: 215,1520,200,7
              executeAtClientID: No
            END
            EndParallelDivergent67532:PFCTree.View.ParallelConvergent
              id: 67533
              idEnd: 67532
              bounds: 645,1520,200,7
            END
            67520_67516:PFCTree.View.Link
              id: 67522
              fromID: 67520
              toID: 67516
              bounds: 313,1527,6,73
            END
            67533_67524:PFCTree.View.Link
              id: 67536
              fromID: 67533
              toID: 67524
              bounds: 743,1527,6,73
            END
            EndParallelDivergent67515:PFCTree.View.ParallelConvergent
              id: 67516
              idEnd: 67515
              bounds: 215,1600,200,7
            END
            EndSerialDivergent67523:PFCTree.View.SerialConvergent
              id: 67524
              idEnd: 67523
              bounds: 430,1600,415,7
            END
            67516_67507:PFCTree.View.Link
              id: 67519
              fromID: 67516
              toID: 67507
              bounds: 313,1607,6,73
            END
            67524_58837:PFCTree.View.Link
              id: 67528
              fromID: 67524
              toID: 58837
              bounds: 635,1607,6,153
            END
            EndSerialDivergent67506:PFCTree.View.SerialConvergent
              id: 67507
              idEnd: 67506
              bounds: 0,1680,415,7
            END
            67507_58837:PFCTree.View.Link
              id: 67511
              fromID: 67507
              toID: 58837
              bounds: 205,1687,6,73
            END
            SerialConvergent58837:PFCTree.View.SerialConvergent
              id: 58837
              idEnd: 58821
              bounds: 0,1760,845,7
            END
            58837_58838:PFCTree.View.Link
              id: 58884
              fromID: 58837
              toID: 58838
              bounds: 205,1767,6,73
            END
            SerialDivergent58838:PFCTree.View.SerialDivergent
              id: 58838
              idEnd: 58843
              bounds: 0,1840,415,7
            END
            58838_58839:PFCTree.View.Link
              id: 58885
              fromID: 58838
              toID: 58839
              bounds: 98,1847,6,73
            END
            58838_58840:PFCTree.View.Link
              id: 58886
              fromID: 58838
              toID: 58840
              bounds: 313,1847,6,73
            END
            S_RESET_LC_FLAG_BS:PFCTree.View.Script
              id: 58839
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"LCError_Flag"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{No};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,1920,200,7
              executeAtClientID: No
            END
            ParallelDivergent58840:PFCTree.View.ParallelDivergent
              id: 58840
              idEnd: 58842
              bounds: 215,1920,200,7
            END
            58839_58843:PFCTree.View.Link
              id: 58887
              fromID: 58839
              toID: 58843
              bounds: 98,1927,6,233
            END
            58840_58841:PFCTree.View.Link
              id: 58888
              fromID: 58840
              toID: 58841
              bounds: 313,1927,6,73
            END
            P_RESET_LC_FLAG_BS:PFCTree.View.Script
              id: 58841
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"LCError_Flag"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{No};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,2000,200,7
              executeAtClientID: No
            END
            58841_58842:PFCTree.View.Link
              id: 58889
              fromID: 58841
              toID: 58842
              bounds: 313,2007,6,73
            END
            ParallelConvergent58842:PFCTree.View.ParallelConvergent
              id: 58842
              idEnd: 58840
              bounds: 215,2080,200,7
            END
            58842_58843:PFCTree.View.Link
              id: 58890
              fromID: 58842
              toID: 58843
              bounds: 313,2087,6,73
            END
            SerialConvergent58843:PFCTree.View.SerialConvergent
              id: 58843
              idEnd: 58838
              bounds: 0,2160,415,7
            END
            58843_58844:PFCTree.View.Link
              id: 58891
              fromID: 58843
              toID: 58844
              bounds: 98,2167,6,73
            END
            S_DISABLE_ZONES_BS:PFCTree.View.Script
              id: 58844
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"LC_ZONE_1_OP","LC_ZONE_2_OP"};Object name;;;false;;
                iObject_Reactivate;17;{YES,YES};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 0,2240,200,7
              executeAtClientID: No
            END
            58844_58845:PFCTree.View.Link
              id: 58892
              fromID: 58844
              toID: 58845
              bounds: 98,2247,6,73
            END
            SerialDivergent58845:PFCTree.View.SerialDivergent
              id: 58845
              idEnd: 58850
              bounds: 0,2320,415,7
            END
            58845_58846:PFCTree.View.Link
              id: 58893
              fromID: 58845
              toID: 58846
              bounds: 98,2327,6,73
            END
            58845_58847:PFCTree.View.Link
              id: 58894
              fromID: 58845
              toID: 58847
              bounds: 313,2327,6,73
            END
            S_SET_ALRM1_1_NULL_BS:PFCTree.View.Script
              id: 58846
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"Alrm1"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,2400,200,7
              executeAtClientID: No
            END
            ParallelDivergent58847:PFCTree.View.ParallelDivergent
              id: 58847
              idEnd: 58849
              bounds: 215,2400,200,7
            END
            58846_58850:PFCTree.View.Link
              id: 58895
              fromID: 58846
              toID: 58850
              bounds: 98,2407,6,233
            END
            58847_58848:PFCTree.View.Link
              id: 58896
              fromID: 58847
              toID: 58848
              bounds: 313,2407,6,73
            END
            P_SET_ALRM1_1_NULL_BS:PFCTree.View.Script
              id: 58848
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"Alrm1"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,2480,200,7
              executeAtClientID: No
            END
            58848_58849:PFCTree.View.Link
              id: 58897
              fromID: 58848
              toID: 58849
              bounds: 313,2487,6,73
            END
            ParallelConvergent58849:PFCTree.View.ParallelConvergent
              id: 58849
              idEnd: 58847
              bounds: 215,2560,200,7
            END
            58849_58850:PFCTree.View.Link
              id: 58898
              fromID: 58849
              toID: 58850
              bounds: 313,2567,6,73
            END
            SerialConvergent58850:PFCTree.View.SerialConvergent
              id: 58850
              idEnd: 58845
              bounds: 0,2640,415,7
            END
            58850_58851:PFCTree.View.Link
              id: 58899
              fromID: 58850
              toID: 58851
              bounds: 205,2647,6,73
            END
            SerialConvergent58851:PFCTree.View.SerialConvergent
              id: 58851
              idEnd: 58812
              bounds: 0,2720,415,7
            END
            58851_58852:PFCTree.View.Link
              id: 58900
              fromID: 58851
              toID: 58852
              bounds: 98,2727,6,73
            END
            EndNode58852:PFCTree.View.EndNode
              id: 58852
              bounds: 0,2800,200,70
            END
          END
          bounds: 2,550,130,83
        END
        ParallelDivergent58901:PFCTree.View.ParallelDivergent
          id: 58901
          idEnd: 58981
          bounds: 147,585,275,40
        END
        58901_58903:PFCTree.View.Link
          id: 59238
          fromID: 58901
          toID: 58903
          bounds: 205,625,16,35
        END
        58901_58941:PFCTree.View.Link
          id: 59239
          fromID: 58901
          toID: 58941
          bounds: 350,625,16,35
        END
        58809_58902:PFCTree.View.ControlLink
          id: 59240
          fromID: 58809
          toID: 58902
          bounds: 60,633,16,27
        END
        R_MONITOR_BS:PFCTree.View.Script
          id: 58902
          buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
          arguments:
            iReactivateByDefault;1;$$L2 <> NULL ? $$L2 : Yes;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
          end
          type: 2
          order: 0
          bounds: 2,660,130,55
          step: 58809
          executeAtClientID: No
        END
        LC_ZONE_1_OP:PFCTree.View.Operation
          description: Line Clearance Zone 1
          id: 58903
          order: 0
          design:
            BeginNode58904:PFCTree.View.BeginNode
              id: 58904
              bounds: 0,0,200,70
            END
            58904_58905:PFCTree.View.Link
              id: 58922
              fromID: 58904
              toID: 58905
              bounds: 98,70,6,10
            END
            SerialDivergent58905:PFCTree.View.SerialDivergent
              id: 58905
              idEnd: 58910
              bounds: 0,80,415,7
            END
            58905_58906:PFCTree.View.Link
              id: 58923
              fromID: 58905
              toID: 58906
              bounds: 98,87,6,73
            END
            58905_58907:PFCTree.View.Link
              id: 58924
              fromID: 58905
              toID: 58907
              bounds: 313,87,6,73
            END
            S_SIGNAL_ZONE1_NULL_BS:PFCTree.View.Script
              id: 58906
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LCZone1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"NULL"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 0,160,200,7
              executeAtClientID: No
            END
            ParallelDivergent58907:PFCTree.View.ParallelDivergent
              id: 58907
              idEnd: 58909
              bounds: 215,160,200,7
            END
            58906_58910:PFCTree.View.Link
              id: 58925
              fromID: 58906
              toID: 58910
              bounds: 98,167,6,233
            END
            58907_58908:PFCTree.View.Link
              id: 58926
              fromID: 58907
              toID: 58908
              bounds: 313,167,6,73
            END
            P_SIGNAL_ZONE1_NULL_BS:PFCTree.View.Script
              id: 58908
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LCZone1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"NULL"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 215,240,200,7
              executeAtClientID: No
            END
            58908_58909:PFCTree.View.Link
              id: 58927
              fromID: 58908
              toID: 58909
              bounds: 313,247,6,73
            END
            ParallelConvergent58909:PFCTree.View.ParallelConvergent
              id: 58909
              idEnd: 58907
              bounds: 215,320,200,7
            END
            58909_58910:PFCTree.View.Link
              id: 58928
              fromID: 58909
              toID: 58910
              bounds: 313,327,6,73
            END
            SerialConvergent58910:PFCTree.View.SerialConvergent
              id: 58910
              idEnd: 58905
              bounds: 0,400,415,7
            END
            58910_58911:PFCTree.View.Link
              id: 58929
              fromID: 58910
              toID: 58911
              bounds: 98,407,6,73
            END
            LC_CLEAR_ZONE1_BP:PFCTree.View.Phase
              description: Line Clearance
              buildingBlockElementID: EQUIPMENT_CHECKS.LINE_CLEARANCE_CHECKPOINT
              arguments:
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Zone Stage completed ";Meaning Label for first level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iSignature_AdHoc_Meaning1stLevel;3;"Zone Stage completed";Meaning Label for first level AdHoc signature;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iConfig_ProcessStage;3;"Clear";Process stage;;=TRANSLATE("EQUIPMENT_CHECKS."+PARSE_LIST(GET_CONFIG("<EQUIPMENT_CHECKS.CONFIG_KEYS>ProcessStageList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iConfig_Zone;3;"Zone1";Zone to be used;;=STRUCT_GATHER(GET_GENERIC_LIST("type='LCZoneList'"), "[*].name");false;;
                iConfig_Instruction;19;{"Clear Zone"};Instructions to display on the main screen;;;false;;
                iOption_AllowMultipleUsers;1;YES;If YES, then BP allows multiple signatures;;;false;;
                iOption_EnforceOrderedCheck;1;YES;If YES, then phase enforces ordered check for checkpoints;;;false;;
                iEquipment_Type;19;{"LCData"};Equipment Types to LC;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");false;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phases;;;false;;
                iAdhocLCType;3;"AdHocLineClearance";Ad-hoc LC type;;=STRUCT_GATHER(GET_GENERIC_LIST("type='LCTypeList'"), "[*].name");false;;
                iAlarm_Alarm;19;{"Alrm1"};Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;{YES};Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 58911
              order: 0
              bounds: 0,480,200,70
            END
            58911_58912:PFCTree.View.ControlLink
              id: 58930
              fromID: 58911
              toID: 58912
              bounds: 98,550,6,10
            END
            LC_CLEAN_ZONE1_BP:PFCTree.View.Phase
              description: Line Clearance
              buildingBlockElementID: EQUIPMENT_CHECKS.LINE_CLEARANCE_CHECKPOINT
              arguments:
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Zone Stage completed ";Meaning Label for first level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iSignature_AdHoc_Meaning1stLevel;3;"Zone Stage completed";Meaning Label for first level AdHoc signature;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iConfig_ProcessStage;3;"Clean";Process stage;;=TRANSLATE("EQUIPMENT_CHECKS."+PARSE_LIST(GET_CONFIG("<EQUIPMENT_CHECKS.CONFIG_KEYS>ProcessStageList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iConfig_Zone;3;"Zone1";Zone to be used;;=STRUCT_GATHER(GET_GENERIC_LIST("type='LCZoneList'"), "[*].name");false;;
                iConfig_Instruction;19;{"Clean Zone"};Instructions to display on the main screen;;;false;;
                iOption_AllowMultipleUsers;1;YES;If YES, then BP allows multiple signatures;;;false;;
                iOption_EnforceOrderedCheck;1;YES;If YES, then phase enforces ordered check for checkpoints;;;false;;
                iEquipment_Type;19;{"LCData"};Equipment Types to LC;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");false;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phases;;;false;;
                iAdhocLCType;3;"AdHocLineClearance";Ad-hoc LC type;;=STRUCT_GATHER(GET_GENERIC_LIST("type='LCTypeList'"), "[*].name");false;;
                iAlarm_Alarm;19;{"Alrm1"};Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;{YES};Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 58912
              order: 0
              bounds: 0,560,200,70
            END
            58912_58913:PFCTree.View.ControlLink
              id: 58931
              fromID: 58912
              toID: 58913
              bounds: 98,630,6,10
            END
            LC_CHECK_ZONE1_BP:PFCTree.View.Phase
              description: Line Clearance
              buildingBlockElementID: EQUIPMENT_CHECKS.LINE_CLEARANCE_CHECKPOINT
              arguments:
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Zone Stage completed ";Meaning Label for first level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;{"LC_CLEAR_ZONE1_BP","LC_CLEAN_ZONE1_BP"};The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iSignature_AdHoc_Meaning1stLevel;3;"Zone Stage completed";Meaning Label for first level AdHoc signature;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iConfig_ProcessStage;3;"Check";Process stage;;=TRANSLATE("EQUIPMENT_CHECKS."+PARSE_LIST(GET_CONFIG("<EQUIPMENT_CHECKS.CONFIG_KEYS>ProcessStageList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iConfig_Zone;3;"Zone1";Zone to be used;;=STRUCT_GATHER(GET_GENERIC_LIST("type='LCZoneList'"), "[*].name");false;;
                iConfig_Instruction;19;{"Check Zone"};Instructions to display on the main screen;;;false;;
                iOption_AllowMultipleUsers;1;YES;If YES, then BP allows multiple signatures;;;false;;
                iOption_EnforceOrderedCheck;1;YES;If YES, then phase enforces ordered check for checkpoints;;;false;;
                iEquipment_Type;19;{"LCData"};Equipment Types to LC;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");false;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phases;;;false;;
                iAdhocLCType;3;"AdHocLineClearance";Ad-hoc LC type;;=STRUCT_GATHER(GET_GENERIC_LIST("type='LCTypeList'"), "[*].name");false;;
                iAlarm_Alarm;19;{"Alrm1"};Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;{YES};Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 58913
              order: 0
              bounds: 0,640,200,70
            END
            58913_58914:PFCTree.View.Link
              id: 58932
              fromID: 58913
              toID: 58914
              bounds: 98,710,6,10
            END
            SerialDivergent58914:PFCTree.View.SerialDivergent
              id: 58914
              idEnd: 58919
              bounds: 0,720,415,7
            END
            58914_58915:PFCTree.View.Link
              id: 58933
              fromID: 58914
              toID: 58915
              bounds: 98,727,6,73
            END
            58914_58916:PFCTree.View.Link
              id: 58934
              fromID: 58914
              toID: 58916
              bounds: 313,727,6,73
            END
            S_ZONE1_COMPLETE_BS:PFCTree.View.Script
              id: 58915
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LCZone1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 0,800,200,7
              executeAtClientID: No
            END
            ParallelDivergent58916:PFCTree.View.ParallelDivergent
              id: 58916
              idEnd: 58918
              bounds: 215,800,200,7
            END
            58915_58919:PFCTree.View.Link
              id: 58935
              fromID: 58915
              toID: 58919
              bounds: 98,807,6,233
            END
            58916_58917:PFCTree.View.Link
              id: 58936
              fromID: 58916
              toID: 58917
              bounds: 313,807,6,73
            END
            P_ZONE1_COMPLETE_BS:PFCTree.View.Script
              id: 58917
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LCZone1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 215,880,200,7
              executeAtClientID: No
            END
            58917_58918:PFCTree.View.Link
              id: 58937
              fromID: 58917
              toID: 58918
              bounds: 313,887,6,73
            END
            ParallelConvergent58918:PFCTree.View.ParallelConvergent
              id: 58918
              idEnd: 58916
              bounds: 215,960,200,7
            END
            58918_58919:PFCTree.View.Link
              id: 58938
              fromID: 58918
              toID: 58919
              bounds: 313,967,6,73
            END
            SerialConvergent58919:PFCTree.View.SerialConvergent
              id: 58919
              idEnd: 58914
              bounds: 0,1040,415,7
            END
            58919_58920:PFCTree.View.Link
              id: 58939
              fromID: 58919
              toID: 58920
              bounds: 98,1047,6,73
            END
            ZONE2_WAIT_BS:PFCTree.View.Script
              id: 58920
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LCZone2"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,1120,200,7
              executeAtClientID: No
            END
            58920_58921:PFCTree.View.ControlLink
              id: 58940
              fromID: 58920
              toID: 58921
              bounds: 98,1127,6,73
            END
            EndNode58921:PFCTree.View.EndNode
              id: 58921
              bounds: 0,1200,200,70
            END
          END
          bounds: 147,660,130,83
        END
        LC_ZONE_2_OP:PFCTree.View.Operation
          description: Line Clearance Zone 2
          id: 58941
          order: 1
          design:
            BeginNode58942:PFCTree.View.BeginNode
              id: 58942
              bounds: 74,16,130,32
            END
            58942_58943:PFCTree.View.Link
              id: 58960
              fromID: 58942
              toID: 58943
              bounds: 132,48,16,97
            END
            SerialDivergent58943:PFCTree.View.SerialDivergent
              id: 58943
              idEnd: 58948
              bounds: 2,145,275,40
            END
            58943_58944:PFCTree.View.Link
              id: 58961
              fromID: 58943
              toID: 58944
              bounds: 60,185,16,35
            END
            58943_58945:PFCTree.View.Link
              id: 58962
              fromID: 58943
              toID: 58945
              bounds: 205,185,16,70
            END
            S_SIGNAL_ZONE2_NULL_BS:PFCTree.View.Script
              id: 58944
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LCZone2"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"NULL"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 2,220,130,55
              executeAtClientID: No
            END
            ParallelDivergent58945:PFCTree.View.ParallelDivergent
              id: 58945
              idEnd: 58947
              bounds: 147,255,130,40
            END
            58944_58948:PFCTree.View.Link
              id: 58963
              fromID: 58944
              toID: 58948
              bounds: 60,275,16,275
            END
            58945_58946:PFCTree.View.Link
              id: 58964
              fromID: 58945
              toID: 58946
              bounds: 205,295,16,35
            END
            P_SIGNAL_ZONE2_NULL_BS:PFCTree.View.Script
              id: 58946
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LCZone2"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"NULL"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 147,330,130,55
              executeAtClientID: No
            END
            58946_58947:PFCTree.View.Link
              id: 58965
              fromID: 58946
              toID: 58947
              bounds: 205,385,16,55
            END
            ParallelConvergent58947:PFCTree.View.ParallelConvergent
              id: 58947
              idEnd: 58945
              bounds: 147,440,130,40
            END
            58947_58948:PFCTree.View.Link
              id: 58966
              fromID: 58947
              toID: 58948
              bounds: 205,480,16,70
            END
            SerialConvergent58948:PFCTree.View.SerialConvergent
              id: 58948
              idEnd: 58943
              bounds: 2,550,275,40
            END
            58948_58949:PFCTree.View.Link
              id: 58967
              fromID: 58948
              toID: 58949
              bounds: 132,590,16,70
            END
            LC_CLEAR_ZONE2_BP:PFCTree.View.Phase
              description: Line Clearance
              buildingBlockElementID: EQUIPMENT_CHECKS.LINE_CLEARANCE_CHECKPOINT
              arguments:
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Zone Stage completed ";Meaning Label for first level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iSignature_AdHoc_Meaning1stLevel;3;"Zone Stage completed";Meaning Label for first level AdHoc signature;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iConfig_ProcessStage;3;"Clear";Process stage;;=TRANSLATE("EQUIPMENT_CHECKS."+PARSE_LIST(GET_CONFIG("<EQUIPMENT_CHECKS.CONFIG_KEYS>ProcessStageList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iConfig_Zone;3;"Zone2";Zone to be used;;=STRUCT_GATHER(GET_GENERIC_LIST("type='LCZoneList'"), "[*].name");false;;
                iConfig_Instruction;19;{"Clear Zone"};Instructions to display on the main screen;;;false;;
                iOption_AllowMultipleUsers;1;YES;If YES, then BP allows multiple signatures;;;false;;
                iOption_EnforceOrderedCheck;1;YES;If YES, then phase enforces ordered check for checkpoints;;;false;;
                iEquipment_Type;19;{"ResourceArea"};Equipment Types to LC;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");false;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phases;;;false;;
                iAdhocLCType;3;"AdHocLineClearance";Ad-hoc LC type;;=STRUCT_GATHER(GET_GENERIC_LIST("type='LCTypeList'"), "[*].name");false;;
                iAlarm_Alarm;19;{"Alrm1"};Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;{YES};Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_2
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 58949
              order: 0
              bounds: 74,660,130,83
            END
            58949_58950:PFCTree.View.ControlLink
              id: 58968
              fromID: 58949
              toID: 58950
              bounds: 132,743,16,27
            END
            LC_CLEAN_ZONE2_BP:PFCTree.View.Phase
              description: Line Clearance
              buildingBlockElementID: EQUIPMENT_CHECKS.LINE_CLEARANCE_CHECKPOINT
              arguments:
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Zone Stage completed ";Meaning Label for first level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iSignature_AdHoc_Meaning1stLevel;3;"Zone Stage completed";Meaning Label for first level AdHoc signature;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iConfig_ProcessStage;3;"Clean";Process stage;;=TRANSLATE("EQUIPMENT_CHECKS."+PARSE_LIST(GET_CONFIG("<EQUIPMENT_CHECKS.CONFIG_KEYS>ProcessStageList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iConfig_Zone;3;"Zone2";Zone to be used;;=STRUCT_GATHER(GET_GENERIC_LIST("type='LCZoneList'"), "[*].name");false;;
                iConfig_Instruction;19;{"Clean Zone"};Instructions to display on the main screen;;;false;;
                iOption_AllowMultipleUsers;1;YES;If YES, then BP allows multiple signatures;;;false;;
                iOption_EnforceOrderedCheck;1;YES;If YES, then phase enforces ordered check for checkpoints;;;false;;
                iEquipment_Type;19;{"ResourceArea"};Equipment Types to LC;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");false;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phases;;;false;;
                iAdhocLCType;3;"AdHocLineClearance";Ad-hoc LC type;;=STRUCT_GATHER(GET_GENERIC_LIST("type='LCTypeList'"), "[*].name");false;;
                iAlarm_Alarm;19;{"Alrm1"};Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;{YES};Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_2
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 58950
              order: 0
              bounds: 74,770,130,83
            END
            58950_58951:PFCTree.View.ControlLink
              id: 58969
              fromID: 58950
              toID: 58951
              bounds: 132,853,16,27
            END
            LC_CHECK_ZONE2_BP:PFCTree.View.Phase
              description: Line Clearance
              buildingBlockElementID: EQUIPMENT_CHECKS.LINE_CLEARANCE_CHECKPOINT
              arguments:
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Zone Stage completed ";Meaning Label for first level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;{"LC_CLEAR_ZONE2_BP","LC_CLEAN_ZONE2_BP"};The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iSignature_AdHoc_Meaning1stLevel;3;"Zone Stage completed";Meaning Label for first level AdHoc signature;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iConfig_ProcessStage;3;"Check";Process stage;;=TRANSLATE("EQUIPMENT_CHECKS."+PARSE_LIST(GET_CONFIG("<EQUIPMENT_CHECKS.CONFIG_KEYS>ProcessStageList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iConfig_Zone;3;"Zone2";Zone to be used;;=STRUCT_GATHER(GET_GENERIC_LIST("type='LCZoneList'"), "[*].name");false;;
                iConfig_Instruction;19;{"Check Zone"};Instructions to display on the main screen;;;false;;
                iOption_AllowMultipleUsers;1;YES;If YES, then BP allows multiple signatures;;;false;;
                iOption_EnforceOrderedCheck;1;YES;If YES, then phase enforces ordered check for checkpoints;;;false;;
                iEquipment_Type;19;{"ResourceArea"};Equipment Types to LC;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");false;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phases;;;false;;
                iAdhocLCType;3;"AdHocLineClearance";Ad-hoc LC type;;=STRUCT_GATHER(GET_GENERIC_LIST("type='LCTypeList'"), "[*].name");false;;
                iAlarm_Alarm;19;{"Alrm1"};Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;{YES};Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_2
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 58951
              order: 0
              bounds: 74,880,130,83
            END
            58951_58952:PFCTree.View.Link
              id: 58970
              fromID: 58951
              toID: 58952
              bounds: 132,963,16,62
            END
            SerialDivergent58952:PFCTree.View.SerialDivergent
              id: 58952
              idEnd: 58957
              bounds: 2,1025,275,40
            END
            58952_58953:PFCTree.View.Link
              id: 58971
              fromID: 58952
              toID: 58953
              bounds: 60,1065,16,35
            END
            58952_58954:PFCTree.View.Link
              id: 58972
              fromID: 58952
              toID: 58954
              bounds: 205,1065,16,70
            END
            S_ZONE2_COMPLETE_BS:PFCTree.View.Script
              id: 58953
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LCZone2"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 2,1100,130,55
              executeAtClientID: No
            END
            ParallelDivergent58954:PFCTree.View.ParallelDivergent
              id: 58954
              idEnd: 58956
              bounds: 147,1135,130,40
            END
            58953_58957:PFCTree.View.Link
              id: 58973
              fromID: 58953
              toID: 58957
              bounds: 60,1155,16,275
            END
            58954_58955:PFCTree.View.Link
              id: 58974
              fromID: 58954
              toID: 58955
              bounds: 205,1175,16,35
            END
            P_ZONE2_COMPLETE_BS:PFCTree.View.Script
              id: 58955
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LCZone2"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 147,1210,130,55
              executeAtClientID: No
            END
            58955_58956:PFCTree.View.Link
              id: 58975
              fromID: 58955
              toID: 58956
              bounds: 205,1265,16,55
            END
            ParallelConvergent58956:PFCTree.View.ParallelConvergent
              id: 58956
              idEnd: 58954
              bounds: 147,1320,130,40
            END
            58956_58957:PFCTree.View.Link
              id: 58976
              fromID: 58956
              toID: 58957
              bounds: 205,1360,16,70
            END
            SerialConvergent58957:PFCTree.View.SerialConvergent
              id: 58957
              idEnd: 58952
              bounds: 2,1430,275,40
            END
            58957_58958:PFCTree.View.Link
              id: 58977
              fromID: 58957
              toID: 58958
              bounds: 132,1470,16,70
            END
            ZONE1_WAIT_BS:PFCTree.View.Script
              id: 58958
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LCZone1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 74,1540,130,55
              executeAtClientID: No
            END
            58958_58959:PFCTree.View.ControlLink
              id: 58978
              fromID: 58958
              toID: 58959
              bounds: 132,1595,16,71
            END
            EndNode58959:PFCTree.View.EndNode
              id: 58959
              bounds: 74,1666,130,32
            END
          END
          bounds: 292,660,130,83
        END
        58902_59176:PFCTree.View.Link
          id: 59241
          fromID: 58902
          toID: 59176
          bounds: 60,715,16,495
        END
        58903_58979:PFCTree.View.ControlLink
          id: 59242
          fromID: 58903
          toID: 58979
          bounds: 205,743,16,27
        END
        58941_58980:PFCTree.View.ControlLink
          id: 59243
          fromID: 58941
          toID: 58980
          bounds: 350,743,16,27
        END
        R_ZONE1_LC_BS:PFCTree.View.Script
          id: 58979
          buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
          arguments:
            iReactivateByDefault;1;NO;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
          end
          type: 2
          order: 0
          bounds: 147,770,130,55
          step: 58903
          executeAtClientID: No
        END
        R_ZONE2_LC_BS:PFCTree.View.Script
          id: 58980
          buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
          arguments:
            iReactivateByDefault;1;NO;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
          end
          type: 2
          order: 0
          bounds: 292,770,130,55
          step: 58941
          executeAtClientID: No
        END
        58979_58981:PFCTree.View.Link
          id: 59244
          fromID: 58979
          toID: 58981
          bounds: 205,825,16,55
        END
        58980_58981:PFCTree.View.Link
          id: 59245
          fromID: 58980
          toID: 58981
          bounds: 350,825,16,55
        END
        ParallelConvergent58981:PFCTree.View.ParallelConvergent
          id: 58981
          idEnd: 58901
          bounds: 147,880,275,40
        END
        58981_58982:PFCTree.View.Link
          id: 59246
          fromID: 58981
          toID: 58982
          bounds: 277,920,16,70
        END
        POST_LC_CHECKS_OP:PFCTree.View.Operation
          description: LINE CLEARANCE
          id: 58982
          order: 0
          design:
            BeginNode58983:PFCTree.View.BeginNode
              id: 58983
              bounds: 0,0,200,70
            END
            58983_58984:PFCTree.View.ControlLink
              id: 58986
              fromID: 58983
              toID: 58984
              bounds: 98,70,6,10
            END
            POST_LC_CHECKS_BP:PFCTree.View.Phase
              description: Area/Line Clearance completion
              buildingBlockElementID: GENERIC.CHECKLIST
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Overall Line Clearance completed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Complete following activities"};Instructions with a maximum of 3 lines;;;false;;
                iCheckList_Option;19;{"Confirm Line Clearance has been completed on all Zones","Line Clearance barriers removed","Status board updated"};Check List lines to follow;;;false;;
                iCheckList_SigReq;19;{NULL,NULL,NULL};Required signature level for the option;;1 signature,2 signatures;true;;
                iMode;3;"All Check";Selection mode;;={ TRANSLATE("GENERIC.L_CheckListAllCheck"), TRANSLATE("GENERIC.L_CheckListOneCheck") };false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
                iPartial_SignOff;1;NO;Indicates if is not necesary to check all elements at the same time;;;false;;
                iEnforceCheckListSequence;1;NO;Indicates if checking items according to the list sequence is enforced;;;false;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 58984
              order: 0
              bounds: 0,80,200,70
            END
            58984_58985:PFCTree.View.ControlLink
              id: 58987
              fromID: 58984
              toID: 58985
              bounds: 98,150,6,10
            END
            EndNode58985:PFCTree.View.EndNode
              id: 58985
              bounds: 0,160,200,70
            END
          END
          bounds: 219,990,130,83
        END
        58982_58988:PFCTree.View.ControlLink
          id: 59247
          fromID: 58982
          toID: 58988
          bounds: 277,1073,16,27
        END
        POST_LC_SCRIPTS_OP:PFCTree.View.Operation
          description: POST_LC_SCRIPTS_OP
          id: 58988
          order: 0
          design:
            BeginNode58989:PFCTree.View.BeginNode
              id: 58989
              bounds: 0,0,200,70
            END
            58989_58990:PFCTree.View.Link
              id: 59075
              fromID: 58989
              toID: 58990
              bounds: 98,70,6,10
            END
            SerialDivergent58990:PFCTree.View.SerialDivergent
              id: 58990
              idEnd: 59055
              bounds: 0,80,2135,7
            END
            58990_58991:PFCTree.View.Link
              id: 59076
              fromID: 58990
              toID: 58991
              bounds: 98,87,6,73
            END
            58990_58992:PFCTree.View.Link
              id: 59077
              fromID: 58990
              toID: 58992
              bounds: 1925,87,6,73
            END
            CHECK_LC_VAR_EOB_BS:PFCTree.View.Script
              id: 58991
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"varLCType"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"EOB"};Global variable value;;;true;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,160,200,7
              executeAtClientID: No
            END
            SerialDivergent58992:PFCTree.View.SerialDivergent
              id: 58992
              idEnd: 59008
              bounds: 1720,160,415,7
            END
            58991_58993:PFCTree.View.Link
              id: 59078
              fromID: 58991
              toID: 58993
              bounds: 98,167,6,73
            END
            58992_58994:PFCTree.View.Link
              id: 59079
              fromID: 58992
              toID: 58994
              bounds: 1818,167,6,73
            END
            58992_58995:PFCTree.View.Link
              id: 59080
              fromID: 58992
              toID: 58995
              bounds: 2033,167,6,73
            END
            ParallelDivergent58993:PFCTree.View.ParallelDivergent
              id: 58993
              idEnd: 59054
              bounds: 0,240,1705,7
            END
            S_SET_LCTYPE_NULL_BS:PFCTree.View.Script
              id: 58994
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"varLCType"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1720,240,200,7
              executeAtClientID: No
            END
            ParallelDivergent58995:PFCTree.View.ParallelDivergent
              id: 58995
              idEnd: 59003
              bounds: 1935,240,200,7
            END
            58993_58996:PFCTree.View.Link
              id: 59081
              fromID: 58993
              toID: 58996
              bounds: 205,247,6,73
            END
            58993_58997:PFCTree.View.Link
              id: 59082
              fromID: 58993
              toID: 58997
              bounds: 1065,247,6,73
            END
            58994_59008:PFCTree.View.Link
              id: 59083
              fromID: 58994
              toID: 59008
              bounds: 1818,247,6,233
            END
            58995_58998:PFCTree.View.Link
              id: 59084
              fromID: 58995
              toID: 58998
              bounds: 2033,247,6,73
            END
            SerialDivergent58996:PFCTree.View.SerialDivergent
              id: 58996
              idEnd: 59014
              bounds: 0,320,415,7
            END
            SerialDivergent58997:PFCTree.View.SerialDivergent
              id: 58997
              idEnd: 59032
              bounds: 430,320,1275,7
            END
            P_SET_LCTYPE_NULL_BS:PFCTree.View.Script
              id: 58998
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"varLCType"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1935,320,200,7
              executeAtClientID: No
            END
            58996_58999:PFCTree.View.Link
              id: 59085
              fromID: 58996
              toID: 58999
              bounds: 98,327,6,73
            END
            58996_59000:PFCTree.View.Link
              id: 59086
              fromID: 58996
              toID: 59000
              bounds: 313,327,6,73
            END
            58997_59001:PFCTree.View.Link
              id: 59087
              fromID: 58997
              toID: 59001
              bounds: 528,327,6,73
            END
            58997_66958:PFCTree.View.Link
              id: 66959
              fromID: 58997
              toID: 66958
              bounds: 958,327,6,73
            END
            58997_59002:PFCTree.View.Link
              id: 59088
              fromID: 58997
              toID: 59002
              bounds: 1495,327,6,73
            END
            58998_59003:PFCTree.View.Link
              id: 59089
              fromID: 58998
              toID: 59003
              bounds: 2033,327,6,73
            END
            S_FILL_PROD_COMPLETE_BS:PFCTree.View.Script
              id: 58999
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LineClearance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Stop"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 0,400,200,7
              executeAtClientID: No
            END
            ParallelDivergent59000:PFCTree.View.ParallelDivergent
              id: 59000
              idEnd: 59009
              bounds: 215,400,200,7
            END
            CHK_FINAL_LC_TYPE_BS:PFCTree.View.Script
              id: 59001
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"vs_LCType"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"Full Line Clearance"};Global variable value;;;true;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 430,400,200,7
              executeAtClientID: No
            END
            CHK_ADHOC_LC_TYPE_BS:PFCTree.View.Script
              id: 66958
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"vs_LCType"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"Ad-Hoc"};Global variable value;;;true;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 1
              bounds: 860,400,200,7
              executeAtClientID: No
            END
            SerialDivergent59002:PFCTree.View.SerialDivergent
              id: 59002
              idEnd: 59021
              bounds: 1290,400,415,7
            END
            ParallelConvergent59003:PFCTree.View.ParallelConvergent
              id: 59003
              idEnd: 58995
              bounds: 1935,400,200,7
            END
            58999_59014:PFCTree.View.Link
              id: 59090
              fromID: 58999
              toID: 59014
              bounds: 98,407,6,233
            END
            59000_59004:PFCTree.View.Link
              id: 59091
              fromID: 59000
              toID: 59004
              bounds: 313,407,6,73
            END
            59001_59005:PFCTree.View.Link
              id: 59092
              fromID: 59001
              toID: 59005
              bounds: 528,407,6,73
            END
            66958_66961:PFCTree.View.Link
              id: 66964
              fromID: 66958
              toID: 66961
              bounds: 958,407,6,73
            END
            59002_59006:PFCTree.View.Link
              id: 59093
              fromID: 59002
              toID: 59006
              bounds: 1388,407,6,73
            END
            59002_59007:PFCTree.View.Link
              id: 59094
              fromID: 59002
              toID: 59007
              bounds: 1603,407,6,73
            END
            59003_59008:PFCTree.View.Link
              id: 59095
              fromID: 59003
              toID: 59008
              bounds: 2033,407,6,73
            END
            P_FILL_PROD_COMPLETE_BS:PFCTree.View.Script
              id: 59004
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LineClearance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Stop"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 215,480,200,7
              executeAtClientID: No
            END
            SerialDivergent59005:PFCTree.View.SerialDivergent
              id: 59005
              idEnd: 59026
              bounds: 430,480,415,7
            END
            SerialDivergent66961:PFCTree.View.SerialDivergent
              id: 66961
              idEnd: 66962
              bounds: 860,480,415,7
            END
            S_SET_LCTYPE_PARTIAL_BS:PFCTree.View.Script
              id: 59006
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.SET_EQUIPMENT_STATUS
              arguments:
                iEquipment_Type;19;{"LCData"};Equipment Types to update;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));false;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iEquipment_NewStatus;19;{"Partial"};Equipment new status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iEquipment_ExceptionStatus;19;{NULL};Equipment exception status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iEquipment_StatusRollback;17;;Indicates if status of the equipment is set to the last previous value;;;true;;
                iEquipmentId;19;;Equipments to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iUserId;3;;If it is defined uses this user for update audit;;;true;;
                iReasonOfChange;3;;If it is defined uses this reason of change for update audit;;;true;;
                iParents_Update;1;NO;Defines if updates the status of the equipment parent;;;false;;
                iParents_Status;3;NULL;Status to set for the parent. If argument is null then the Status of the Child is used;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iChildren_Update;1;NO;Defines if updates the status of the equipment children;;;false;;
                iChildren_Status;3;NULL;Status to set for the children. If argument is null then the Status of the Parent is used;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iAdditionalPELInfo;19;;Additional Infomration for PEL event;;;true;;
                iResetDate;1;Yes;When value is YES, STATUS_DATE field is updated with current timestamp. When value is NO field is not updated;;;false;;
                iApprovalReq;1;No;When value is YES, then event remains pending for sign-off;;;false;;
              end
              type: 0
              order: 0
              bounds: 1290,480,200,7
              executeAtClientID: No
            END
            ParallelDivergent59007:PFCTree.View.ParallelDivergent
              id: 59007
              idEnd: 59016
              bounds: 1505,480,200,7
            END
            SerialConvergent59008:PFCTree.View.SerialConvergent
              id: 59008
              idEnd: 58992
              bounds: 1720,480,415,7
            END
            59004_59009:PFCTree.View.Link
              id: 59096
              fromID: 59004
              toID: 59009
              bounds: 313,487,6,73
            END
            59005_59010:PFCTree.View.Link
              id: 59097
              fromID: 59005
              toID: 59010
              bounds: 528,487,6,73
            END
            59005_59011:PFCTree.View.Link
              id: 59098
              fromID: 59005
              toID: 59011
              bounds: 743,487,6,73
            END
            66961_66966:PFCTree.View.Link
              id: 66967
              fromID: 66961
              toID: 66966
              bounds: 958,487,6,73
            END
            66961_66969:PFCTree.View.Link
              id: 66972
              fromID: 66961
              toID: 66969
              bounds: 1173,487,6,73
            END
            59006_59021:PFCTree.View.Link
              id: 59099
              fromID: 59006
              toID: 59021
              bounds: 1388,487,6,233
            END
            59007_59012:PFCTree.View.Link
              id: 59100
              fromID: 59007
              toID: 59012
              bounds: 1603,487,6,73
            END
            59008_59013:PFCTree.View.Link
              id: 59101
              fromID: 59008
              toID: 59013
              bounds: 1925,487,6,73
            END
            ParallelConvergent59009:PFCTree.View.ParallelConvergent
              id: 59009
              idEnd: 59000
              bounds: 215,560,200,7
            END
            S_SET_LCTYPE_FULL_BS:PFCTree.View.Script
              id: 59010
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.SET_EQUIPMENT_STATUS
              arguments:
                iEquipment_Type;19;{"LCData"};Equipment Types to update;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));false;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iEquipment_NewStatus;19;{"Full"};Equipment new status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iEquipment_ExceptionStatus;19;{NULL};Equipment exception status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iEquipment_StatusRollback;17;;Indicates if status of the equipment is set to the last previous value;;;true;;
                iEquipmentId;19;;Equipments to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iUserId;3;;If it is defined uses this user for update audit;;;true;;
                iReasonOfChange;3;;If it is defined uses this reason of change for update audit;;;true;;
                iParents_Update;1;NO;Defines if updates the status of the equipment parent;;;false;;
                iParents_Status;3;NULL;Status to set for the parent. If argument is null then the Status of the Child is used;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iChildren_Update;1;NO;Defines if updates the status of the equipment children;;;false;;
                iChildren_Status;3;NULL;Status to set for the children. If argument is null then the Status of the Parent is used;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iAdditionalPELInfo;19;;Additional Infomration for PEL event;;;true;;
                iResetDate;1;Yes;When value is YES, STATUS_DATE field is updated with current timestamp. When value is NO field is not updated;;;false;;
                iApprovalReq;1;No;When value is YES, then event remains pending for sign-off;;;false;;
              end
              type: 0
              order: 0
              bounds: 430,560,200,7
              executeAtClientID: No
            END
            ParallelDivergent59011:PFCTree.View.ParallelDivergent
              id: 59011
              idEnd: 59020
              bounds: 645,560,200,7
            END
            S_SET_LCTYPE_ADHOC_BS:PFCTree.View.Script
              id: 66966
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.SET_EQUIPMENT_STATUS
              arguments:
                iEquipment_Type;19;{"LCData"};Equipment Types to update;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));false;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iEquipment_NewStatus;19;{"AdHoc"};Equipment new status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iEquipment_ExceptionStatus;19;{NULL};Equipment exception status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iEquipment_StatusRollback;17;;Indicates if status of the equipment is set to the last previous value;;;true;;
                iEquipmentId;19;;Equipments to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iUserId;3;;If it is defined uses this user for update audit;;;true;;
                iReasonOfChange;3;;If it is defined uses this reason of change for update audit;;;true;;
                iParents_Update;1;NO;Defines if updates the status of the equipment parent;;;false;;
                iParents_Status;3;NULL;Status to set for the parent. If argument is null then the Status of the Child is used;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iChildren_Update;1;NO;Defines if updates the status of the equipment children;;;false;;
                iChildren_Status;3;NULL;Status to set for the children. If argument is null then the Status of the Parent is used;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iAdditionalPELInfo;19;;Additional Infomration for PEL event;;;true;;
                iResetDate;1;Yes;When value is YES, STATUS_DATE field is updated with current timestamp. When value is NO field is not updated;;;false;;
                iApprovalReq;1;No;When value is YES, then event remains pending for sign-off;;;false;;
              end
              type: 0
              order: 0
              bounds: 860,560,200,7
              executeAtClientID: No
            END
            ParallelDivergent66969:PFCTree.View.ParallelDivergent
              id: 66969
              idEnd: 66970
              bounds: 1075,560,200,7
            END
            P_SET_LCTYPE_PARTIAL_BS:PFCTree.View.Script
              id: 59012
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.SET_EQUIPMENT_STATUS
              arguments:
                iEquipment_Type;19;{"LCData"};Equipment Types to update;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));false;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iEquipment_NewStatus;19;{"Partial"};Equipment new status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iEquipment_ExceptionStatus;19;{NULL};Equipment exception status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iEquipment_StatusRollback;17;;Indicates if status of the equipment is set to the last previous value;;;true;;
                iEquipmentId;19;;Equipments to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iUserId;3;;If it is defined uses this user for update audit;;;true;;
                iReasonOfChange;3;;If it is defined uses this reason of change for update audit;;;true;;
                iParents_Update;1;NO;Defines if updates the status of the equipment parent;;;false;;
                iParents_Status;3;NULL;Status to set for the parent. If argument is null then the Status of the Child is used;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iChildren_Update;1;NO;Defines if updates the status of the equipment children;;;false;;
                iChildren_Status;3;NULL;Status to set for the children. If argument is null then the Status of the Parent is used;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iAdditionalPELInfo;19;;Additional Infomration for PEL event;;;true;;
                iResetDate;1;Yes;When value is YES, STATUS_DATE field is updated with current timestamp. When value is NO field is not updated;;;false;;
                iApprovalReq;1;No;When value is YES, then event remains pending for sign-off;;;false;;
              end
              type: 0
              order: 0
              bounds: 1505,560,200,7
              executeAtClientID: No
            END
            SerialDivergent59013:PFCTree.View.SerialDivergent
              id: 59013
              idEnd: 59046
              bounds: 1720,560,845,7
            END
            59009_59014:PFCTree.View.Link
              id: 59102
              fromID: 59009
              toID: 59014
              bounds: 313,567,6,73
            END
            59010_59026:PFCTree.View.Link
              id: 59103
              fromID: 59010
              toID: 59026
              bounds: 528,567,6,233
            END
            59011_59015:PFCTree.View.Link
              id: 59104
              fromID: 59011
              toID: 59015
              bounds: 743,567,6,73
            END
            66966_66962:PFCTree.View.Link
              id: 66968
              fromID: 66966
              toID: 66962
              bounds: 958,567,6,233
            END
            66969_66974:PFCTree.View.Link
              id: 66975
              fromID: 66969
              toID: 66974
              bounds: 1173,567,6,73
            END
            59012_59016:PFCTree.View.Link
              id: 59105
              fromID: 59012
              toID: 59016
              bounds: 1603,567,6,73
            END
            59013_59017:PFCTree.View.Link
              id: 59106
              fromID: 59013
              toID: 59017
              bounds: 1818,567,6,73
            END
            59013_59018:PFCTree.View.Link
              id: 59107
              fromID: 59013
              toID: 59018
              bounds: 2248,567,6,73
            END
            SerialConvergent59014:PFCTree.View.SerialConvergent
              id: 59014
              idEnd: 58996
              bounds: 0,640,415,7
            END
            P_SET_LCTYPE_FULL_BS:PFCTree.View.Script
              id: 59015
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.SET_EQUIPMENT_STATUS
              arguments:
                iEquipment_Type;19;{"LCData"};Equipment Types to update;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));false;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iEquipment_NewStatus;19;{"Full"};Equipment new status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iEquipment_ExceptionStatus;19;{NULL};Equipment exception status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iEquipment_StatusRollback;17;;Indicates if status of the equipment is set to the last previous value;;;true;;
                iEquipmentId;19;;Equipments to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iUserId;3;;If it is defined uses this user for update audit;;;true;;
                iReasonOfChange;3;;If it is defined uses this reason of change for update audit;;;true;;
                iParents_Update;1;NO;Defines if updates the status of the equipment parent;;;false;;
                iParents_Status;3;NULL;Status to set for the parent. If argument is null then the Status of the Child is used;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iChildren_Update;1;NO;Defines if updates the status of the equipment children;;;false;;
                iChildren_Status;3;NULL;Status to set for the children. If argument is null then the Status of the Parent is used;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iAdditionalPELInfo;19;;Additional Infomration for PEL event;;;true;;
                iResetDate;1;Yes;When value is YES, STATUS_DATE field is updated with current timestamp. When value is NO field is not updated;;;false;;
                iApprovalReq;1;No;When value is YES, then event remains pending for sign-off;;;false;;
              end
              type: 0
              order: 0
              bounds: 645,640,200,7
              executeAtClientID: No
            END
            P_SET_LCTYPE_ADHOC_BS:PFCTree.View.Script
              id: 66974
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.SET_EQUIPMENT_STATUS
              arguments:
                iEquipment_Type;19;{"LCData"};Equipment Types to update;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));false;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iEquipment_NewStatus;19;{"AdHoc"};Equipment new status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iEquipment_ExceptionStatus;19;{NULL};Equipment exception status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iEquipment_StatusRollback;17;;Indicates if status of the equipment is set to the last previous value;;;true;;
                iEquipmentId;19;;Equipments to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iUserId;3;;If it is defined uses this user for update audit;;;true;;
                iReasonOfChange;3;;If it is defined uses this reason of change for update audit;;;true;;
                iParents_Update;1;NO;Defines if updates the status of the equipment parent;;;false;;
                iParents_Status;3;NULL;Status to set for the parent. If argument is null then the Status of the Child is used;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iChildren_Update;1;NO;Defines if updates the status of the equipment children;;;false;;
                iChildren_Status;3;NULL;Status to set for the children. If argument is null then the Status of the Parent is used;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iAdditionalPELInfo;19;;Additional Infomration for PEL event;;;true;;
                iResetDate;1;Yes;When value is YES, STATUS_DATE field is updated with current timestamp. When value is NO field is not updated;;;false;;
                iApprovalReq;1;No;When value is YES, then event remains pending for sign-off;;;false;;
              end
              type: 0
              order: 0
              bounds: 1075,640,200,7
              executeAtClientID: No
            END
            ParallelConvergent59016:PFCTree.View.ParallelConvergent
              id: 59016
              idEnd: 59007
              bounds: 1505,640,200,7
            END
            CHK_DISABLE_1_BS:PFCTree.View.Script
              id: 59017
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LineClearance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"One"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 1720,640,200,7
              executeAtClientID: No
            END
            CHK_DISABLE_2_BS:PFCTree.View.Script
              id: 59018
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LineClearance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Two"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 1
              bounds: 2150,640,200,7
              executeAtClientID: No
            END
            59014_59019:PFCTree.View.Link
              id: 59108
              fromID: 59014
              toID: 59019
              bounds: 205,647,6,73
            END
            59015_59020:PFCTree.View.Link
              id: 59109
              fromID: 59015
              toID: 59020
              bounds: 743,647,6,73
            END
            66974_66970:PFCTree.View.Link
              id: 66976
              fromID: 66974
              toID: 66970
              bounds: 1173,647,6,73
            END
            59016_59021:PFCTree.View.Link
              id: 59110
              fromID: 59016
              toID: 59021
              bounds: 1603,647,6,73
            END
            59017_59022:PFCTree.View.Link
              id: 59111
              fromID: 59017
              toID: 59022
              bounds: 1818,647,6,73
            END
            59018_59023:PFCTree.View.Link
              id: 59112
              fromID: 59018
              toID: 59023
              bounds: 2248,647,6,73
            END
            SerialDivergent59019:PFCTree.View.SerialDivergent
              id: 59019
              idEnd: 59039
              bounds: 0,720,415,7
            END
            ParallelConvergent59020:PFCTree.View.ParallelConvergent
              id: 59020
              idEnd: 59011
              bounds: 645,720,200,7
            END
            EndParallelDivergent66969:PFCTree.View.ParallelConvergent
              id: 66970
              idEnd: 66969
              bounds: 1075,720,200,7
            END
            SerialConvergent59021:PFCTree.View.SerialConvergent
              id: 59021
              idEnd: 59002
              bounds: 1290,720,415,7
            END
            SerialDivergent59022:PFCTree.View.SerialDivergent
              id: 59022
              idEnd: 59042
              bounds: 1720,720,415,7
            END
            SerialDivergent59023:PFCTree.View.SerialDivergent
              id: 59023
              idEnd: 59043
              bounds: 2150,720,415,7
            END
            59019_59024:PFCTree.View.Link
              id: 59113
              fromID: 59019
              toID: 59024
              bounds: 98,727,6,73
            END
            59019_59025:PFCTree.View.Link
              id: 59114
              fromID: 59019
              toID: 59025
              bounds: 313,727,6,73
            END
            59020_59026:PFCTree.View.Link
              id: 59115
              fromID: 59020
              toID: 59026
              bounds: 743,727,6,73
            END
            66970_66962:PFCTree.View.Link
              id: 66973
              fromID: 66970
              toID: 66962
              bounds: 1173,727,6,73
            END
            59021_59032:PFCTree.View.Link
              id: 59116
              fromID: 59021
              toID: 59032
              bounds: 1495,727,6,153
            END
            59022_59027:PFCTree.View.Link
              id: 59117
              fromID: 59022
              toID: 59027
              bounds: 1818,727,6,73
            END
            59022_59028:PFCTree.View.Link
              id: 59118
              fromID: 59022
              toID: 59028
              bounds: 2033,727,6,73
            END
            59023_59029:PFCTree.View.Link
              id: 59119
              fromID: 59023
              toID: 59029
              bounds: 2248,727,6,73
            END
            59023_59030:PFCTree.View.Link
              id: 59120
              fromID: 59023
              toID: 59030
              bounds: 2463,727,6,73
            END
            S_L1_NO_BS:PFCTree.View.Script
              id: 59024
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"L1"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{No};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,800,200,7
              executeAtClientID: No
            END
            ParallelDivergent59025:PFCTree.View.ParallelDivergent
              id: 59025
              idEnd: 59035
              bounds: 215,800,200,7
            END
            SerialConvergent59026:PFCTree.View.SerialConvergent
              id: 59026
              idEnd: 59005
              bounds: 430,800,415,7
            END
            EndSerialDivergent66961:PFCTree.View.SerialConvergent
              id: 66962
              idEnd: 66961
              bounds: 860,800,415,7
            END
            S_REACTIVATE_PHASE_1_BS:PFCTree.View.Script
              id: 59027
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"REACTIVATE_ONE_LC_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 1720,800,200,7
              executeAtClientID: No
            END
            ParallelDivergent59028:PFCTree.View.ParallelDivergent
              id: 59028
              idEnd: 59037
              bounds: 1935,800,200,7
            END
            S_REACTIVATE_PHASE_2_BS:PFCTree.View.Script
              id: 59029
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"REACTIVATE_TWO_LC_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2150,800,200,7
              executeAtClientID: No
            END
            ParallelDivergent59030:PFCTree.View.ParallelDivergent
              id: 59030
              idEnd: 59038
              bounds: 2365,800,200,7
            END
            59024_59039:PFCTree.View.Link
              id: 59121
              fromID: 59024
              toID: 59039
              bounds: 98,807,6,233
            END
            59025_59031:PFCTree.View.Link
              id: 59122
              fromID: 59025
              toID: 59031
              bounds: 313,807,6,73
            END
            59026_59032:PFCTree.View.Link
              id: 59123
              fromID: 59026
              toID: 59032
              bounds: 635,807,6,73
            END
            66962_59032:PFCTree.View.Link
              id: 66965
              fromID: 66962
              toID: 59032
              bounds: 1065,807,6,73
            END
            59027_59042:PFCTree.View.Link
              id: 59124
              fromID: 59027
              toID: 59042
              bounds: 1818,807,6,233
            END
            59028_59033:PFCTree.View.Link
              id: 59125
              fromID: 59028
              toID: 59033
              bounds: 2033,807,6,73
            END
            59029_59043:PFCTree.View.Link
              id: 59126
              fromID: 59029
              toID: 59043
              bounds: 2248,807,6,233
            END
            59030_59034:PFCTree.View.Link
              id: 59127
              fromID: 59030
              toID: 59034
              bounds: 2463,807,6,73
            END
            P_L1_NO_BS:PFCTree.View.Script
              id: 59031
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"L1"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{No};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,880,200,7
              executeAtClientID: No
            END
            SerialConvergent59032:PFCTree.View.SerialConvergent
              id: 59032
              idEnd: 58997
              bounds: 430,880,1275,7
            END
            P_REACTIVATE_PHASE_1_BS:PFCTree.View.Script
              id: 59033
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"REACTIVATE_ONE_LC_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 1935,880,200,7
              executeAtClientID: No
            END
            P_REACTIVATE_PHASE_2_BS:PFCTree.View.Script
              id: 59034
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"REACTIVATE_TWO_LC_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2365,880,200,7
              executeAtClientID: No
            END
            59031_59035:PFCTree.View.Link
              id: 59128
              fromID: 59031
              toID: 59035
              bounds: 313,887,6,73
            END
            59032_59036:PFCTree.View.Link
              id: 59129
              fromID: 59032
              toID: 59036
              bounds: 635,887,6,73
            END
            59033_59037:PFCTree.View.Link
              id: 59130
              fromID: 59033
              toID: 59037
              bounds: 2033,887,6,73
            END
            59034_59038:PFCTree.View.Link
              id: 59131
              fromID: 59034
              toID: 59038
              bounds: 2463,887,6,73
            END
            ParallelConvergent59035:PFCTree.View.ParallelConvergent
              id: 59035
              idEnd: 59025
              bounds: 215,960,200,7
            END
            SerialDivergent59036:PFCTree.View.SerialDivergent
              id: 59036
              idEnd: 59051
              bounds: 430,960,415,7
            END
            ParallelConvergent59037:PFCTree.View.ParallelConvergent
              id: 59037
              idEnd: 59028
              bounds: 1935,960,200,7
            END
            ParallelConvergent59038:PFCTree.View.ParallelConvergent
              id: 59038
              idEnd: 59030
              bounds: 2365,960,200,7
            END
            59035_59039:PFCTree.View.Link
              id: 59132
              fromID: 59035
              toID: 59039
              bounds: 313,967,6,73
            END
            59036_59040:PFCTree.View.Link
              id: 59133
              fromID: 59036
              toID: 59040
              bounds: 528,967,6,73
            END
            59036_59041:PFCTree.View.Link
              id: 59134
              fromID: 59036
              toID: 59041
              bounds: 743,967,6,73
            END
            59037_59042:PFCTree.View.Link
              id: 59135
              fromID: 59037
              toID: 59042
              bounds: 2033,967,6,73
            END
            59038_59043:PFCTree.View.Link
              id: 59136
              fromID: 59038
              toID: 59043
              bounds: 2463,967,6,73
            END
            SerialConvergent59039:PFCTree.View.SerialConvergent
              id: 59039
              idEnd: 59019
              bounds: 0,1040,415,7
            END
            S_DEALLOC_LCDATA_BS:PFCTree.View.Script
              id: 59040
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.UPDATE_EQUIPMENT_ALLOCATION
              arguments:
                iEquipment_Type;19;{"LCData"};Equipment type list;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));true;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase list;;;true;;
                iEquipment_Id;19;;Equipment Id list to deallocate;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iEquipment_LastPORecord;17;{YES};If YES set the Equipment previous PO with the value of the PO that is releasing the equipment;;;false;;
                iUserId;3;;If it is defined uses this user for the ePEL events;;;true;;
              end
              type: 0
              order: 0
              bounds: 430,1040,200,7
              executeAtClientID: No
            END
            ParallelDivergent59041:PFCTree.View.ParallelDivergent
              id: 59041
              idEnd: 59049
              bounds: 645,1040,200,7
            END
            SerialConvergent59042:PFCTree.View.SerialConvergent
              id: 59042
              idEnd: 59022
              bounds: 1720,1040,415,7
            END
            SerialConvergent59043:PFCTree.View.SerialConvergent
              id: 59043
              idEnd: 59023
              bounds: 2150,1040,415,7
            END
            59039_59044:PFCTree.View.Link
              id: 59137
              fromID: 59039
              toID: 59044
              bounds: 205,1047,6,73
            END
            59040_59051:PFCTree.View.Link
              id: 59138
              fromID: 59040
              toID: 59051
              bounds: 528,1047,6,233
            END
            59041_59045:PFCTree.View.Link
              id: 59139
              fromID: 59041
              toID: 59045
              bounds: 743,1047,6,73
            END
            59042_59046:PFCTree.View.Link
              id: 59140
              fromID: 59042
              toID: 59046
              bounds: 1925,1047,6,73
            END
            59043_59046:PFCTree.View.Link
              id: 59141
              fromID: 59043
              toID: 59046
              bounds: 2355,1047,6,73
            END
            SerialDivergent59044:PFCTree.View.SerialDivergent
              id: 59044
              idEnd: 59053
              bounds: 0,1120,415,7
            END
            P_DEALLOC_LCDATA_BS:PFCTree.View.Script
              id: 59045
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.UPDATE_EQUIPMENT_ALLOCATION
              arguments:
                iEquipment_Type;19;{"LCData"};Equipment type list;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));true;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase list;;;true;;
                iEquipment_Id;19;;Equipment Id list to deallocate;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iEquipment_LastPORecord;17;{YES};If YES set the Equipment previous PO with the value of the PO that is releasing the equipment;;;false;;
                iUserId;3;;If it is defined uses this user for the ePEL events;;;true;;
              end
              type: 0
              order: 0
              bounds: 645,1120,200,7
              executeAtClientID: No
            END
            SerialConvergent59046:PFCTree.View.SerialConvergent
              id: 59046
              idEnd: 59013
              bounds: 1720,1120,845,7
            END
            59044_59047:PFCTree.View.Link
              id: 59142
              fromID: 59044
              toID: 59047
              bounds: 98,1127,6,73
            END
            59044_59048:PFCTree.View.Link
              id: 59143
              fromID: 59044
              toID: 59048
              bounds: 313,1127,6,73
            END
            59045_59049:PFCTree.View.Link
              id: 59144
              fromID: 59045
              toID: 59049
              bounds: 743,1127,6,73
            END
            59046_59055:PFCTree.View.Link
              id: 59145
              fromID: 59046
              toID: 59055
              bounds: 2140,1127,6,473
            END
            S_REACTIVATE_PHASE_3_BS:PFCTree.View.Script
              id: 59047
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"REACTIVATE_THREE_LC_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 0,1200,200,7
              executeAtClientID: No
            END
            ParallelDivergent59048:PFCTree.View.ParallelDivergent
              id: 59048
              idEnd: 59052
              bounds: 215,1200,200,7
            END
            ParallelConvergent59049:PFCTree.View.ParallelConvergent
              id: 59049
              idEnd: 59041
              bounds: 645,1200,200,7
            END
            59047_59053:PFCTree.View.Link
              id: 59146
              fromID: 59047
              toID: 59053
              bounds: 98,1207,6,233
            END
            59048_59050:PFCTree.View.Link
              id: 59147
              fromID: 59048
              toID: 59050
              bounds: 313,1207,6,73
            END
            59049_59051:PFCTree.View.Link
              id: 59148
              fromID: 59049
              toID: 59051
              bounds: 743,1207,6,73
            END
            P_REACTIVATE_PHASE_3_BS:PFCTree.View.Script
              id: 59050
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"REACTIVATE_THREE_LC_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 215,1280,200,7
              executeAtClientID: No
            END
            SerialConvergent59051:PFCTree.View.SerialConvergent
              id: 59051
              idEnd: 59036
              bounds: 430,1280,415,7
            END
            59050_59052:PFCTree.View.Link
              id: 59149
              fromID: 59050
              toID: 59052
              bounds: 313,1287,6,73
            END
            59051_59054:PFCTree.View.Link
              id: 59150
              fromID: 59051
              toID: 59054
              bounds: 635,1287,6,233
            END
            ParallelConvergent59052:PFCTree.View.ParallelConvergent
              id: 59052
              idEnd: 59048
              bounds: 215,1360,200,7
            END
            59052_59053:PFCTree.View.Link
              id: 59151
              fromID: 59052
              toID: 59053
              bounds: 313,1367,6,73
            END
            SerialConvergent59053:PFCTree.View.SerialConvergent
              id: 59053
              idEnd: 59044
              bounds: 0,1440,415,7
            END
            59053_59054:PFCTree.View.Link
              id: 59152
              fromID: 59053
              toID: 59054
              bounds: 205,1447,6,73
            END
            ParallelConvergent59054:PFCTree.View.ParallelConvergent
              id: 59054
              idEnd: 58993
              bounds: 0,1520,1705,7
            END
            59054_59055:PFCTree.View.Link
              id: 59153
              fromID: 59054
              toID: 59055
              bounds: 850,1527,6,73
            END
            SerialConvergent59055:PFCTree.View.SerialConvergent
              id: 59055
              idEnd: 58990
              bounds: 0,1600,2135,7
            END
            59055_59056:PFCTree.View.Link
              id: 59154
              fromID: 59055
              toID: 59056
              bounds: 205,1607,6,73
            END
            SerialDivergent59056:PFCTree.View.SerialDivergent
              id: 59056
              idEnd: 59061
              bounds: 0,1680,415,7
            END
            59056_59057:PFCTree.View.Link
              id: 59155
              fromID: 59056
              toID: 59057
              bounds: 98,1687,6,73
            END
            59056_59058:PFCTree.View.Link
              id: 59156
              fromID: 59056
              toID: 59058
              bounds: 313,1687,6,73
            END
            S_LC_EVENT_CLOSE_BS:PFCTree.View.Script
              id: 59057
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.CREATE_CLOSE_EVENT
              arguments:
                iMode;3;"Close";Script mode: Open, close or sign-off event;;Open,Close,Sign-off;false;;
                iEquipment_Type;19;NULL;Equipment types;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));true;;
                iEquipment_AllocationPhase;19;;EquipmentsAllocation Phases;;;true;;
                iEquipment_Id;19;;Equipment IDs to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iDescription;3;;Description of event. Required for open mode. Should it blank in close mode;;;true;;
                iComment;19;;Comments for the event. Should it blank in open mode. Optional for close mode.;;;true;;
                iSubType_Monitoring;3;;Subtype for Monitoring event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMonitoring" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_AdditionalProdActivities;3;;Subtype for AdditionalProdActivities event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventAdditionalProdActivities" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineClearance;3;"All Zones";Subtype for LineClearance event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineClearance" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Engineering;3;;Subtype for Engineering event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEngineering" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Cleaning;3;;Subtype for Cleaning event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventCleaning" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_NonCommProd;3;;Subtype for NonCommProd event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventNonCommProd" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Training;3;;Subtype for Training event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventTraining" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Equipment;3;;Subtype for Equipment event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEquipment" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Movement;3;;Subtype for Movement event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMovement" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Status;3;;Subtype for Status event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventStatus" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Production;3;;Subtype for Production event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventProduction" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineChange;3;;Subtype for LineChange event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineChange" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Intervention;3;;Subtype for Intervention event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventIntervention" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iReset_LCType;1;NO;When value is YES, line clearance global variables are set to NULL;;;false;;
                iMerpsRef;3;;Merps ref field;;;true;;
                iChangeControlRef;3;;Change control ref field;;;true;;
                iUserId;3;;If it is defined uses this user for creating/closing the event;;;true;;
                iOpenEvent_RPLName;3;;RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iOpenEvent_Script;3;;Only used at Close mode. If it is defined, then it closes the event opened by the script indicated in this argument.;;;true;;
                iCreateEventOnlyInProcessCell;1;NO;Only used at Open mode and if event is created for the entire process cell. If it is YES, event isn't created in the Mobile Equipment log books;;;false;;
                iApprovalReq;1;;Only used at Close mode. When value is not NULL (YES or NO), then it overrides the approval configuration for that event type;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,1760,200,7
              executeAtClientID: No
            END
            ParallelDivergent59058:PFCTree.View.ParallelDivergent
              id: 59058
              idEnd: 59060
              bounds: 215,1760,200,7
            END
            59057_59061:PFCTree.View.Link
              id: 59157
              fromID: 59057
              toID: 59061
              bounds: 98,1767,6,233
            END
            59058_59059:PFCTree.View.Link
              id: 59158
              fromID: 59058
              toID: 59059
              bounds: 313,1767,6,73
            END
            P_LC_EVENT_CLOSE_BS:PFCTree.View.Script
              id: 59059
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.CREATE_CLOSE_EVENT
              arguments:
                iMode;3;"Close";Script mode: Open, close or sign-off event;;Open,Close,Sign-off;false;;
                iEquipment_Type;19;NULL;Equipment types;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));true;;
                iEquipment_AllocationPhase;19;;EquipmentsAllocation Phases;;;true;;
                iEquipment_Id;19;;Equipment IDs to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iDescription;3;;Description of event. Required for open mode. Should it blank in close mode;;;true;;
                iComment;19;;Comments for the event. Should it blank in open mode. Optional for close mode.;;;true;;
                iSubType_Monitoring;3;;Subtype for Monitoring event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMonitoring" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_AdditionalProdActivities;3;;Subtype for AdditionalProdActivities event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventAdditionalProdActivities" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineClearance;3;"All Zones";Subtype for LineClearance event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineClearance" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Engineering;3;;Subtype for Engineering event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEngineering" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Cleaning;3;;Subtype for Cleaning event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventCleaning" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_NonCommProd;3;;Subtype for NonCommProd event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventNonCommProd" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Training;3;;Subtype for Training event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventTraining" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Equipment;3;;Subtype for Equipment event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEquipment" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Movement;3;;Subtype for Movement event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMovement" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Status;3;;Subtype for Status event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventStatus" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Production;3;;Subtype for Production event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventProduction" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineChange;3;;Subtype for LineChange event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineChange" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Intervention;3;;Subtype for Intervention event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventIntervention" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iReset_LCType;1;NO;When value is YES, line clearance global variables are set to NULL;;;false;;
                iMerpsRef;3;;Merps ref field;;;true;;
                iChangeControlRef;3;;Change control ref field;;;true;;
                iUserId;3;;If it is defined uses this user for creating/closing the event;;;true;;
                iOpenEvent_RPLName;3;;RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iOpenEvent_Script;3;;Only used at Close mode. If it is defined, then it closes the event opened by the script indicated in this argument.;;;true;;
                iCreateEventOnlyInProcessCell;1;NO;Only used at Open mode and if event is created for the entire process cell. If it is YES, event isn't created in the Mobile Equipment log books;;;false;;
                iApprovalReq;1;;Only used at Close mode. When value is not NULL (YES or NO), then it overrides the approval configuration for that event type;;;true;;
              end
              type: 0
              order: 0
              bounds: 215,1840,200,7
              executeAtClientID: No
            END
            59059_59060:PFCTree.View.Link
              id: 59159
              fromID: 59059
              toID: 59060
              bounds: 313,1847,6,73
            END
            ParallelConvergent59060:PFCTree.View.ParallelConvergent
              id: 59060
              idEnd: 59058
              bounds: 215,1920,200,7
            END
            59060_59061:PFCTree.View.Link
              id: 59160
              fromID: 59060
              toID: 59061
              bounds: 313,1927,6,73
            END
            SerialConvergent59061:PFCTree.View.SerialConvergent
              id: 59061
              idEnd: 59056
              bounds: 0,2000,415,7
            END
            59061_59062:PFCTree.View.Link
              id: 59161
              fromID: 59061
              toID: 59062
              bounds: 205,2007,6,73
            END
            SerialDivergent59062:PFCTree.View.SerialDivergent
              id: 59062
              idEnd: 59067
              bounds: 0,2080,415,7
            END
            59062_59063:PFCTree.View.Link
              id: 59162
              fromID: 59062
              toID: 59063
              bounds: 98,2087,6,73
            END
            59062_59064:PFCTree.View.Link
              id: 59163
              fromID: 59062
              toID: 59064
              bounds: 313,2087,6,73
            END
            S_L2_NO_BS:PFCTree.View.Script
              id: 59063
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"L2"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{No};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,2160,200,7
              executeAtClientID: No
            END
            ParallelDivergent59064:PFCTree.View.ParallelDivergent
              id: 59064
              idEnd: 59066
              bounds: 215,2160,200,7
            END
            59063_59067:PFCTree.View.Link
              id: 59164
              fromID: 59063
              toID: 59067
              bounds: 98,2167,6,233
            END
            59064_59065:PFCTree.View.Link
              id: 59165
              fromID: 59064
              toID: 59065
              bounds: 313,2167,6,73
            END
            P_L2_NO_BS:PFCTree.View.Script
              id: 59065
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"L2"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{No};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,2240,200,7
              executeAtClientID: No
            END
            59065_59066:PFCTree.View.Link
              id: 59166
              fromID: 59065
              toID: 59066
              bounds: 313,2247,6,73
            END
            ParallelConvergent59066:PFCTree.View.ParallelConvergent
              id: 59066
              idEnd: 59064
              bounds: 215,2320,200,7
            END
            59066_59067:PFCTree.View.Link
              id: 59167
              fromID: 59066
              toID: 59067
              bounds: 313,2327,6,73
            END
            SerialConvergent59067:PFCTree.View.SerialConvergent
              id: 59067
              idEnd: 59062
              bounds: 0,2400,415,7
            END
            59067_59068:PFCTree.View.Link
              id: 59168
              fromID: 59067
              toID: 59068
              bounds: 205,2407,6,73
            END
            SerialDivergent59068:PFCTree.View.SerialDivergent
              id: 59068
              idEnd: 59073
              bounds: 0,2480,415,7
            END
            59068_59069:PFCTree.View.Link
              id: 59169
              fromID: 59068
              toID: 59069
              bounds: 98,2487,6,73
            END
            59068_59070:PFCTree.View.Link
              id: 59170
              fromID: 59068
              toID: 59070
              bounds: 313,2487,6,73
            END
            S_DISABLE_LC_MONITOR_BS:PFCTree.View.Script
              id: 59069
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"CHECK_LC_ERROR_BS"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 0,2560,200,7
              executeAtClientID: No
            END
            ParallelDivergent59070:PFCTree.View.ParallelDivergent
              id: 59070
              idEnd: 59072
              bounds: 215,2560,200,7
            END
            59069_59073:PFCTree.View.Link
              id: 59171
              fromID: 59069
              toID: 59073
              bounds: 98,2567,6,233
            END
            59070_59071:PFCTree.View.Link
              id: 59172
              fromID: 59070
              toID: 59071
              bounds: 313,2567,6,73
            END
            P_DISABLE_LC_MONITOR_BS:PFCTree.View.Script
              id: 59071
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"CHECK_LC_ERROR_BS"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 215,2640,200,7
              executeAtClientID: No
            END
            59071_59072:PFCTree.View.Link
              id: 59173
              fromID: 59071
              toID: 59072
              bounds: 313,2647,6,73
            END
            ParallelConvergent59072:PFCTree.View.ParallelConvergent
              id: 59072
              idEnd: 59070
              bounds: 215,2720,200,7
            END
            59072_59073:PFCTree.View.Link
              id: 59174
              fromID: 59072
              toID: 59073
              bounds: 313,2727,6,73
            END
            SerialConvergent59073:PFCTree.View.SerialConvergent
              id: 59073
              idEnd: 59068
              bounds: 0,2800,415,7
            END
            59073_59074:PFCTree.View.Link
              id: 59175
              fromID: 59073
              toID: 59074
              bounds: 98,2807,6,73
            END
            EndNode59074:PFCTree.View.EndNode
              id: 59074
              bounds: 0,2880,200,70
            END
          END
          bounds: 219,1100,130,83
        END
        58988_59176:PFCTree.View.Link
          id: 59248
          fromID: 58988
          toID: 59176
          bounds: 277,1183,16,27
        END
        ParallelConvergent59176:PFCTree.View.ParallelConvergent
          id: 59176
          idEnd: 58808
          bounds: 2,1210,420,40
        END
        59176_59177:PFCTree.View.Link
          id: 59249
          fromID: 59176
          toID: 59177
          bounds: 205,1250,16,70
        END
        LC_VAR_SCRIPT_OP:PFCTree.View.Operation
          description: LC_VAR_SCRIPT_OP
          id: 59177
          order: 0
          design:
            BeginNode59178:PFCTree.View.BeginNode
              id: 59178
              bounds: 0,0,200,70
            END
            59178_59179:PFCTree.View.Link
              id: 59186
              fromID: 59178
              toID: 59179
              bounds: 98,70,6,10
            END
            SerialDivergent59179:PFCTree.View.SerialDivergent
              id: 59179
              idEnd: 59184
              bounds: 0,80,415,7
            END
            59179_59180:PFCTree.View.Link
              id: 59187
              fromID: 59179
              toID: 59180
              bounds: 98,87,6,73
            END
            59179_59181:PFCTree.View.Link
              id: 59188
              fromID: 59179
              toID: 59181
              bounds: 313,87,6,73
            END
            S_CLEAR_VAR_LCTYPE_BS:PFCTree.View.Script
              id: 59180
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"varLCType"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{""};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,160,200,7
              executeAtClientID: No
            END
            ParallelDivergent59181:PFCTree.View.ParallelDivergent
              id: 59181
              idEnd: 59183
              bounds: 215,160,200,7
            END
            59180_59184:PFCTree.View.Link
              id: 59189
              fromID: 59180
              toID: 59184
              bounds: 98,167,6,233
            END
            59181_59182:PFCTree.View.Link
              id: 59190
              fromID: 59181
              toID: 59182
              bounds: 313,167,6,73
            END
            P_CLEAR_VAR_LCTYPE_BS:PFCTree.View.Script
              id: 59182
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"varLCType"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{""};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,240,200,7
              executeAtClientID: No
            END
            59182_59183:PFCTree.View.Link
              id: 59191
              fromID: 59182
              toID: 59183
              bounds: 313,247,6,73
            END
            ParallelConvergent59183:PFCTree.View.ParallelConvergent
              id: 59183
              idEnd: 59181
              bounds: 215,320,200,7
            END
            59183_59184:PFCTree.View.Link
              id: 59192
              fromID: 59183
              toID: 59184
              bounds: 313,327,6,73
            END
            SerialConvergent59184:PFCTree.View.SerialConvergent
              id: 59184
              idEnd: 59179
              bounds: 0,400,415,7
            END
            59184_59185:PFCTree.View.Link
              id: 59193
              fromID: 59184
              toID: 59185
              bounds: 98,407,6,73
            END
            EndNode59185:PFCTree.View.EndNode
              id: 59185
              bounds: 0,480,200,70
            END
          END
          bounds: 147,1320,130,83
        END
        59177_59194:PFCTree.View.ControlLink
          id: 59250
          fromID: 59177
          toID: 59194
          bounds: 205,1403,16,27
        END
        SET_SIGNAL_NO_OP:PFCTree.View.Operation
          description: SET_SIGNAL_NO_OP
          id: 59194
          order: 0
          design:
            BeginNode59195:PFCTree.View.BeginNode
              id: 59195
              bounds: 0,0,200,70
            END
            59195_59196:PFCTree.View.Link
              id: 59212
              fromID: 59195
              toID: 59196
              bounds: 98,70,6,10
            END
            SerialDivergent59196:PFCTree.View.SerialDivergent
              id: 59196
              idEnd: 59201
              bounds: 0,80,415,7
            END
            59196_59197:PFCTree.View.Link
              id: 59213
              fromID: 59196
              toID: 59197
              bounds: 98,87,6,73
            END
            59196_59198:PFCTree.View.Link
              id: 59214
              fromID: 59196
              toID: 59198
              bounds: 313,87,6,73
            END
            S_SET_ALRM_LC_NULL_BS:PFCTree.View.Script
              id: 59197
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AlrmLC"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,160,200,7
              executeAtClientID: No
            END
            ParallelDivergent59198:PFCTree.View.ParallelDivergent
              id: 59198
              idEnd: 59200
              bounds: 215,160,200,7
            END
            59197_59201:PFCTree.View.Link
              id: 59215
              fromID: 59197
              toID: 59201
              bounds: 98,167,6,233
            END
            59198_59199:PFCTree.View.Link
              id: 59216
              fromID: 59198
              toID: 59199
              bounds: 313,167,6,73
            END
            P_SET_ALRM_LC_NULL_BS:PFCTree.View.Script
              id: 59199
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AlrmLC"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,240,200,7
              executeAtClientID: No
            END
            59199_59200:PFCTree.View.Link
              id: 59217
              fromID: 59199
              toID: 59200
              bounds: 313,247,6,73
            END
            ParallelConvergent59200:PFCTree.View.ParallelConvergent
              id: 59200
              idEnd: 59198
              bounds: 215,320,200,7
            END
            59200_59201:PFCTree.View.Link
              id: 59218
              fromID: 59200
              toID: 59201
              bounds: 313,327,6,73
            END
            SerialConvergent59201:PFCTree.View.SerialConvergent
              id: 59201
              idEnd: 59196
              bounds: 0,400,415,7
            END
            59201_59202:PFCTree.View.Link
              id: 59219
              fromID: 59201
              toID: 59202
              bounds: 205,407,6,73
            END
            SerialDivergent59202:PFCTree.View.SerialDivergent
              id: 59202
              idEnd: 59210
              bounds: 0,480,630,7
            END
            59202_59203:PFCTree.View.Link
              id: 59220
              fromID: 59202
              toID: 59203
              bounds: 98,487,6,73
            END
            59202_59204:PFCTree.View.Link
              id: 59221
              fromID: 59202
              toID: 59204
              bounds: 420,487,6,73
            END
            CHK_SIGNAL_LC_DISABLE_BS:PFCTree.View.Script
              id: 59203
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LineClearance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Stop"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,560,200,7
              executeAtClientID: No
            END
            SerialDivergent59204:PFCTree.View.SerialDivergent
              id: 59204
              idEnd: 59209
              bounds: 215,560,415,7
            END
            59203_59210:PFCTree.View.Link
              id: 59222
              fromID: 59203
              toID: 59210
              bounds: 98,567,6,393
            END
            59204_59205:PFCTree.View.Link
              id: 59223
              fromID: 59204
              toID: 59205
              bounds: 313,567,6,73
            END
            59204_59206:PFCTree.View.Link
              id: 59224
              fromID: 59204
              toID: 59206
              bounds: 528,567,6,73
            END
            S_SIGNAL_LC_NO_1_BS:PFCTree.View.Script
              id: 59205
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LineClearance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"NO"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 215,640,200,7
              executeAtClientID: No
            END
            ParallelDivergent59206:PFCTree.View.ParallelDivergent
              id: 59206
              idEnd: 59208
              bounds: 430,640,200,7
            END
            59205_59209:PFCTree.View.Link
              id: 59225
              fromID: 59205
              toID: 59209
              bounds: 313,647,6,233
            END
            59206_59207:PFCTree.View.Link
              id: 59226
              fromID: 59206
              toID: 59207
              bounds: 528,647,6,73
            END
            P_SIGNAL_LC_NO_1_BS:PFCTree.View.Script
              id: 59207
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LineClearance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"NO"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 430,720,200,7
              executeAtClientID: No
            END
            59207_59208:PFCTree.View.Link
              id: 59227
              fromID: 59207
              toID: 59208
              bounds: 528,727,6,73
            END
            ParallelConvergent59208:PFCTree.View.ParallelConvergent
              id: 59208
              idEnd: 59206
              bounds: 430,800,200,7
            END
            59208_59209:PFCTree.View.Link
              id: 59228
              fromID: 59208
              toID: 59209
              bounds: 528,807,6,73
            END
            SerialConvergent59209:PFCTree.View.SerialConvergent
              id: 59209
              idEnd: 59204
              bounds: 215,880,415,7
            END
            59209_59210:PFCTree.View.Link
              id: 59229
              fromID: 59209
              toID: 59210
              bounds: 420,887,6,73
            END
            SerialConvergent59210:PFCTree.View.SerialConvergent
              id: 59210
              idEnd: 59202
              bounds: 0,960,630,7
            END
            59210_59211:PFCTree.View.Link
              id: 59230
              fromID: 59210
              toID: 59211
              bounds: 98,967,6,73
            END
            EndNode59211:PFCTree.View.EndNode
              id: 59211
              bounds: 0,1040,200,70
            END
          END
          bounds: 147,1430,130,83
        END
        59194_59231:PFCTree.View.ControlLink
          id: 59251
          fromID: 59194
          toID: 59231
          bounds: 205,1513,16,43
        END
        EndNode59231:PFCTree.View.EndNode
          id: 59231
          bounds: 147,1556,130,32
        END
      END
      bounds: 582,550,130,83
    END
    P_WASTE_UP:PFCTree.View.UnitProcedure
      description: WASTE
      id: 26404
      order: 4
      design:
        BeginNode26405:PFCTree.View.BeginNode
          id: 26405
          bounds: 2,16,130,32
        END
        26405_29285:PFCTree.View.ControlLink
          id: 35486
          fromID: 26405
          toID: 29285
          bounds: 60,48,16,62
        END
        WASTE_OP:PFCTree.View.Operation
          description: WASTE
          id: 29285
          order: 0
          design:
            BeginNode29286:PFCTree.View.BeginNode
              id: 29286
              bounds: 74,16,130,32
            END
            29286_51236:PFCTree.View.ControlLink
              id: 51246
              fromID: 29286
              toID: 51236
              bounds: 132,48,16,62
            END
            SOB_CHALL_DISABLE_BP:PFCTree.View.Phase
              description: WORKFLOW DISABLE
              buildingBlockElementID: GENERIC.INSTRUCTION
              arguments:
                iSignature_Required;3;"Ok button";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;NULL;RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;NULL;Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_Print;1;NO;Print button visible;;;false;;
                iButton_Report;19;;Reports available for report button. If Null, report button is not visible;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iEquipment_Type;3;;Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;3;;Equipment Allocation Phase;;;true;;
                iStepAutoComplete;18;;PLC step that signals the completion of the automatic process;;;true;;
                iInstruction;19;{"THIS WILL BE DISABLED BY WORKFLOW"};Default Instructions;;;false;;
                iStep_Instruction;19;;Instructions for step;;;true;;
                iStep_Start;18;;Step range start;;;true;;
                iStep_End;18;;Step range end;;;true;;
                iForceViewPEL;1;NO;If Yes, PEL report must have been called to allow phase validation;;;false;;
                iEnforcedReportName;19;;The Report selected must be viewed by the user before sign off the Phase;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iLabelTemplate;3;;Label template to be printed;;=TRANSLATE ( "OVERALL.L_" + PARSE_LIST ( GET_CONFIG ( "<OVERALL.CONFIG_KEYS>LabelTemplateSpecialList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Disable
              autoStart: No
              usePhaseRet: Yes
              Converge: No
              id: 51236
              order: 0
              bounds: 74,110,130,83
            END
            51236_29292:PFCTree.View.Link
              id: 51238
              fromID: 51236
              toID: 29292
              bounds: 132,193,16,62
            END
            ParallelDivergent29292:PFCTree.View.ParallelDivergent
              id: 29292
              idEnd: 29293
              bounds: 2,255,275,40
            END
            29292_29297:PFCTree.View.Link
              id: 29298
              fromID: 29292
              toID: 29297
              bounds: 60,295,16,35
            END
            29292_30231:PFCTree.View.Link
              id: 30234
              fromID: 29292
              toID: 30231
              bounds: 205,295,16,70
            END
            PRODUCT_WASTE_BP:PFCTree.View.Phase
              description: Product Waste Record
              buildingBlockElementID: YIELDS_AND_RECONCILIATION.CALCULATION
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures,2nd blind signature;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Waste quantity entered";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iEquipment_Type;19;{"ResourceArea"};Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iProfile;3;$$ProcessCell = "DBUCP78" ? "DERMS2_RunningWaste" : "DERMS1_RunningWaste";Yields and Reconciliation profile;;=SQL_GET("Select Distinct NAME from YR_PROFILE_CONFIG ORDER BY NAME");false;;
                iLimit1_Low;2;NULL;Lower limit for limit 1 figure. If limit 1 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit1_High;2;NULL;Higher limit for limit 1 figure. If limit 1 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_Low;2;NULL;Lower limit for limit 2 figure. If limit 2 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_High;2;NULL;Higher limit for limit 2 figure. If limit 2 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_Low;2;NULL;Lower limit for limit 3 figure. If limit 3 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_High;2;NULL;Higher limit for limit 3 figure. If limit 3 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iParameter_Name;19;;Parameter names for APRM data source;;=SQL_GET("Select Distinct DETAIL1 from YR_PROFILE_CONFIG where DATA_SOURCE='" + TRANSLATE("YIELDS_AND_RECONCILIATION.L_SourceBatchRecord") + "' ORDER BY DETAIL1");true;;
                iParameter_ValueRPLName;19;;Parameter RPL name for APRM data source;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iParameter_ValuePhaseName;19;;Parameter Phase name for APRM data source;;;true;;
                iParameter_ValueCharPath;19;;Complete path of the APRM characteristic (for APRM data source when it is not related to a BP). If iParameter_ValuePhaseName is informed, then this parameter is ignored;;;true;;
                iParameter_ValueCharName;19;;Parameter Characteristic name for APRM data source;;;true;;
                iValidation_OrderStatus;3;NULL;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;"LineClearance";Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;"Stop";Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 29297
              order: 0
              bounds: 2,330,130,83
            END
            SerialDivergent30231:PFCTree.View.SerialDivergent
              id: 30231
              idEnd: 30232
              bounds: 147,365,130,40
            END
            30231_30240:PFCTree.View.Link
              id: 30241
              fromID: 30231
              toID: 30240
              bounds: 205,405,16,35
            END
            29297_29293:PFCTree.View.Link
              id: 29299
              fromID: 29297
              toID: 29293
              bounds: 60,413,16,357
            END
            CHK_LBL_REQUIRED_BS:PFCTree.View.Script
              id: 30240
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"vs_WasteProfile"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"None"};Global variable value;;;true;;
                iCheck_Condition;19;{"<>"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 147,440,130,55
              executeAtClientID: No
            END
            30240_30244:PFCTree.View.ControlLink
              id: 30245
              fromID: 30240
              toID: 30244
              bounds: 205,495,16,55
            END
            LABEL_WASTE_BP:PFCTree.View.Phase
              description: Labels Destroyed and Scrapped
              buildingBlockElementID: YIELDS_AND_RECONCILIATION.CALCULATION
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures,2nd blind signature;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Label data entered";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iEquipment_Type;19;{"ResourceArea"};Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iProfile;3;$$vs_WasteProfile <> NULL ? $$vs_WasteProfile : "DERMS2_LabelsPacking1";Yields and Reconciliation profile;;=SQL_GET("Select Distinct NAME from YR_PROFILE_CONFIG ORDER BY NAME");false;;
                iLimit1_Low;2;NULL;Lower limit for limit 1 figure. If limit 1 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit1_High;2;NULL;Higher limit for limit 1 figure. If limit 1 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_Low;2;NULL;Lower limit for limit 2 figure. If limit 2 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_High;2;NULL;Higher limit for limit 2 figure. If limit 2 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_Low;2;NULL;Lower limit for limit 3 figure. If limit 3 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_High;2;NULL;Higher limit for limit 3 figure. If limit 3 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iParameter_Name;19;;Parameter names for APRM data source;;=SQL_GET("Select Distinct DETAIL1 from YR_PROFILE_CONFIG where DATA_SOURCE='" + TRANSLATE("YIELDS_AND_RECONCILIATION.L_SourceBatchRecord") + "' ORDER BY DETAIL1");true;;
                iParameter_ValueRPLName;19;;Parameter RPL name for APRM data source;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iParameter_ValuePhaseName;19;;Parameter Phase name for APRM data source;;;true;;
                iParameter_ValueCharPath;19;;Complete path of the APRM characteristic (for APRM data source when it is not related to a BP). If iParameter_ValuePhaseName is informed, then this parameter is ignored;;;true;;
                iParameter_ValueCharName;19;;Parameter Characteristic name for APRM data source;;;true;;
                iValidation_OrderStatus;3;NULL;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;"LineClearance";Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;"Stop";Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 30244
              order: 0
              bounds: 147,550,130,83
            END
            30244_30232:PFCTree.View.Link
              id: 30459
              fromID: 30244
              toID: 30232
              bounds: 205,633,16,27
            END
            EndSerialDivergent30231:PFCTree.View.SerialConvergent
              id: 30232
              idEnd: 30231
              bounds: 147,660,130,40
            END
            30232_29293:PFCTree.View.Link
              id: 30243
              fromID: 30232
              toID: 29293
              bounds: 205,700,16,70
            END
            EndParallelDivergent29292:PFCTree.View.ParallelConvergent
              id: 29293
              idEnd: 29292
              bounds: 2,770,275,40
            END
            29293_29287:PFCTree.View.Link
              id: 29296
              fromID: 29293
              toID: 29287
              bounds: 132,810,16,86
            END
            EndNode29287:PFCTree.View.EndNode
              id: 29287
              bounds: 74,896,130,32
            END
          END
          bounds: 2,110,130,83
        END
        29285_39153:PFCTree.View.ControlLink
          id: 39334
          fromID: 29285
          toID: 39153
          bounds: 60,193,16,27
        END
        SET_WASTE_VALS_OP:PFCTree.View.Operation
          description: WASTE
          id: 39153
          order: 0
          design:
            BeginNode39154:PFCTree.View.BeginNode
              id: 39154
              bounds: 0,0,200,70
            END
            39154_39156:PFCTree.View.Link
              id: 39336
              fromID: 39154
              toID: 39156
              bounds: 98,70,6,10
            END
            ParallelDivergent39156:PFCTree.View.ParallelDivergent
              id: 39156
              idEnd: 39234
              bounds: 0,80,1705,7
            END
            39156_39157:PFCTree.View.Link
              id: 39238
              fromID: 39156
              toID: 39157
              bounds: 635,87,6,73
            END
            39156_39158:PFCTree.View.Link
              id: 39239
              fromID: 39156
              toID: 39158
              bounds: 1495,87,6,73
            END
            SerialDivergent39157:PFCTree.View.SerialDivergent
              id: 39157
              idEnd: 39233
              bounds: 0,160,1275,7
            END
            SerialDivergent39158:PFCTree.View.SerialDivergent
              id: 39158
              idEnd: 39177
              bounds: 1290,160,415,7
            END
            39157_39159:PFCTree.View.Link
              id: 39240
              fromID: 39157
              toID: 39159
              bounds: 635,167,6,73
            END
            39158_39160:PFCTree.View.Link
              id: 39241
              fromID: 39158
              toID: 39160
              bounds: 1388,167,6,73
            END
            39158_39161:PFCTree.View.Link
              id: 39242
              fromID: 39158
              toID: 39161
              bounds: 1603,167,6,73
            END
            SerialDivergent39159:PFCTree.View.SerialDivergent
              id: 39159
              idEnd: 39187
              bounds: 0,240,1275,7
            END
            S_RECON_COMPLETE_BS:PFCTree.View.Script
              id: 39160
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Reconciliation"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 1290,240,200,7
              executeAtClientID: No
            END
            ParallelDivergent39161:PFCTree.View.ParallelDivergent
              id: 39161
              idEnd: 39170
              bounds: 1505,240,200,7
            END
            39159_39162:PFCTree.View.Link
              id: 39243
              fromID: 39159
              toID: 39162
              bounds: 98,247,6,73
            END
            39159_39163:PFCTree.View.Link
              id: 39244
              fromID: 39159
              toID: 39163
              bounds: 528,247,6,73
            END
            39159_39164:PFCTree.View.Link
              id: 39245
              fromID: 39159
              toID: 39164
              bounds: 958,247,6,73
            END
            39160_39177:PFCTree.View.Link
              id: 39247
              fromID: 39160
              toID: 39177
              bounds: 1388,247,6,233
            END
            39161_39166:PFCTree.View.Link
              id: 39248
              fromID: 39161
              toID: 39166
              bounds: 1603,247,6,73
            END
            CHK_PRINTING_1_BS:PFCTree.View.Script
              id: 39162
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"vs_WasteProfile"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"DERMS2_LabelsPacking1"};Global variable value;;;true;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,320,200,7
              executeAtClientID: No
            END
            CHK_PRINTING_2_BS:PFCTree.View.Script
              id: 39163
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"vs_WasteProfile"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"DERMS2_LabelsPacking2"};Global variable value;;;true;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 1
              bounds: 430,320,200,7
              executeAtClientID: No
            END
            CHK_PRINTING_3_BS:PFCTree.View.Script
              id: 39164
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"vs_WasteProfile"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"DERMS2_LabelsPacking3"};Global variable value;;;true;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 2
              bounds: 860,320,200,7
              executeAtClientID: No
            END
            P_RECON_COMPLETE_BS:PFCTree.View.Script
              id: 39166
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Reconciliation"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 1505,320,200,7
              executeAtClientID: No
            END
            39162_39167:PFCTree.View.Link
              id: 39249
              fromID: 39162
              toID: 39167
              bounds: 98,327,6,73
            END
            39163_39168:PFCTree.View.Link
              id: 39250
              fromID: 39163
              toID: 39168
              bounds: 528,327,6,73
            END
            39164_39169:PFCTree.View.Link
              id: 39251
              fromID: 39164
              toID: 39169
              bounds: 958,327,6,73
            END
            39166_39170:PFCTree.View.Link
              id: 39252
              fromID: 39166
              toID: 39170
              bounds: 1603,327,6,73
            END
            SerialDivergent39167:PFCTree.View.SerialDivergent
              id: 39167
              idEnd: 39184
              bounds: 0,400,415,7
            END
            SerialDivergent39168:PFCTree.View.SerialDivergent
              id: 39168
              idEnd: 39185
              bounds: 430,400,415,7
            END
            SerialDivergent39169:PFCTree.View.SerialDivergent
              id: 39169
              idEnd: 39186
              bounds: 860,400,415,7
            END
            ParallelConvergent39170:PFCTree.View.ParallelConvergent
              id: 39170
              idEnd: 39161
              bounds: 1505,400,200,7
            END
            39167_39171:PFCTree.View.Link
              id: 39254
              fromID: 39167
              toID: 39171
              bounds: 98,407,6,73
            END
            39167_39172:PFCTree.View.Link
              id: 39255
              fromID: 39167
              toID: 39172
              bounds: 313,407,6,73
            END
            39168_39173:PFCTree.View.Link
              id: 39256
              fromID: 39168
              toID: 39173
              bounds: 528,407,6,73
            END
            39168_39174:PFCTree.View.Link
              id: 39257
              fromID: 39168
              toID: 39174
              bounds: 743,407,6,73
            END
            39169_39175:PFCTree.View.Link
              id: 39258
              fromID: 39169
              toID: 39175
              bounds: 958,407,6,73
            END
            39169_39176:PFCTree.View.Link
              id: 39259
              fromID: 39169
              toID: 39176
              bounds: 1173,407,6,73
            END
            39170_39177:PFCTree.View.Link
              id: 39260
              fromID: 39170
              toID: 39177
              bounds: 1603,407,6,73
            END
            S_BULPUL_WASTE_BS:PFCTree.View.Script
              id: 39171
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotLblPULDes","TotLblPULScr","TotLblBULDes","TotLblBULScr"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL,NULL,NULL,NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"LABEL_WASTE_BP","LABEL_WASTE_BP","LABEL_WASTE_BP","LABEL_WASTE_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CALCULATION\LIMIT_CALCULATED_VALUE[1]","CALCULATION\LIMIT_CALCULATED_VALUE[2]","CALCULATION\CALCULATED_VALUE[1]","CALCULATION\CALCULATED_VALUE[2]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,480,200,7
              executeAtClientID: No
            END
            ParallelDivergent39172:PFCTree.View.ParallelDivergent
              id: 39172
              idEnd: 39181
              bounds: 215,480,200,7
            END
            S_PUL_LBL_WASTE_BS:PFCTree.View.Script
              id: 39173
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotLblPULDes","TotLblPULScr"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL,NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"LABEL_WASTE_BP","LABEL_WASTE_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CALCULATION\LIMIT_CALCULATED_VALUE[1]","CALCULATION\LIMIT_CALCULATED_VALUE[2]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 430,480,200,7
              executeAtClientID: No
            END
            ParallelDivergent39174:PFCTree.View.ParallelDivergent
              id: 39174
              idEnd: 39182
              bounds: 645,480,200,7
            END
            S_BUL_LBL_WASTE_BS:PFCTree.View.Script
              id: 39175
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotLblBULDes","TotLblBULScr"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL,NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"LABEL_WASTE_BP","LABEL_WASTE_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CALCULATION\LIMIT_CALCULATED_VALUE[1]","CALCULATION\LIMIT_CALCULATED_VALUE[2]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 860,480,200,7
              executeAtClientID: No
            END
            ParallelDivergent39176:PFCTree.View.ParallelDivergent
              id: 39176
              idEnd: 39183
              bounds: 1075,480,200,7
            END
            SerialConvergent39177:PFCTree.View.SerialConvergent
              id: 39177
              idEnd: 39158
              bounds: 1290,480,415,7
            END
            39171_39184:PFCTree.View.Link
              id: 39261
              fromID: 39171
              toID: 39184
              bounds: 98,487,6,233
            END
            39172_39178:PFCTree.View.Link
              id: 39262
              fromID: 39172
              toID: 39178
              bounds: 313,487,6,73
            END
            39173_39185:PFCTree.View.Link
              id: 39263
              fromID: 39173
              toID: 39185
              bounds: 528,487,6,233
            END
            39174_39179:PFCTree.View.Link
              id: 39264
              fromID: 39174
              toID: 39179
              bounds: 743,487,6,73
            END
            39175_39186:PFCTree.View.Link
              id: 39265
              fromID: 39175
              toID: 39186
              bounds: 958,487,6,233
            END
            39176_39180:PFCTree.View.Link
              id: 39266
              fromID: 39176
              toID: 39180
              bounds: 1173,487,6,73
            END
            39177_39234:PFCTree.View.Link
              id: 39267
              fromID: 39177
              toID: 39234
              bounds: 1495,487,6,3353
            END
            P_BULPUL_WASTE_BS:PFCTree.View.Script
              id: 39178
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotLblPULDes","TotLblPULScr","TotLblBULDes","TotLblBULScr"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL,NULL,NULL,NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"LABEL_WASTE_BP","LABEL_WASTE_BP","LABEL_WASTE_BP","LABEL_WASTE_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CALCULATION\LIMIT_CALCULATED_VALUE[1]","CALCULATION\LIMIT_CALCULATED_VALUE[2]","CALCULATION\CALCULATED_VALUE[1]","CALCULATION\CALCULATED_VALUE[2]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,560,200,7
              executeAtClientID: No
            END
            P_PUL_LBL_WASTE_BS:PFCTree.View.Script
              id: 39179
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotLblPULDes","TotLblPULScr"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL,NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"LABEL_WASTE_BP","LABEL_WASTE_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CALCULATION\LIMIT_CALCULATED_VALUE[1]","CALCULATION\LIMIT_CALCULATED_VALUE[2]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 645,560,200,7
              executeAtClientID: No
            END
            P_BUL_LBL_WASTE_BS:PFCTree.View.Script
              id: 39180
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotLblBULDes","TotLblBULScr"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL,NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"LABEL_WASTE_BP","LABEL_WASTE_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CALCULATION\LIMIT_CALCULATED_VALUE[1]","CALCULATION\LIMIT_CALCULATED_VALUE[2]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1075,560,200,7
              executeAtClientID: No
            END
            39178_39181:PFCTree.View.Link
              id: 39268
              fromID: 39178
              toID: 39181
              bounds: 313,567,6,73
            END
            39179_39182:PFCTree.View.Link
              id: 39269
              fromID: 39179
              toID: 39182
              bounds: 743,567,6,73
            END
            39180_39183:PFCTree.View.Link
              id: 39270
              fromID: 39180
              toID: 39183
              bounds: 1173,567,6,73
            END
            ParallelConvergent39181:PFCTree.View.ParallelConvergent
              id: 39181
              idEnd: 39172
              bounds: 215,640,200,7
            END
            ParallelConvergent39182:PFCTree.View.ParallelConvergent
              id: 39182
              idEnd: 39174
              bounds: 645,640,200,7
            END
            ParallelConvergent39183:PFCTree.View.ParallelConvergent
              id: 39183
              idEnd: 39176
              bounds: 1075,640,200,7
            END
            39181_39184:PFCTree.View.Link
              id: 39271
              fromID: 39181
              toID: 39184
              bounds: 313,647,6,73
            END
            39182_39185:PFCTree.View.Link
              id: 39272
              fromID: 39182
              toID: 39185
              bounds: 743,647,6,73
            END
            39183_39186:PFCTree.View.Link
              id: 39273
              fromID: 39183
              toID: 39186
              bounds: 1173,647,6,73
            END
            SerialConvergent39184:PFCTree.View.SerialConvergent
              id: 39184
              idEnd: 39167
              bounds: 0,720,415,7
            END
            SerialConvergent39185:PFCTree.View.SerialConvergent
              id: 39185
              idEnd: 39168
              bounds: 430,720,415,7
            END
            SerialConvergent39186:PFCTree.View.SerialConvergent
              id: 39186
              idEnd: 39169
              bounds: 860,720,415,7
            END
            39184_39187:PFCTree.View.Link
              id: 39274
              fromID: 39184
              toID: 39187
              bounds: 205,727,6,73
            END
            39185_39187:PFCTree.View.Link
              id: 39275
              fromID: 39185
              toID: 39187
              bounds: 635,727,6,73
            END
            39186_39187:PFCTree.View.Link
              id: 39276
              fromID: 39186
              toID: 39187
              bounds: 1065,727,6,73
            END
            SerialConvergent39187:PFCTree.View.SerialConvergent
              id: 39187
              idEnd: 39159
              bounds: 0,800,1275,7
            END
            39187_39188:PFCTree.View.Link
              id: 39277
              fromID: 39187
              toID: 39188
              bounds: 313,807,6,73
            END
            SerialDivergent39188:PFCTree.View.SerialDivergent
              id: 39188
              idEnd: 39196
              bounds: 0,880,630,7
            END
            39188_39189:PFCTree.View.Link
              id: 39278
              fromID: 39188
              toID: 39189
              bounds: 98,887,6,73
            END
            39188_39190:PFCTree.View.Link
              id: 39279
              fromID: 39188
              toID: 39190
              bounds: 420,887,6,73
            END
            CHK_VALID_VALS1_BS:PFCTree.View.Script
              id: 39189
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"TotLblPULDes"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{0};Global variable value;;;true;;
                iCheck_Condition;19;{">="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,960,200,7
              executeAtClientID: No
            END
            SerialDivergent39190:PFCTree.View.SerialDivergent
              id: 39190
              idEnd: 39195
              bounds: 215,960,415,7
            END
            39189_39196:PFCTree.View.Link
              id: 39280
              fromID: 39189
              toID: 39196
              bounds: 98,967,6,393
            END
            39190_39191:PFCTree.View.Link
              id: 39281
              fromID: 39190
              toID: 39191
              bounds: 313,967,6,73
            END
            39190_39192:PFCTree.View.Link
              id: 39282
              fromID: 39190
              toID: 39192
              bounds: 528,967,6,73
            END
            S_VALID_VALS1_BS:PFCTree.View.Script
              id: 39191
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotLblPULDes"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{0};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,1040,200,7
              executeAtClientID: No
            END
            ParallelDivergent39192:PFCTree.View.ParallelDivergent
              id: 39192
              idEnd: 39194
              bounds: 430,1040,200,7
            END
            39191_39195:PFCTree.View.Link
              id: 39283
              fromID: 39191
              toID: 39195
              bounds: 313,1047,6,233
            END
            39192_39193:PFCTree.View.Link
              id: 39284
              fromID: 39192
              toID: 39193
              bounds: 528,1047,6,73
            END
            P_VALID_VALS1_BS:PFCTree.View.Script
              id: 39193
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotLblPULDes"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{0};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 430,1120,200,7
              executeAtClientID: No
            END
            39193_39194:PFCTree.View.Link
              id: 39285
              fromID: 39193
              toID: 39194
              bounds: 528,1127,6,73
            END
            ParallelConvergent39194:PFCTree.View.ParallelConvergent
              id: 39194
              idEnd: 39192
              bounds: 430,1200,200,7
            END
            39194_39195:PFCTree.View.Link
              id: 39286
              fromID: 39194
              toID: 39195
              bounds: 528,1207,6,73
            END
            SerialConvergent39195:PFCTree.View.SerialConvergent
              id: 39195
              idEnd: 39190
              bounds: 215,1280,415,7
            END
            39195_39196:PFCTree.View.Link
              id: 39287
              fromID: 39195
              toID: 39196
              bounds: 420,1287,6,73
            END
            SerialConvergent39196:PFCTree.View.SerialConvergent
              id: 39196
              idEnd: 39188
              bounds: 0,1360,630,7
            END
            39196_39197:PFCTree.View.Link
              id: 39288
              fromID: 39196
              toID: 39197
              bounds: 313,1367,6,73
            END
            SerialDivergent39197:PFCTree.View.SerialDivergent
              id: 39197
              idEnd: 39205
              bounds: 0,1440,630,7
            END
            39197_39198:PFCTree.View.Link
              id: 39289
              fromID: 39197
              toID: 39198
              bounds: 98,1447,6,73
            END
            39197_39199:PFCTree.View.Link
              id: 39290
              fromID: 39197
              toID: 39199
              bounds: 420,1447,6,73
            END
            CHK_VALID_VALS2_BS:PFCTree.View.Script
              id: 39198
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"TotLblPULScr"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{0};Global variable value;;;true;;
                iCheck_Condition;19;{">="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,1520,200,7
              executeAtClientID: No
            END
            SerialDivergent39199:PFCTree.View.SerialDivergent
              id: 39199
              idEnd: 39204
              bounds: 215,1520,415,7
            END
            39198_39205:PFCTree.View.Link
              id: 39291
              fromID: 39198
              toID: 39205
              bounds: 98,1527,6,393
            END
            39199_39200:PFCTree.View.Link
              id: 39292
              fromID: 39199
              toID: 39200
              bounds: 313,1527,6,73
            END
            39199_39201:PFCTree.View.Link
              id: 39293
              fromID: 39199
              toID: 39201
              bounds: 528,1527,6,73
            END
            S_VALID_VALS2_BS:PFCTree.View.Script
              id: 39200
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotLblPULScr"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{0};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,1600,200,7
              executeAtClientID: No
            END
            ParallelDivergent39201:PFCTree.View.ParallelDivergent
              id: 39201
              idEnd: 39203
              bounds: 430,1600,200,7
            END
            39200_39204:PFCTree.View.Link
              id: 39294
              fromID: 39200
              toID: 39204
              bounds: 313,1607,6,233
            END
            39201_39202:PFCTree.View.Link
              id: 39295
              fromID: 39201
              toID: 39202
              bounds: 528,1607,6,73
            END
            P_VALID_VALS2_BS:PFCTree.View.Script
              id: 39202
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotLblPULScr"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{0};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 430,1680,200,7
              executeAtClientID: No
            END
            39202_39203:PFCTree.View.Link
              id: 39296
              fromID: 39202
              toID: 39203
              bounds: 528,1687,6,73
            END
            ParallelConvergent39203:PFCTree.View.ParallelConvergent
              id: 39203
              idEnd: 39201
              bounds: 430,1760,200,7
            END
            39203_39204:PFCTree.View.Link
              id: 39297
              fromID: 39203
              toID: 39204
              bounds: 528,1767,6,73
            END
            SerialConvergent39204:PFCTree.View.SerialConvergent
              id: 39204
              idEnd: 39199
              bounds: 215,1840,415,7
            END
            39204_39205:PFCTree.View.Link
              id: 39298
              fromID: 39204
              toID: 39205
              bounds: 420,1847,6,73
            END
            SerialConvergent39205:PFCTree.View.SerialConvergent
              id: 39205
              idEnd: 39197
              bounds: 0,1920,630,7
            END
            39205_39206:PFCTree.View.Link
              id: 39299
              fromID: 39205
              toID: 39206
              bounds: 313,1927,6,73
            END
            SerialDivergent39206:PFCTree.View.SerialDivergent
              id: 39206
              idEnd: 39214
              bounds: 0,2000,630,7
            END
            39206_39207:PFCTree.View.Link
              id: 39300
              fromID: 39206
              toID: 39207
              bounds: 98,2007,6,73
            END
            39206_39208:PFCTree.View.Link
              id: 39301
              fromID: 39206
              toID: 39208
              bounds: 420,2007,6,73
            END
            CHK_VALID_VALS3_BS:PFCTree.View.Script
              id: 39207
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"TotLblBULDes"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{0};Global variable value;;;true;;
                iCheck_Condition;19;{">="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,2080,200,7
              executeAtClientID: No
            END
            SerialDivergent39208:PFCTree.View.SerialDivergent
              id: 39208
              idEnd: 39213
              bounds: 215,2080,415,7
            END
            39207_39214:PFCTree.View.Link
              id: 39302
              fromID: 39207
              toID: 39214
              bounds: 98,2087,6,393
            END
            39208_39209:PFCTree.View.Link
              id: 39303
              fromID: 39208
              toID: 39209
              bounds: 313,2087,6,73
            END
            39208_39210:PFCTree.View.Link
              id: 39304
              fromID: 39208
              toID: 39210
              bounds: 528,2087,6,73
            END
            S_VALID_VALS3_BS:PFCTree.View.Script
              id: 39209
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotLblBULDes"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{0};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,2160,200,7
              executeAtClientID: No
            END
            ParallelDivergent39210:PFCTree.View.ParallelDivergent
              id: 39210
              idEnd: 39212
              bounds: 430,2160,200,7
            END
            39209_39213:PFCTree.View.Link
              id: 39305
              fromID: 39209
              toID: 39213
              bounds: 313,2167,6,233
            END
            39210_39211:PFCTree.View.Link
              id: 39306
              fromID: 39210
              toID: 39211
              bounds: 528,2167,6,73
            END
            P_VALID_VALS3_BS:PFCTree.View.Script
              id: 39211
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotLblBULDes"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{0};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 430,2240,200,7
              executeAtClientID: No
            END
            39211_39212:PFCTree.View.Link
              id: 39307
              fromID: 39211
              toID: 39212
              bounds: 528,2247,6,73
            END
            ParallelConvergent39212:PFCTree.View.ParallelConvergent
              id: 39212
              idEnd: 39210
              bounds: 430,2320,200,7
            END
            39212_39213:PFCTree.View.Link
              id: 39308
              fromID: 39212
              toID: 39213
              bounds: 528,2327,6,73
            END
            SerialConvergent39213:PFCTree.View.SerialConvergent
              id: 39213
              idEnd: 39208
              bounds: 215,2400,415,7
            END
            39213_39214:PFCTree.View.Link
              id: 39309
              fromID: 39213
              toID: 39214
              bounds: 420,2407,6,73
            END
            SerialConvergent39214:PFCTree.View.SerialConvergent
              id: 39214
              idEnd: 39206
              bounds: 0,2480,630,7
            END
            39214_39215:PFCTree.View.Link
              id: 39310
              fromID: 39214
              toID: 39215
              bounds: 313,2487,6,73
            END
            SerialDivergent39215:PFCTree.View.SerialDivergent
              id: 39215
              idEnd: 39223
              bounds: 0,2560,630,7
            END
            39215_39216:PFCTree.View.Link
              id: 39311
              fromID: 39215
              toID: 39216
              bounds: 98,2567,6,73
            END
            39215_39217:PFCTree.View.Link
              id: 39312
              fromID: 39215
              toID: 39217
              bounds: 420,2567,6,73
            END
            CHK_VALID_VALS4_BS:PFCTree.View.Script
              id: 39216
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"TotLblBULScr"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{0};Global variable value;;;true;;
                iCheck_Condition;19;{">="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,2640,200,7
              executeAtClientID: No
            END
            SerialDivergent39217:PFCTree.View.SerialDivergent
              id: 39217
              idEnd: 39222
              bounds: 215,2640,415,7
            END
            39216_39223:PFCTree.View.Link
              id: 39313
              fromID: 39216
              toID: 39223
              bounds: 98,2647,6,393
            END
            39217_39218:PFCTree.View.Link
              id: 39314
              fromID: 39217
              toID: 39218
              bounds: 313,2647,6,73
            END
            39217_39219:PFCTree.View.Link
              id: 39315
              fromID: 39217
              toID: 39219
              bounds: 528,2647,6,73
            END
            S_VALID_VALS4_BS:PFCTree.View.Script
              id: 39218
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotLblBULScr"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{0};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,2720,200,7
              executeAtClientID: No
            END
            ParallelDivergent39219:PFCTree.View.ParallelDivergent
              id: 39219
              idEnd: 39221
              bounds: 430,2720,200,7
            END
            39218_39222:PFCTree.View.Link
              id: 39316
              fromID: 39218
              toID: 39222
              bounds: 313,2727,6,233
            END
            39219_39220:PFCTree.View.Link
              id: 39317
              fromID: 39219
              toID: 39220
              bounds: 528,2727,6,73
            END
            P_VALID_VALS4_BS:PFCTree.View.Script
              id: 39220
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotLblBULScr"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{0};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 430,2800,200,7
              executeAtClientID: No
            END
            39220_39221:PFCTree.View.Link
              id: 39318
              fromID: 39220
              toID: 39221
              bounds: 528,2807,6,73
            END
            ParallelConvergent39221:PFCTree.View.ParallelConvergent
              id: 39221
              idEnd: 39219
              bounds: 430,2880,200,7
            END
            39221_39222:PFCTree.View.Link
              id: 39319
              fromID: 39221
              toID: 39222
              bounds: 528,2887,6,73
            END
            SerialConvergent39222:PFCTree.View.SerialConvergent
              id: 39222
              idEnd: 39217
              bounds: 215,2960,415,7
            END
            39222_39223:PFCTree.View.Link
              id: 39320
              fromID: 39222
              toID: 39223
              bounds: 420,2967,6,73
            END
            SerialConvergent39223:PFCTree.View.SerialConvergent
              id: 39223
              idEnd: 39215
              bounds: 0,3040,630,7
            END
            39223_39224:PFCTree.View.Link
              id: 39321
              fromID: 39223
              toID: 39224
              bounds: 205,3047,6,73
            END
            SerialDivergent39224:PFCTree.View.SerialDivergent
              id: 39224
              idEnd: 39232
              bounds: 0,3120,415,7
            END
            39224_39225:PFCTree.View.Link
              id: 39322
              fromID: 39224
              toID: 39225
              bounds: 98,3127,6,73
            END
            CHK_ONLINE_PRN1_BS:PFCTree.View.Script
              id: 39225
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LabelOnline"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,3200,200,7
              executeAtClientID: No
            END
            39225_39226:PFCTree.View.Link
              id: 39323
              fromID: 39225
              toID: 39226
              bounds: 98,3207,6,73
            END
            SerialDivergent39226:PFCTree.View.SerialDivergent
              id: 39226
              idEnd: 39231
              bounds: 0,3280,415,7
            END
            39226_39227:PFCTree.View.Link
              id: 39324
              fromID: 39226
              toID: 39227
              bounds: 98,3287,6,73
            END
            39226_39228:PFCTree.View.Link
              id: 39325
              fromID: 39226
              toID: 39228
              bounds: 313,3287,6,73
            END
            S_ADD_ONLINE_SCRAP_BS:PFCTree.View.Script
              id: 39227
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotLblPULScr"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$TotLblPULScr + $$NewLblScr};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,3360,200,7
              executeAtClientID: No
            END
            ParallelDivergent39228:PFCTree.View.ParallelDivergent
              id: 39228
              idEnd: 39230
              bounds: 215,3360,200,7
            END
            39227_39231:PFCTree.View.Link
              id: 39326
              fromID: 39227
              toID: 39231
              bounds: 98,3367,6,233
            END
            39228_39229:PFCTree.View.Link
              id: 39327
              fromID: 39228
              toID: 39229
              bounds: 313,3367,6,73
            END
            P_ADD_ONLINE_SCRAP_BS:PFCTree.View.Script
              id: 39229
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotLblPULScr"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$TotLblPULScr + $$NewLblScr};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,3440,200,7
              executeAtClientID: No
            END
            39229_39230:PFCTree.View.Link
              id: 39328
              fromID: 39229
              toID: 39230
              bounds: 313,3447,6,73
            END
            ParallelConvergent39230:PFCTree.View.ParallelConvergent
              id: 39230
              idEnd: 39228
              bounds: 215,3520,200,7
            END
            39230_39231:PFCTree.View.Link
              id: 39329
              fromID: 39230
              toID: 39231
              bounds: 313,3527,6,73
            END
            SerialConvergent39231:PFCTree.View.SerialConvergent
              id: 39231
              idEnd: 39226
              bounds: 0,3600,415,7
            END
            39231_39232:PFCTree.View.Link
              id: 39330
              fromID: 39231
              toID: 39232
              bounds: 205,3607,6,73
            END
            SerialConvergent39232:PFCTree.View.SerialConvergent
              id: 39232
              idEnd: 39224
              bounds: 0,3680,415,7
            END
            39232_39233:PFCTree.View.Link
              id: 39331
              fromID: 39232
              toID: 39233
              bounds: 205,3687,6,73
            END
            SerialConvergent39233:PFCTree.View.SerialConvergent
              id: 39233
              idEnd: 39157
              bounds: 0,3760,1275,7
            END
            39233_39234:PFCTree.View.Link
              id: 39332
              fromID: 39233
              toID: 39234
              bounds: 635,3767,6,73
            END
            ParallelConvergent39234:PFCTree.View.ParallelConvergent
              id: 39234
              idEnd: 39156
              bounds: 0,3840,1705,7
            END
            39234_39235:PFCTree.View.Link
              id: 39333
              fromID: 39234
              toID: 39235
              bounds: 98,3847,6,73
            END
            EndNode39235:PFCTree.View.EndNode
              id: 39235
              bounds: 0,3920,200,70
            END
          END
          bounds: 2,220,130,83
        END
        39153_26406:PFCTree.View.ControlLink
          id: 39335
          fromID: 39153
          toID: 26406
          bounds: 60,303,16,43
        END
        EndNode26406:PFCTree.View.EndNode
          id: 26406
          bounds: 2,346,130,32
        END
      END
      bounds: 727,550,130,83
    END
    P_TIMED_MANUAL_UP:PFCTree.View.UnitProcedure
      description: Timed and Manual activities
      id: 68174
      order: 5
      design:
        BeginNode68175:PFCTree.View.BeginNode
          id: 68175
          bounds: 2,16,130,32
        END
        68175_68181:PFCTree.View.ControlLink
          id: 68203
          fromID: 68175
          toID: 68181
          bounds: 60,48,16,62
        END
        M_SCH_OP:PFCTree.View.Operation
          description: Manual and Scheduled activities
          id: 68181
          order: 0
          design:
            BeginNode68182:PFCTree.View.BeginNode
              id: 68182
              bounds: 74,16,130,32
            END
            68182_68183:PFCTree.View.Link
              id: 68192
              fromID: 68182
              toID: 68183
              bounds: 132,48,16,97
            END
            ParallelDivergent68183:PFCTree.View.ParallelDivergent
              id: 68183
              idEnd: 68188
              bounds: 2,145,275,40
            END
            68183_68185:PFCTree.View.Link
              id: 68194
              fromID: 68183
              toID: 68185
              bounds: 60,185,16,35
            END
            68183_68186:PFCTree.View.Link
              id: 68195
              fromID: 68183
              toID: 68186
              bounds: 205,185,16,35
            END
            SCHEDULER_BP:PFCTree.View.Phase
              description: BatchActivity  Scheduler
              buildingBlockElementID: GENERIC.SCHEDULER_VISUALIZATION
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;Ok button,1 signature;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"This is first signature";Meaning Label for first level signature;;;true;;
                iSignature_Run_Permission;3;"OPERATOR";RUDO for start production;;=GET_UDOS();false;;
                iSignature_Run_Meaning;3;"Production is running";Meaning Label for start production;;;false;;
                iSignature_Stop_Permission;3;"OPERATOR";RUDO for stop production;;=GET_UDOS();false;;
                iSignature_Stop_Meaning;3;"Production is stopped";Meaning Label for stop production;;;false;;
                iSignature_Manual_Permission;3;"OPERATOR";RUDO for create a manual activity;;=GET_UDOS();false;;
                iSignature_Manual_Meaning;3;"Activity was created manually";Meaning Label for create a manual activity;;;false;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iSchedulerName;3;"SCH";Name given to the scheduler script which this BP will monitor;;;false;;
                iStartReason;3;"Start Scheduler";Reason for starting the production the first time.;;;false;;
                iRunReasons;19;{"Start of day"};List of reasons for re-starting the production.;;;false;;
                iStopReasons;19;{"End of day","End of batch"};List of reasons for stopping the production.;;;false;;
                iValidation_OrderStatus;3;;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;;Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;;Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;;Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;{"AlrmSmp","AlrmSOS"};Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;{NO,YES};Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_2
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 68185
              order: 0
              bounds: 2,220,130,83
            END
            SCHEDULE_BS:PFCTree.View.Script
              id: 68186
              buildingBlockElementID: GENERIC.SCHEDULER
              arguments:
                iSchedulerName;3;"SCH";Unique name in the recipe for the scheduler script;;;false;;
                iActivity_Name;19;{"SHIFTCHAL","LINECLEAR","CHALLENGE","OVERPRINT","PHARMACODE"};Name of the activity for signal setting (no spaces or special characters);;;false;;
                iActivity_Label;19;{"Start of shift challenges","Manual line clearance","Manual Equipment Challenge","Manual Overprint ","Manual Pharmacode"};Human readable label of the activity;;;false;;
                iActivity_Type;19;{"Always","Always","Always","Always","Always"};Type of activity;;Run,Stop,Always;false;;
                iActivity_TimeInterval;18;{480,0,0,0,0};Frequency of activity in minutes. For Manual activities, frequency is irrelevant;;;false;;
                iActivity_Reset;17;{YES,YES,YES,YES,YES};Reset activity;;;false;;
                iActivity_Reschedule;19;{"Immediate","Manual","Manual","Manual","Manual"};Rescheduling of the activity;;Immediate,When completed,Never,Manual;false;;
                iActivity_AllowManual;17;{YES,YES,YES,YES,YES};Allow manual triggering of the activity;;;false;;
              end
              type: 0
              order: 1
              bounds: 147,220,130,55
              executeAtClientID: No
            END
            68186_68188:PFCTree.View.Link
              id: 68196
              fromID: 68186
              toID: 68188
              bounds: 205,275,16,165
            END
            68185_68187:PFCTree.View.ControlLink
              id: 68198
              fromID: 68185
              toID: 68187
              bounds: 60,303,16,27
            END
            DEACTIVATE_TESTS_BS:PFCTree.View.Script
              id: 68187
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"TESTS_30_MIN_OP","CLOCK_REASON_1_OP","MANUAL_ACTIVITIES_UP","SCHEDULE_BS"};Object name;;;false;;
                iObject_Reactivate;17;{NO,NO,NO,NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,330,130,55
              executeAtClientID: No
            END
            68187_68188:PFCTree.View.Link
              id: 68199
              fromID: 68187
              toID: 68188
              bounds: 60,385,16,55
            END
            ParallelConvergent68188:PFCTree.View.ParallelConvergent
              id: 68188
              idEnd: 68183
              bounds: 2,440,275,40
            END
            68188_68189:PFCTree.View.Link
              id: 68200
              fromID: 68188
              toID: 68189
              bounds: 132,480,16,70
            END
            S_CHK_CHALL_EOB_BS:PFCTree.View.Script
              id: 68189
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Disable"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 74,550,130,55
              executeAtClientID: No
            END
            68189_68190:PFCTree.View.ControlLink
              id: 68201
              fromID: 68189
              toID: 68190
              bounds: 132,605,16,55
            END
            S_IPC_COMPLETE_BS:PFCTree.View.Script
              id: 68190
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"IPC"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 74,660,130,55
              executeAtClientID: No
            END
            68190_68191:PFCTree.View.ControlLink
              id: 68202
              fromID: 68190
              toID: 68191
              bounds: 132,715,16,71
            END
            EndNode68191:PFCTree.View.EndNode
              id: 68191
              bounds: 74,786,130,32
            END
          END
          bounds: 2,110,130,83
        END
        68181_68176:PFCTree.View.ControlLink
          id: 68204
          fromID: 68181
          toID: 68176
          bounds: 60,193,16,43
        END
        EndNode68176:PFCTree.View.EndNode
          id: 68176
          bounds: 2,236,130,32
        END
      END
      bounds: 872,550,130,83
    END
    30130_10737:PFCTree.View.ControlLink
      id: 30162
      fromID: 30130
      toID: 10737
      bounds: 205,633,16,27
    END
    67045_8216:PFCTree.View.ControlLink
      id: 67473
      fromID: 67045
      toID: 8216
      bounds: 350,633,16,27
    END
    3906_3369:PFCTree.View.Link
      id: 3960
      fromID: 3906
      toID: 3369
      bounds: 495,633,16,357
    END
    58742_25404:PFCTree.View.ControlLink
      id: 59253
      fromID: 58742
      toID: 25404
      bounds: 640,633,16,27
    END
    26404_35938:PFCTree.View.ControlLink
      id: 35949
      fromID: 26404
      toID: 35938
      bounds: 785,633,16,27
    END
    68174_3369:PFCTree.View.Link
      id: 68179
      fromID: 68174
      toID: 3369
      bounds: 930,633,16,357
    END
    P_LINE_SETUP_UP:PFCTree.View.UnitProcedure
      description: LINE SETUP
      id: 10737
      order: 0
      design:
        BeginNode10738:PFCTree.View.BeginNode
          id: 10738
          bounds: 74,16,130,32
        END
        10738_11291:PFCTree.View.Link
          id: 11294
          fromID: 10738
          toID: 11291
          bounds: 132,48,16,97
        END
        ParallelDivergent11291:PFCTree.View.ParallelDivergent
          id: 11291
          idEnd: 11292
          bounds: 2,145,275,40
        END
        11291_11340:PFCTree.View.Link
          id: 11346
          fromID: 11291
          toID: 11340
          bounds: 60,185,16,35
        END
        11291_29430:PFCTree.View.Link
          id: 29434
          fromID: 11291
          toID: 29430
          bounds: 205,185,16,35
        END
        CHECK_EVENTS_START_OP:PFCTree.View.Operation
          description: CHECK EVENTS
          id: 11340
          order: 0
          design:
            BeginNode11341:PFCTree.View.BeginNode
              id: 11341
              bounds: 0,0,200,70
            END
            11341_11342:PFCTree.View.ControlLink
              id: 11344
              fromID: 11341
              toID: 11342
              bounds: 98,70,6,10
            END
            START_BATCH_CHECK_EVENTS_BP:PFCTree.View.Phase
              description: PEL Status Check
              buildingBlockElementID: EQUIPMENT_CHECKS.CHECK_EVENTS
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Open PEL events reviewed, all events requiring closure are closed and signed off";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iCheckObjects;3;"Process Cell and Equipment";Indicates the events of which objects are checked;;Process Cell and Equipment,Only Process Cell,Only Equipment;false;;
                iEquipment_Id;19;;It filter the list of equipment to check. If not defined, then all equipment are checked;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iEquipment_Date;20;;Only for Mobile Equipment. If defined, then only events pior to that date are retrieved;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 11342
              order: 0
              bounds: 0,80,200,70
            END
            11342_11343:PFCTree.View.ControlLink
              id: 20491
              fromID: 11342
              toID: 11343
              bounds: 98,150,6,10
            END
            EndNode11343:PFCTree.View.EndNode
              id: 11343
              bounds: 0,160,200,70
            END
          END
          bounds: 2,220,130,83
        END
        SET_LC_WO_SCRIPTS_OP:PFCTree.View.Operation
          description: SET_LC_WO_SCRIPTS_OP
          id: 29430
          order: 1
          design:
            BeginNode29431:PFCTree.View.BeginNode
              id: 29431
              bounds: 0,0,200,70
            END
            29431_29458:PFCTree.View.Link
              id: 63990
              fromID: 29431
              toID: 29458
              bounds: 98,70,6,10
            END
            SerialDivergent29458:PFCTree.View.SerialDivergent
              id: 29458
              idEnd: 29459
              bounds: 0,80,415,7
            END
            29458_29468:PFCTree.View.Link
              id: 29469
              fromID: 29458
              toID: 29468
              bounds: 98,87,6,73
            END
            29458_29463:PFCTree.View.Link
              id: 29466
              fromID: 29458
              toID: 29463
              bounds: 313,87,6,73
            END
            S_INITIAL_TIME_BS:PFCTree.View.Script
              id: 29468
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"varTime"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NOW()};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,160,200,7
              executeAtClientID: No
            END
            ParallelDivergent29463:PFCTree.View.ParallelDivergent
              id: 29463
              idEnd: 29464
              bounds: 215,160,200,7
            END
            29468_29459:PFCTree.View.Link
              id: 29470
              fromID: 29468
              toID: 29459
              bounds: 98,167,6,233
            END
            29463_29471:PFCTree.View.Link
              id: 29472
              fromID: 29463
              toID: 29471
              bounds: 313,167,6,73
            END
            P_INITIAL_TIME_BS:PFCTree.View.Script
              id: 29471
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"varTime"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NOW()};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,240,200,7
              executeAtClientID: No
            END
            29471_29464:PFCTree.View.Link
              id: 29473
              fromID: 29471
              toID: 29464
              bounds: 313,247,6,73
            END
            EndParallelDivergent29463:PFCTree.View.ParallelConvergent
              id: 29464
              idEnd: 29463
              bounds: 215,320,200,7
            END
            29464_29459:PFCTree.View.Link
              id: 29467
              fromID: 29464
              toID: 29459
              bounds: 313,327,6,73
            END
            EndSerialDivergent29458:PFCTree.View.SerialConvergent
              id: 29459
              idEnd: 29458
              bounds: 0,400,415,7
            END
            29459_29476:PFCTree.View.Link
              id: 29479
              fromID: 29459
              toID: 29476
              bounds: 205,407,6,73
            END
            SerialDivergent29476:PFCTree.View.SerialDivergent
              id: 29476
              idEnd: 29477
              bounds: 0,480,415,7
            END
            29476_29489:PFCTree.View.Link
              id: 29490
              fromID: 29476
              toID: 29489
              bounds: 98,487,6,73
            END
            29476_29481:PFCTree.View.Link
              id: 29484
              fromID: 29476
              toID: 29481
              bounds: 313,487,6,73
            END
            S_SET_WASHOUT_BS:PFCTree.View.Script
              id: 29489
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Washout"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"NO"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 0,560,200,7
              executeAtClientID: No
            END
            ParallelDivergent29481:PFCTree.View.ParallelDivergent
              id: 29481
              idEnd: 29482
              bounds: 215,560,200,7
            END
            29489_29477:PFCTree.View.Link
              id: 29491
              fromID: 29489
              toID: 29477
              bounds: 98,567,6,233
            END
            29481_29486:PFCTree.View.Link
              id: 29487
              fromID: 29481
              toID: 29486
              bounds: 313,567,6,73
            END
            P_SET_WASHOUT_BS:PFCTree.View.Script
              id: 29486
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Washout"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"NO"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 215,640,200,7
              executeAtClientID: No
            END
            29486_29482:PFCTree.View.Link
              id: 29488
              fromID: 29486
              toID: 29482
              bounds: 313,647,6,73
            END
            EndParallelDivergent29481:PFCTree.View.ParallelConvergent
              id: 29482
              idEnd: 29481
              bounds: 215,720,200,7
            END
            29482_29477:PFCTree.View.Link
              id: 29485
              fromID: 29482
              toID: 29477
              bounds: 313,727,6,73
            END
            EndSerialDivergent29476:PFCTree.View.SerialConvergent
              id: 29477
              idEnd: 29476
              bounds: 0,800,415,7
            END
            29477_29432:PFCTree.View.Link
              id: 29480
              fromID: 29477
              toID: 29432
              bounds: 98,807,6,73
            END
            EndNode29432:PFCTree.View.EndNode
              id: 29432
              bounds: 0,880,200,70
            END
          END
          bounds: 147,220,130,83
        END
        11340_11292:PFCTree.View.Link
          id: 20492
          fromID: 11340
          toID: 11292
          bounds: 60,303,16,27
        END
        29430_11292:PFCTree.View.Link
          id: 29494
          fromID: 29430
          toID: 11292
          bounds: 205,303,16,27
        END
        EndParallelDivergent11291:PFCTree.View.ParallelConvergent
          id: 11292
          idEnd: 11291
          bounds: 2,330,275,40
        END
        11292_16413:PFCTree.View.Link
          id: 19179
          fromID: 11292
          toID: 16413
          bounds: 132,370,16,70
        END
        LINE_CHECK_OP:PFCTree.View.Operation
          description: LINE CHECKS
          id: 16413
          order: 0
          design:
            BeginNode16414:PFCTree.View.BeginNode
              id: 16414
              bounds: 219,16,130,32
            END
            16414_18521:PFCTree.View.ControlLink
              id: 18676
              fromID: 16414
              toID: 18521
              bounds: 277,48,16,62
            END
            AUTO_ELAPSED_TIME_CALC_BP:PFCTree.View.Phase
              description: Line Clearance Elapsed Time
              buildingBlockElementID: YIELDS_AND_RECONCILIATION.CALCULATION
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures,2nd blind signature;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Sign to confirm presence of system values";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iEquipment_Type;19;{"ResourceArea"};Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iProfile;3;"DERMS_LCTimeDifference";Yields and Reconciliation profile;;=SQL_GET("Select Distinct NAME from YR_PROFILE_CONFIG ORDER BY NAME");false;;
                iLimit1_Low;2;NULL;Lower limit for limit 1 figure. If limit 1 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit1_High;2;;Higher limit for limit 1 figure. If limit 1 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_Low;2;;Lower limit for limit 2 figure. If limit 2 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_High;2;;Higher limit for limit 2 figure. If limit 2 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_Low;2;;Lower limit for limit 3 figure. If limit 3 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_High;2;;Higher limit for limit 3 figure. If limit 3 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iParameter_Name;19;;Parameter names for APRM data source;;=SQL_GET("Select Distinct DETAIL1 from YR_PROFILE_CONFIG where DATA_SOURCE='" + TRANSLATE("YIELDS_AND_RECONCILIATION.L_SourceBatchRecord") + "' ORDER BY DETAIL1");true;;
                iParameter_ValueRPLName;19;;Parameter RPL name for APRM data source;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iParameter_ValuePhaseName;19;;Parameter Phase name for APRM data source;;;true;;
                iParameter_ValueCharPath;19;;Complete path of the APRM characteristic (for APRM data source when it is not related to a BP). If iParameter_ValuePhaseName is informed, then this parameter is ignored;;;true;;
                iParameter_ValueCharName;19;;Parameter Characteristic name for APRM data source;;;true;;
                iValidation_OrderStatus;3;;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;;Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;;Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;;Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;NULL;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;NULL;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 18521
              order: 0
              bounds: 219,110,130,83
            END
            18521_16420:PFCTree.View.Link
              id: 18523
              fromID: 18521
              toID: 16420
              bounds: 277,193,16,62
            END
            SerialDivergent16420:PFCTree.View.SerialDivergent
              id: 16420
              idEnd: 16432
              bounds: 2,255,565,40
            END
            16420_16421:PFCTree.View.Link
              id: 16441
              fromID: 16420
              toID: 16421
              bounds: 132,295,16,35
            END
            16420_26968:PFCTree.View.Link
              id: 26971
              fromID: 16420
              toID: 26968
              bounds: 422,295,16,70
            END
            CHECK_ELAPSED_TIME_1_BS:PFCTree.View.Script
              id: 16421
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;NULL;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"AUTO_ELAPSED_TIME_CALC_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CALCULATION\LIMIT_CALCULATED_VALUE"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{10080};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"<"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 74,330,130,55
              executeAtClientID: No
            END
            SerialDivergent26968:PFCTree.View.SerialDivergent
              id: 26968
              idEnd: 26969
              bounds: 292,365,275,40
            END
            16421_16423:PFCTree.View.ControlLink
              id: 16443
              fromID: 16421
              toID: 16423
              bounds: 132,385,16,55
            END
            26968_26988:PFCTree.View.Link
              id: 26989
              fromID: 26968
              toID: 26988
              bounds: 350,405,16,35
            END
            26968_26979:PFCTree.View.Link
              id: 26982
              fromID: 26968
              toID: 26979
              bounds: 495,405,16,70
            END
            LINE_CHECKS_BP:PFCTree.View.Phase
              description: Line Clearance Suitability
              buildingBlockElementID: GENERIC.TABULAR_CHECK
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Line clearance checks confirmed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;NO;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{$$LastLCStatus = "OutOfBatch" ? "Previous LC was Full executed out of batch in EMI PO " + $$LastLCPO : "Previous LC Type was " + $$LastLCStatus + " Line Clearance during PO " + $$LastLCPO + "  with output material number " + $$LastLCMatNum,"Confirm the line clearance is still valid."};Instruction List to be implemented by User;;;false;;
                iPassLabel;3;"YES";Label for Pass Checkbox;;;false;;
                iFailLabel;3;"NO";Label for Fail Checkbox;;;false;;
                iChecklist;19;{"Is the previous line clearance type still valid?"};List of Checks to be completed;;;false;;
                iAutoAtypEvent;1;YES;Enable/Disable Auto Event on a failed check;;;false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 16423
              order: 0
              bounds: 74,440,130,83
            END
            S_LCTYPE_FULL_2_BS:PFCTree.View.Script
              id: 26988
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"varLCType","C6"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Full","Time since last line clearance >= 7 days"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 292,440,130,55
              executeAtClientID: No
            END
            ParallelDivergent26979:PFCTree.View.ParallelDivergent
              id: 26979
              idEnd: 26980
              bounds: 437,475,130,40
            END
            26988_26969:PFCTree.View.Link
              id: 26990
              fromID: 26988
              toID: 26969
              bounds: 350,495,16,275
            END
            26979_26985:PFCTree.View.Link
              id: 26986
              fromID: 26979
              toID: 26985
              bounds: 495,515,16,35
            END
            16423_16425:PFCTree.View.Link
              id: 16446
              fromID: 16423
              toID: 16425
              bounds: 132,523,16,62
            END
            P_LCTYPE_FULL_2_BS:PFCTree.View.Script
              id: 26985
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"varLCType","C6"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Full","Time since last line clearance >= 7 days"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 437,550,130,55
              executeAtClientID: No
            END
            SerialDivergent16425:PFCTree.View.SerialDivergent
              id: 16425
              idEnd: 16431
              bounds: 2,585,275,40
            END
            26985_26980:PFCTree.View.Link
              id: 26987
              fromID: 26985
              toID: 26980
              bounds: 495,605,16,55
            END
            16425_16427:PFCTree.View.Link
              id: 16447
              fromID: 16425
              toID: 16427
              bounds: 132,625,16,35
            END
            CHECK_LINE_LC_BS:PFCTree.View.Script
              id: 16427
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;NULL;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"LINE_CHECKS_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"TABULAR_CHECK\CHECK_RESULT[1]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{"NO"};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 74,660,130,55
              executeAtClientID: No
            END
            EndParallelDivergent26979:PFCTree.View.ParallelConvergent
              id: 26980
              idEnd: 26979
              bounds: 437,660,130,40
            END
            26980_26969:PFCTree.View.Link
              id: 26983
              fromID: 26980
              toID: 26969
              bounds: 495,700,16,70
            END
            16427_49702:PFCTree.View.Link
              id: 49705
              fromID: 16427
              toID: 49702
              bounds: 132,715,16,90
            END
            EndSerialDivergent26968:PFCTree.View.SerialConvergent
              id: 26969
              idEnd: 26968
              bounds: 292,770,275,40
            END
            SerialDivergent49702:PFCTree.View.SerialDivergent
              id: 49702
              idEnd: 49703
              bounds: 2,805,275,40
            END
            26969_49718:PFCTree.View.Link
              id: 49721
              fromID: 26969
              toID: 49718
              bounds: 422,810,16,105
            END
            49702_49712:PFCTree.View.Link
              id: 49713
              fromID: 49702
              toID: 49712
              bounds: 60,845,16,35
            END
            49702_49707:PFCTree.View.Link
              id: 49710
              fromID: 49702
              toID: 49707
              bounds: 205,845,16,70
            END
            S_LC_ONE_BS:PFCTree.View.Script
              id: 49712
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LineClearance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"One"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 2,880,130,55
              executeAtClientID: No
            END
            ParallelDivergent49707:PFCTree.View.ParallelDivergent
              id: 49707
              idEnd: 49708
              bounds: 147,915,130,40
            END
            SerialDivergent49718:PFCTree.View.SerialDivergent
              id: 49718
              idEnd: 49719
              bounds: 292,915,275,40
            END
            49712_49703:PFCTree.View.Link
              id: 49714
              fromID: 49712
              toID: 49703
              bounds: 60,935,16,275
            END
            49707_49715:PFCTree.View.Link
              id: 49716
              fromID: 49707
              toID: 49715
              bounds: 205,955,16,35
            END
            49718_49728:PFCTree.View.Link
              id: 49729
              fromID: 49718
              toID: 49728
              bounds: 350,955,16,35
            END
            49718_49723:PFCTree.View.Link
              id: 49726
              fromID: 49718
              toID: 49723
              bounds: 495,955,16,70
            END
            P_LC_ONE_BS:PFCTree.View.Script
              id: 49715
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LineClearance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"One"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 147,990,130,55
              executeAtClientID: No
            END
            S_LC_TWO_BS:PFCTree.View.Script
              id: 49728
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LineClearance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Two"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 292,990,130,55
              executeAtClientID: No
            END
            ParallelDivergent49723:PFCTree.View.ParallelDivergent
              id: 49723
              idEnd: 49724
              bounds: 437,1025,130,40
            END
            49715_49708:PFCTree.View.Link
              id: 49717
              fromID: 49715
              toID: 49708
              bounds: 205,1045,16,55
            END
            49728_49719:PFCTree.View.Link
              id: 49730
              fromID: 49728
              toID: 49719
              bounds: 350,1045,16,275
            END
            49723_49744:PFCTree.View.Link
              id: 49745
              fromID: 49723
              toID: 49744
              bounds: 495,1065,16,35
            END
            EndParallelDivergent49707:PFCTree.View.ParallelConvergent
              id: 49708
              idEnd: 49707
              bounds: 147,1100,130,40
            END
            P_LC_TWO_BS:PFCTree.View.Script
              id: 49744
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LineClearance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Two"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 437,1100,130,55
              executeAtClientID: No
            END
            49708_49703:PFCTree.View.Link
              id: 49711
              fromID: 49708
              toID: 49703
              bounds: 205,1140,16,70
            END
            49744_49724:PFCTree.View.Link
              id: 49746
              fromID: 49744
              toID: 49724
              bounds: 495,1155,16,55
            END
            EndSerialDivergent49702:PFCTree.View.SerialConvergent
              id: 49703
              idEnd: 49702
              bounds: 2,1210,275,40
            END
            EndParallelDivergent49723:PFCTree.View.ParallelConvergent
              id: 49724
              idEnd: 49723
              bounds: 437,1210,130,40
            END
            49703_26382:PFCTree.View.Link
              id: 49706
              fromID: 49703
              toID: 26382
              bounds: 132,1250,16,105
            END
            49724_49719:PFCTree.View.Link
              id: 49727
              fromID: 49724
              toID: 49719
              bounds: 495,1250,16,70
            END
            EndSerialDivergent49718:PFCTree.View.SerialConvergent
              id: 49719
              idEnd: 49718
              bounds: 292,1320,275,40
            END
            SerialDivergent26382:PFCTree.View.SerialDivergent
              id: 26382
              idEnd: 26383
              bounds: 2,1355,275,40
            END
            49719_26348:PFCTree.View.Link
              id: 49722
              fromID: 49719
              toID: 26348
              bounds: 422,1360,16,105
            END
            26382_49671:PFCTree.View.Link
              id: 49672
              fromID: 26382
              toID: 49671
              bounds: 60,1395,16,35
            END
            26382_26396:PFCTree.View.Link
              id: 26399
              fromID: 26382
              toID: 26396
              bounds: 205,1395,16,70
            END
            S_DISABLE_LC_PHASE_1_BS:PFCTree.View.Script
              id: 49671
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"DISABLE_LC_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,1430,130,55
              executeAtClientID: No
            END
            ParallelDivergent26396:PFCTree.View.ParallelDivergent
              id: 26396
              idEnd: 26397
              bounds: 147,1465,130,40
            END
            SerialDivergent26348:PFCTree.View.SerialDivergent
              id: 26348
              idEnd: 26349
              bounds: 292,1465,275,40
            END
            49671_26383:PFCTree.View.Link
              id: 49673
              fromID: 49671
              toID: 26383
              bounds: 60,1485,16,275
            END
            26396_49674:PFCTree.View.Link
              id: 49675
              fromID: 26396
              toID: 49674
              bounds: 205,1505,16,35
            END
            26348_49678:PFCTree.View.Link
              id: 49679
              fromID: 26348
              toID: 49678
              bounds: 350,1505,16,35
            END
            26348_26357:PFCTree.View.Link
              id: 26360
              fromID: 26348
              toID: 26357
              bounds: 495,1505,16,70
            END
            P_DISABLE_LC_PHASE_1_BS:PFCTree.View.Script
              id: 49674
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"DISABLE_LC_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 147,1540,130,55
              executeAtClientID: No
            END
            S_DISABLE_LC_PHASE_2_BS:PFCTree.View.Script
              id: 49678
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"DISABLE_LC_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 292,1540,130,55
              executeAtClientID: No
            END
            ParallelDivergent26357:PFCTree.View.ParallelDivergent
              id: 26357
              idEnd: 26358
              bounds: 437,1575,130,40
            END
            49674_26397:PFCTree.View.Link
              id: 49676
              fromID: 49674
              toID: 26397
              bounds: 205,1595,16,55
            END
            49678_26349:PFCTree.View.Link
              id: 49680
              fromID: 49678
              toID: 26349
              bounds: 350,1595,16,275
            END
            26357_49681:PFCTree.View.Link
              id: 49682
              fromID: 26357
              toID: 49681
              bounds: 495,1615,16,35
            END
            EndParallelDivergent26396:PFCTree.View.ParallelConvergent
              id: 26397
              idEnd: 26396
              bounds: 147,1650,130,40
            END
            P_DISABLE_LC_PHASE_2_BS:PFCTree.View.Script
              id: 49681
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"DISABLE_LC_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 437,1650,130,55
              executeAtClientID: No
            END
            26397_26383:PFCTree.View.Link
              id: 26400
              fromID: 26397
              toID: 26383
              bounds: 205,1690,16,70
            END
            49681_26358:PFCTree.View.Link
              id: 49683
              fromID: 49681
              toID: 26358
              bounds: 495,1705,16,55
            END
            EndSerialDivergent26382:PFCTree.View.SerialConvergent
              id: 26383
              idEnd: 26382
              bounds: 2,1760,275,40
            END
            EndParallelDivergent26357:PFCTree.View.ParallelConvergent
              id: 26358
              idEnd: 26357
              bounds: 437,1760,130,40
            END
            26383_49740:PFCTree.View.Link
              id: 49741
              fromID: 26383
              toID: 49740
              bounds: 132,1800,16,70
            END
            26358_26349:PFCTree.View.Link
              id: 26361
              fromID: 26358
              toID: 26349
              bounds: 495,1800,16,70
            END
            REACTIVATE_ONE_LC_BP:PFCTree.View.Phase
              description: DISABLE BP
              buildingBlockElementID: GENERIC.INSTRUCTION
              arguments:
                iSignature_Required;3;"Ok button";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;NULL;RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;NULL;Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_Print;1;NO;Print button visible;;;false;;
                iButton_Report;19;;Reports available for report button. If Null, report button is not visible;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iEquipment_Type;3;;Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;3;;Equipment Allocation Phase;;;true;;
                iStepAutoComplete;18;;PLC step that signals the completion of the automatic process;;;true;;
                iInstruction;19;{"THIS WILL BE DISABLED BY WORKFLOW"};Default Instructions;;;false;;
                iStep_Instruction;19;;Instructions for step;;;true;;
                iStep_Start;18;;Step range start;;;true;;
                iStep_End;18;;Step range end;;;true;;
                iForceViewPEL;1;NO;If Yes, PEL report must have been called to allow phase validation;;;false;;
                iEnforcedReportName;19;;The Report selected must be viewed by the user before sign off the Phase;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iLabelTemplate;3;;Label template to be printed;;=TRANSLATE ( "OVERALL.L_" + PARSE_LIST ( GET_CONFIG ( "<OVERALL.CONFIG_KEYS>LabelTemplateSpecialList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Disable
              autoStart: No
              usePhaseRet: Yes
              Converge: No
              id: 49740
              order: 0
              bounds: 74,1870,130,83
            END
            EndSerialDivergent26348:PFCTree.View.SerialConvergent
              id: 26349
              idEnd: 26348
              bounds: 292,1870,275,40
            END
            26349_49747:PFCTree.View.Link
              id: 49748
              fromID: 26349
              toID: 49747
              bounds: 422,1910,16,70
            END
            49740_16431:PFCTree.View.Link
              id: 49742
              fromID: 49740
              toID: 16431
              bounds: 132,1953,16,27
            END
            SerialConvergent16431:PFCTree.View.SerialConvergent
              id: 16431
              idEnd: 16425
              bounds: 2,1980,275,40
            END
            REACTIVATE_TWO_LC_BP:PFCTree.View.Phase
              description: DISABLE BP
              buildingBlockElementID: GENERIC.INSTRUCTION
              arguments:
                iSignature_Required;3;"Ok button";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;NULL;RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;NULL;Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_Print;1;NO;Print button visible;;;false;;
                iButton_Report;19;;Reports available for report button. If Null, report button is not visible;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iEquipment_Type;3;;Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;3;;Equipment Allocation Phase;;;true;;
                iStepAutoComplete;18;;PLC step that signals the completion of the automatic process;;;true;;
                iInstruction;19;{"THIS WILL BE DISABLED BY WORKFLOW"};Default Instructions;;;false;;
                iStep_Instruction;19;;Instructions for step;;;true;;
                iStep_Start;18;;Step range start;;;true;;
                iStep_End;18;;Step range end;;;true;;
                iForceViewPEL;1;NO;If Yes, PEL report must have been called to allow phase validation;;;false;;
                iEnforcedReportName;19;;The Report selected must be viewed by the user before sign off the Phase;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iLabelTemplate;3;;Label template to be printed;;=TRANSLATE ( "OVERALL.L_" + PARSE_LIST ( GET_CONFIG ( "<OVERALL.CONFIG_KEYS>LabelTemplateSpecialList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Disable
              autoStart: No
              usePhaseRet: Yes
              Converge: No
              id: 49747
              order: 0
              bounds: 364,1980,130,83
            END
            16431_16432:PFCTree.View.Link
              id: 16453
              fromID: 16431
              toID: 16432
              bounds: 132,2020,16,70
            END
            49747_16432:PFCTree.View.Link
              id: 49749
              fromID: 49747
              toID: 16432
              bounds: 422,2063,16,27
            END
            SerialConvergent16432:PFCTree.View.SerialConvergent
              id: 16432
              idEnd: 16420
              bounds: 2,2090,565,40
            END
            16432_16433:PFCTree.View.Link
              id: 49739
              fromID: 16432
              toID: 16433
              bounds: 277,2130,16,86
            END
            EndNode16433:PFCTree.View.EndNode
              id: 16433
              bounds: 219,2216,130,32
            END
          END
          bounds: 74,440,130,83
        END
        16413_19620:PFCTree.View.ControlLink
          id: 26994
          fromID: 16413
          toID: 19620
          bounds: 132,523,16,27
        END
        SETUP_EQUIPMENT_OP:PFCTree.View.Operation
          description: EQUIPMENT SETUP
          id: 19620
          order: 0
          design:
            BeginNode19621:PFCTree.View.BeginNode
              id: 19621
              bounds: 437,16,130,32
            END
            19621_67490:PFCTree.View.Link
              id: 67493
              fromID: 19621
              toID: 67490
              bounds: 495,48,16,97
            END
            SerialDivergent67490:PFCTree.View.SerialDivergent
              id: 67490
              idEnd: 67491
              bounds: 365,145,275,40
            END
            67490_67495:PFCTree.View.Link
              id: 67496
              fromID: 67490
              toID: 67495
              bounds: 423,185,16,35
            END
            67490_67498:PFCTree.View.Link
              id: 67501
              fromID: 67490
              toID: 67498
              bounds: 568,185,16,70
            END
            S_CLEAR_SETUP_LC_ALRM_BS:PFCTree.View.Script
              id: 67495
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AlrmLCSetup"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 365,220,130,55
              executeAtClientID: No
            END
            ParallelDivergent67498:PFCTree.View.ParallelDivergent
              id: 67498
              idEnd: 67499
              bounds: 510,255,130,40
            END
            67495_67491:PFCTree.View.Link
              id: 67497
              fromID: 67495
              toID: 67491
              bounds: 423,275,16,275
            END
            67498_67503:PFCTree.View.Link
              id: 67504
              fromID: 67498
              toID: 67503
              bounds: 568,295,16,35
            END
            P_CLEAR_SETUP_LC_ALRM_BS:PFCTree.View.Script
              id: 67503
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AlrmLCSetup"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 510,330,130,55
              executeAtClientID: No
            END
            67503_67499:PFCTree.View.Link
              id: 67505
              fromID: 67503
              toID: 67499
              bounds: 568,385,16,55
            END
            EndParallelDivergent67498:PFCTree.View.ParallelConvergent
              id: 67499
              idEnd: 67498
              bounds: 510,440,130,40
            END
            67499_67491:PFCTree.View.Link
              id: 67502
              fromID: 67499
              toID: 67491
              bounds: 568,480,16,70
            END
            EndSerialDivergent67490:PFCTree.View.SerialConvergent
              id: 67491
              idEnd: 67490
              bounds: 365,550,275,40
            END
            67491_19622:PFCTree.View.Link
              id: 67494
              fromID: 67491
              toID: 19622
              bounds: 495,590,16,105
            END
            ParallelDivergent19622:PFCTree.View.ParallelDivergent
              id: 19622
              idEnd: 19633
              bounds: 2,695,1000,40
            END
            19622_19623:PFCTree.View.Link
              id: 19636
              fromID: 19622
              toID: 19623
              bounds: 60,735,16,35
            END
            19622_43509:PFCTree.View.Link
              id: 43512
              fromID: 19622
              toID: 43509
              bounds: 277,735,16,70
            END
            19622_43421:PFCTree.View.Link
              id: 43424
              fromID: 19622
              toID: 43421
              bounds: 495,735,16,70
            END
            19622_19625:PFCTree.View.Link
              id: 19638
              fromID: 19622
              toID: 19625
              bounds: 785,735,16,70
            END
            PHARMACODE_SETUP_BP:PFCTree.View.Phase
              description: Pharmacode Setup
              buildingBlockElementID: MERPS_CHECK.PRINTED_COMPONENT
              arguments:
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Pharmacode has been setup ";Signature meaning for Standard 1st level;;;true;;
                iSignature_Config_Permission;3;"OPERATOR";RUDO for signature for AdHoc screen;;=GET_UDOS();true;;
                iSignature_Config_Meaning;3;"Ad hoc Pharmacode added ";Signature meaning for AdHoc screen;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_AdHoc;1;YES;If yes then Ad-Hoc button is displayed in overview screen;;;false;;
                iCreateAtypEventForAdhoc;1;YES;Indicates if an atypical event is created when a component is added with Ad-hoc screen;;;true;;
                iSetup_Display;19;PharmacodeSetupBp_iSetup_Display;Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_SignatureRequired;19;PharmacodeSetupBp_iSetup_SignatureRequired;Required signature level for Setup component;;={"Ok button","1 signature","2 signatures"};true;;
                iSetup_SignaturePermission2ndLevel;19;PharmacodeSetupBp_iSetup_SignaturePermission2ndLevel;RUDO for second level signature for Setup component;;=GET_UDOS();true;;
                iSetup_SignatureMeaning2ndLevel;19;PharmacodeSetupBp_iSetup_SignatureMeaning2ndLevel;Signature meaning for 2nd level signature for Setup component;;;true;;
                iSetup_ComponentType;19;PharmacodeSetupBp_iSetup_ComponentType;Setup Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_ComponentAction;19;PharmacodeSetupBp_iSetup_ComponentAction;Setup Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_ComponentReason;19;PharmacodeSetupBp_iSetup_ComponentReason;Setup Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentSetupReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_Instruction;19;PharmacodeSetupBp_iSetup_Instruction;Setup Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_AdditionalInfo1Label;19;PharmacodeSetupBp_iSetup_AdditionalInfo1Label;Setup additional info label 1;;;true;;
                iSetup_AdditionalInfo1Value;19;PharmacodeSetupBp_iSetup_AdditionalInfo1Value;Setup additional info value 1;;;true;;
                iSetup_AdditionalInfo2Label;19;PharmacodeSetupBp_iSetup_AdditionalInfo2Label;Setup additional info label 2;;;true;;
                iSetup_AdditionalInfo2Value;19;PharmacodeSetupBp_iSetup_AdditionalInfo2Value;Setup additional info value 2;;;true;;
                iSetup_AdditionalInfo3Label;19;PharmacodeSetupBp_iSetup_AdditionalInfo3Label;Setup additional info label 3;;;true;;
                iSetup_AdditionalInfo3Value;19;PharmacodeSetupBp_iSetup_AdditionalInfo3Value;Setup additional info value 3;;;true;;
                iSetup_RequirePassFail;17;PharmacodeSetupBp_iSetup_RequirePassFail;Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
                iRun_Display;19;;Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_SignatureRequired;19;;Required signature level for Run component;;={"Ok button","1 signature","2 signatures"};true;;
                iRun_SignaturePermission2ndLevel;19;;RUDO for second level signature for Run component;;=GET_UDOS();true;;
                iRun_SignatureMeaning2ndLevel;19;;Signature meaning for 2nd level signature for Run component;;;true;;
                iRun_ComponentType;19;;Run Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_ComponentAction;19;;Run Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_ComponentReason;19;;Run Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentRunReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_Instruction;19;;Run Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_AdditionalInfo1Label;19;;Run additional info label 1;;;true;;
                iRun_AdditionalInfo1Value;19;;Run additional info value 1;;;true;;
                iRun_AdditionalInfo2Label;19;;Run additional info label 2;;;true;;
                iRun_AdditionalInfo2Value;19;;Run additional info value 2;;;true;;
                iRun_AdditionalInfo3Label;19;;Run additional info label 3;;;true;;
                iRun_AdditionalInfo3Value;19;;Run additional info value 3;;;true;;
                iRun_RequirePassFail;17;;Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
                iMissingItemAllowed;1;NO;If yes then BP can be closed with missing Component;;;false;;
                iValidation_OrderStatus;3;;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;;Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;;Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;;Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 19623
              order: 0
              bounds: 2,770,130,83
            END
            ParallelDivergent43509:PFCTree.View.ParallelDivergent
              id: 43509
              idEnd: 43510
              bounds: 147,805,275,40
            END
            SerialDivergent43421:PFCTree.View.SerialDivergent
              id: 43421
              idEnd: 43422
              bounds: 437,805,130,40
            END
            SerialDivergent19625:PFCTree.View.SerialDivergent
              id: 19625
              idEnd: 19632
              bounds: 582,805,420,40
            END
            43509_43515:PFCTree.View.Link
              id: 43516
              fromID: 43509
              toID: 43515
              bounds: 205,845,16,35
            END
            43509_43518:PFCTree.View.Link
              id: 43521
              fromID: 43509
              toID: 43518
              bounds: 350,845,16,70
            END
            43421_43444:PFCTree.View.Link
              id: 43445
              fromID: 43421
              toID: 43444
              bounds: 495,845,16,35
            END
            19625_35374:PFCTree.View.Link
              id: 35375
              fromID: 19625
              toID: 35374
              bounds: 640,845,16,35
            END
            19625_37171:PFCTree.View.Link
              id: 37172
              fromID: 19625
              toID: 37171
              bounds: 857,845,16,35
            END
            19623_19626:PFCTree.View.ControlLink
              id: 19641
              fromID: 19623
              toID: 19626
              bounds: 60,853,16,27
            END
            PHARMACODE_VER_BP:PFCTree.View.Phase
              description: Pharmacode Verification
              buildingBlockElementID: MERPS_CHECK.PRINTED_COMPONENT
              arguments:
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Pharmacode set up has been verified";Signature meaning for Standard 1st level;;;true;;
                iSignature_Config_Permission;3;"OPERATOR";RUDO for signature for AdHoc screen;;=GET_UDOS();true;;
                iSignature_Config_Meaning;3;"Ad hoc Pharmacode added ";Signature meaning for AdHoc screen;;;true;;
                iSignature_PreviousPhaseCheck;19;{"PHARMACODE_SETUP_BP"};The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_AdHoc;1;YES;If yes then Ad-Hoc button is displayed in overview screen;;;false;;
                iCreateAtypEventForAdhoc;1;YES;Indicates if an atypical event is created when a component is added with Ad-hoc screen;;;true;;
                iSetup_Display;19;PharmacodeVerBp_iSetup_Display;Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_SignatureRequired;19;PharmacodeVerBp_iSetup_SignatureRequired;Required signature level for Setup component;;={"Ok button","1 signature","2 signatures"};true;;
                iSetup_SignaturePermission2ndLevel;19;PharmacodeVerBp_iSetup_SignaturePermission2ndLevel;RUDO for second level signature for Setup component;;=GET_UDOS();true;;
                iSetup_SignatureMeaning2ndLevel;19;PharmacodeVerBp_iSetup_SignatureMeaning2ndLevel;Signature meaning for 2nd level signature for Setup component;;;true;;
                iSetup_ComponentType;19;PharmacodeVerBp_iSetup_ComponentType;Setup Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_ComponentAction;19;PharmacodeVerBp_iSetup_ComponentAction;Setup Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_ComponentReason;19;PharmacodeVerBp_iSetup_ComponentReason;Setup Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentSetupReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_Instruction;19;PharmacodeVerBp_iSetup_Instruction;Setup Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_AdditionalInfo1Label;19;PharmacodeVerBp_iSetup_AdditionalInfo1Label;Setup additional info label 1;;;true;;
                iSetup_AdditionalInfo1Value;19;PharmacodeVerBp_iSetup_AdditionalInfo1Value;Setup additional info value 1;;;true;;
                iSetup_AdditionalInfo2Label;19;PharmacodeVerBp_iSetup_AdditionalInfo2Label;Setup additional info label 2;;;true;;
                iSetup_AdditionalInfo2Value;19;PharmacodeVerBp_iSetup_AdditionalInfo2Value;Setup additional info value 2;;;true;;
                iSetup_AdditionalInfo3Label;19;PharmacodeVerBp_iSetup_AdditionalInfo3Label;Setup additional info label 3;;;true;;
                iSetup_AdditionalInfo3Value;19;PharmacodeVerBp_iSetup_AdditionalInfo3Value;Setup additional info value 3;;;true;;
                iSetup_RequirePassFail;17;PharmacodeVerBp_iSetup_RequirePassFail;Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
                iRun_Display;19;;Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_SignatureRequired;19;;Required signature level for Run component;;={"Ok button","1 signature","2 signatures"};true;;
                iRun_SignaturePermission2ndLevel;19;;RUDO for second level signature for Run component;;=GET_UDOS();true;;
                iRun_SignatureMeaning2ndLevel;19;;Signature meaning for 2nd level signature for Run component;;;true;;
                iRun_ComponentType;19;;Run Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_ComponentAction;19;;Run Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_ComponentReason;19;;Run Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentRunReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_Instruction;19;;Run Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_AdditionalInfo1Label;19;;Run additional info label 1;;;true;;
                iRun_AdditionalInfo1Value;19;;Run additional info value 1;;;true;;
                iRun_AdditionalInfo2Label;19;;Run additional info label 2;;;true;;
                iRun_AdditionalInfo2Value;19;;Run additional info value 2;;;true;;
                iRun_AdditionalInfo3Label;19;;Run additional info label 3;;;true;;
                iRun_AdditionalInfo3Value;19;;Run additional info value 3;;;true;;
                iRun_RequirePassFail;17;;Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
                iMissingItemAllowed;1;NO;If yes then BP can be closed with missing Component;;;false;;
                iValidation_OrderStatus;3;NULL;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;NULL;Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;NULL;Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;NULL;Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 19626
              order: 0
              bounds: 2,880,130,83
            END
            OVERPRINT_START_BATCH:PFCTree.View.Phase
              description: Overprint Setup
              buildingBlockElementID: MERPS_CHECK.PRINTED_COMPONENT
              arguments:
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Overprint has been setup";Signature meaning for Standard 1st level;;;true;;
                iSignature_Config_Permission;3;"OPERATOR";RUDO for signature for AdHoc screen;;=GET_UDOS();true;;
                iSignature_Config_Meaning;3;"Overprint Ad hoc selected";Signature meaning for AdHoc screen;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_AdHoc;1;YES;If yes then Ad-Hoc button is displayed in overview screen;;;false;;
                iCreateAtypEventForAdhoc;1;YES;Indicates if an atypical event is created when a component is added with Ad-hoc screen;;;true;;
                iSetup_Display;19;$$vs_PrnProfile = "DERMS2_LabelsOffline2" ? AltOverprintStartBatch_iSetup_Display : OverprintStartBatch_iSetup_Display;Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_SignatureRequired;19;$$vs_PrnProfile = "DERMS2_LabelsOffline2" ? AltOverprintStartBatch_iSetup_SignatureRequired : OverprintStartBatch_iSetup_SignatureRequired;Required signature level for Setup component;;={"Ok button","1 signature","2 signatures"};true;;
                iSetup_SignaturePermission2ndLevel;19;$$vs_PrnProfile = "DERMS2_LabelsOffline2" ? AltOverprintStartBatch_iSetup_SignaturePermission2ndLevel : OverprintStartBatch_iSetup_SignaturePermission2ndLevel;RUDO for second level signature for Setup component;;=GET_UDOS();true;;
                iSetup_SignatureMeaning2ndLevel;19;$$vs_PrnProfile = "DERMS2_LabelsOffline2" ? AltOverprintStartBatch_iSetup_SignatureMeaning2ndLevel : OverprintStartBatch_iSetup_SignatureMeaning2ndLevel;Signature meaning for 2nd level signature for Setup component;;;true;;
                iSetup_ComponentType;19;$$vs_PrnProfile = "DERMS2_LabelsOffline2"? AltOverprintStartBatch_iSetup_ComponentType : OverprintStartBatch_iSetup_ComponentType;Setup Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_ComponentAction;19;$$vs_PrnProfile = "DERMS2_LabelsOffline2" ? AltOverprintStartBatch_iSetup_ComponentAction : OverprintStartBatch_iSetup_ComponentAction;Setup Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_ComponentReason;19;$$vs_PrnProfile = "DERMS2_LabelsOffline2" ? AltOverprintStartBatch_iSetup_ComponentReason : OverprintStartBatch_iSetup_ComponentReason;Setup Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentSetupReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_Instruction;19;$$vs_PrnProfile = "DERMS2_LabelsOffline2" ? AltOverprintStartBatch_iSetup_Instruction : OverprintStartBatch_iSetup_Instruction;Setup Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_AdditionalInfo1Label;19;NULL;Setup additional info label 1;;;true;;
                iSetup_AdditionalInfo1Value;19;NULL;Setup additional info value 1;;;true;;
                iSetup_AdditionalInfo2Label;19;NULL;Setup additional info label 2;;;true;;
                iSetup_AdditionalInfo2Value;19;NULL;Setup additional info value 2;;;true;;
                iSetup_AdditionalInfo3Label;19;NULL;Setup additional info label 3;;;true;;
                iSetup_AdditionalInfo3Value;19;NULL;Setup additional info value 3;;;true;;
                iSetup_RequirePassFail;17;$$vs_PrnProfile = "DERMS2_LabelsOffline2" ? AltOverprintStartBatch_iSetup_RequirePassFail : OverprintStartBatch_iSetup_RequirePassFail;Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
                iRun_Display;19;;Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_SignatureRequired;19;;Required signature level for Run component;;={"Ok button","1 signature","2 signatures"};true;;
                iRun_SignaturePermission2ndLevel;19;;RUDO for second level signature for Run component;;=GET_UDOS();true;;
                iRun_SignatureMeaning2ndLevel;19;;Signature meaning for 2nd level signature for Run component;;;true;;
                iRun_ComponentType;19;;Run Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_ComponentAction;19;;Run Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_ComponentReason;19;;Run Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentRunReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_Instruction;19;;Run Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_AdditionalInfo1Label;19;;Run additional info label 1;;;true;;
                iRun_AdditionalInfo1Value;19;;Run additional info value 1;;;true;;
                iRun_AdditionalInfo2Label;19;;Run additional info label 2;;;true;;
                iRun_AdditionalInfo2Value;19;;Run additional info value 2;;;true;;
                iRun_AdditionalInfo3Label;19;;Run additional info label 3;;;true;;
                iRun_AdditionalInfo3Value;19;;Run additional info value 3;;;true;;
                iRun_RequirePassFail;17;;Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
                iMissingItemAllowed;1;NO;If yes then BP can be closed with missing Component;;;false;;
                iValidation_OrderStatus;3;NULL;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;NULL;Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;NULL;Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;NULL;Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 43515
              order: 0
              bounds: 147,880,130,83
            END
            CHK_IF_CP78_BS:PFCTree.View.Script
              id: 43444
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;NULL;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"ProcessCell"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"DBUCP78"};Global variable value;;;true;;
                iCheck_Condition;19;{"<>"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 437,880,130,55
              executeAtClientID: No
            END
            IS_NOT_ONLINE_BS:PFCTree.View.Script
              id: 35374
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LabelOnline"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"NO"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 582,880,130,55
              executeAtClientID: No
            END
            LABELS_PRINTED_1_BP:PFCTree.View.Phase
              description: Label Prints
              buildingBlockElementID: YIELDS_AND_RECONCILIATION.CALCULATION
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures,2nd blind signature;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Label data entered";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;NULL;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iEquipment_Type;19;{"ResourceArea"};Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iProfile;3;"DERMS2_LabelsOffline2";Yields and Reconciliation profile;;=SQL_GET("Select Distinct NAME from YR_PROFILE_CONFIG ORDER BY NAME");false;;
                iLimit1_Low;2;NULL;Lower limit for limit 1 figure. If limit 1 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit1_High;2;NULL;Higher limit for limit 1 figure. If limit 1 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_Low;2;NULL;Lower limit for limit 2 figure. If limit 2 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_High;2;NULL;Higher limit for limit 2 figure. If limit 2 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_Low;2;NULL;Lower limit for limit 3 figure. If limit 3 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_High;2;NULL;Higher limit for limit 3 figure. If limit 3 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iParameter_Name;19;;Parameter names for APRM data source;;=SQL_GET("Select Distinct DETAIL1 from YR_PROFILE_CONFIG where DATA_SOURCE='" + TRANSLATE("YIELDS_AND_RECONCILIATION.L_SourceBatchRecord") + "' ORDER BY DETAIL1");true;;
                iParameter_ValueRPLName;19;;Parameter RPL name for APRM data source;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iParameter_ValuePhaseName;19;;Parameter Phase name for APRM data source;;;true;;
                iParameter_ValueCharPath;19;;Complete path of the APRM characteristic (for APRM data source when it is not related to a BP). If iParameter_ValuePhaseName is informed, then this parameter is ignored;;;true;;
                iParameter_ValueCharName;19;;Parameter Characteristic name for APRM data source;;;true;;
                iValidation_OrderStatus;3;NULL;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;"Overprint";Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;"Ready";Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 37171
              order: 1
              bounds: 799,880,130,83
            END
            SerialDivergent43518:PFCTree.View.SerialDivergent
              id: 43518
              idEnd: 43519
              bounds: 292,915,130,40
            END
            43444_43427:PFCTree.View.ControlLink
              id: 43446
              fromID: 43444
              toID: 43427
              bounds: 495,935,16,55
            END
            35374_19632:PFCTree.View.Link
              id: 35376
              fromID: 35374
              toID: 19632
              bounds: 640,935,16,605
            END
            43518_43519:PFCTree.View.Link
              id: 43520
              fromID: 43518
              toID: 43519
              bounds: 350,955,16,35
            END
            19626_19633:PFCTree.View.Link
              id: 19643
              fromID: 19626
              toID: 19633
              bounds: 60,963,16,2777
            END
            43515_43510:PFCTree.View.Link
              id: 43517
              fromID: 43515
              toID: 43510
              bounds: 205,963,16,137
            END
            37171_37174:PFCTree.View.Link
              id: 37177
              fromID: 37171
              toID: 37174
              bounds: 857,963,16,62
            END
            EndSerialDivergent43518:PFCTree.View.SerialConvergent
              id: 43519
              idEnd: 43518
              bounds: 292,990,130,40
            END
            COMPONENT_SIZE_CHK_BP:PFCTree.View.Phase
              description: Component Size Change
              buildingBlockElementID: GENERIC.TABULAR_CHECK
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Check performed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668016"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Leaflet Presence Sensor setup required following all component size change."};Instruction List to be implemented by User;;;false;;
                iPassLabel;3;"YES";Label for Pass Checkbox;;;false;;
                iFailLabel;3;"NO";Label for Fail Checkbox;;;false;;
                iChecklist;19;{"Has a component size change occurred for this batch"};List of Checks to be completed;;;false;;
                iAutoAtypEvent;1;NO;Enable/Disable Auto Event on a failed check;;;false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 43427
              order: 0
              bounds: 437,990,130,83
            END
            SerialDivergent37174:PFCTree.View.SerialDivergent
              id: 37174
              idEnd: 37175
              bounds: 727,1025,275,40
            END
            43519_43510:PFCTree.View.Link
              id: 43522
              fromID: 43519
              toID: 43510
              bounds: 350,1030,16,70
            END
            37174_37184:PFCTree.View.Link
              id: 37185
              fromID: 37174
              toID: 37184
              bounds: 785,1065,16,35
            END
            37174_37179:PFCTree.View.Link
              id: 37182
              fromID: 37174
              toID: 37179
              bounds: 930,1065,16,70
            END
            43427_43430:PFCTree.View.Link
              id: 43433
              fromID: 43427
              toID: 43430
              bounds: 495,1073,16,62
            END
            EndParallelDivergent43509:PFCTree.View.ParallelConvergent
              id: 43510
              idEnd: 43509
              bounds: 147,1100,275,40
            END
            S_GET_LBL_VALUES_BS:PFCTree.View.Script
              id: 37184
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotLblPULPrn","NewLblScr"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL,NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"LABELS_PRINTED_1_BP","LABELS_PRINTED_1_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CALCULATION\LIMIT_CALCULATED_VALUE[1]","CALCULATION\LIMIT_CALCULATED_VALUE[2]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 727,1100,130,55
              executeAtClientID: No
            END
            SerialDivergent43430:PFCTree.View.SerialDivergent
              id: 43430
              idEnd: 43431
              bounds: 437,1135,130,40
            END
            ParallelDivergent37179:PFCTree.View.ParallelDivergent
              id: 37179
              idEnd: 37180
              bounds: 872,1135,130,40
            END
            43510_43487:PFCTree.View.Link
              id: 43514
              fromID: 43510
              toID: 43487
              bounds: 277,1140,16,105
            END
            37184_37175:PFCTree.View.Link
              id: 37186
              fromID: 37184
              toID: 37175
              bounds: 785,1155,16,275
            END
            43430_43436:PFCTree.View.Link
              id: 43437
              fromID: 43430
              toID: 43436
              bounds: 495,1175,16,35
            END
            37179_37188:PFCTree.View.Link
              id: 37189
              fromID: 37179
              toID: 37188
              bounds: 930,1175,16,35
            END
            COMPONENT_CHG_YES_BS:PFCTree.View.Script
              id: 43436
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;NULL;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"COMPONENT_SIZE_CHK_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"TABULAR_CHECK\CHECK_RESULT[1]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{"YES"};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 437,1210,130,55
              executeAtClientID: No
            END
            P_GET_LBL_VALUES_BS:PFCTree.View.Script
              id: 37188
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotLblPULPrn","NewLblScr"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL,NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"LABELS_PRINTED_1_BP","LABELS_PRINTED_1_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CALCULATION\LIMIT_CALCULATED_VALUE[1]","CALCULATION\LIMIT_CALCULATED_VALUE[2]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 872,1210,130,55
              executeAtClientID: No
            END
            SerialDivergent43487:PFCTree.View.SerialDivergent
              id: 43487
              idEnd: 43488
              bounds: 147,1245,275,40
            END
            43436_43440:PFCTree.View.ControlLink
              id: 43441
              fromID: 43436
              toID: 43440
              bounds: 495,1265,16,55
            END
            37188_37180:PFCTree.View.Link
              id: 37190
              fromID: 37188
              toID: 37180
              bounds: 930,1265,16,55
            END
            43487_43492:PFCTree.View.Link
              id: 43493
              fromID: 43487
              toID: 43492
              bounds: 277,1285,16,35
            END
            IS_ONLINE_BS:PFCTree.View.Script
              id: 43492
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LabelOnline"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 219,1320,130,55
              executeAtClientID: No
            END
            LEAFLET_SENSOR_SETUP_BP:PFCTree.View.Phase
              description: Leaflet Presence Sensor Set Up
              buildingBlockElementID: GENERIC.CHECKLIST
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"All activities on this screen have been completed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668016"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Ensure Leaflet Presence sensor set-up has been performed. Engineer to document activity in the PEL."};Instructions with a maximum of 3 lines;;;false;;
                iCheckList_Option;19;{"Confirm Leaflet Presence sensor has been set-up"};Check List lines to follow;;;false;;
                iCheckList_SigReq;19;{NULL};Required signature level for the option;;1 signature,2 signatures;true;;
                iMode;3;"One Check";Selection mode;;={ TRANSLATE("GENERIC.L_CheckListAllCheck"), TRANSLATE("GENERIC.L_CheckListOneCheck") };false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
                iPartial_SignOff;1;NO;Indicates if is not necesary to check all elements at the same time;;;false;;
                iEnforceCheckListSequence;1;NO;Indicates if checking items according to the list sequence is enforced;;;false;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 43440
              order: 0
              bounds: 437,1320,130,83
            END
            EndParallelDivergent37179:PFCTree.View.ParallelConvergent
              id: 37180
              idEnd: 37179
              bounds: 872,1320,130,40
            END
            37180_37175:PFCTree.View.Link
              id: 37183
              fromID: 37180
              toID: 37175
              bounds: 930,1360,16,70
            END
            43492_51183:PFCTree.View.Link
              id: 51186
              fromID: 43492
              toID: 51183
              bounds: 277,1375,16,90
            END
            43440_43431:PFCTree.View.Link
              id: 43442
              fromID: 43440
              toID: 43431
              bounds: 495,1403,16,27
            END
            EndSerialDivergent43430:PFCTree.View.SerialConvergent
              id: 43431
              idEnd: 43430
              bounds: 437,1430,130,40
            END
            EndSerialDivergent37174:PFCTree.View.SerialConvergent
              id: 37175
              idEnd: 37174
              bounds: 727,1430,275,40
            END
            SerialDivergent51183:PFCTree.View.SerialDivergent
              id: 51183
              idEnd: 51184
              bounds: 147,1465,275,40
            END
            43431_43422:PFCTree.View.Link
              id: 43434
              fromID: 43431
              toID: 43422
              bounds: 495,1470,16,70
            END
            37175_19632:PFCTree.View.Link
              id: 37193
              fromID: 37175
              toID: 19632
              bounds: 857,1470,16,70
            END
            51183_51189:PFCTree.View.Link
              id: 51190
              fromID: 51183
              toID: 51189
              bounds: 205,1505,16,35
            END
            51183_51192:PFCTree.View.Link
              id: 51195
              fromID: 51183
              toID: 51192
              bounds: 350,1505,16,70
            END
            S_WAIT_FOR_LBL_VALS_BS:PFCTree.View.Script
              id: 51189
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"LABELS_PRINTED_1_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CALCULATION\USER_ID_1"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{"Any Text"};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"<>"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 147,1540,130,55
              executeAtClientID: No
            END
            EndSerialDivergent43421:PFCTree.View.SerialConvergent
              id: 43422
              idEnd: 43421
              bounds: 437,1540,130,40
            END
            SerialConvergent19632:PFCTree.View.SerialConvergent
              id: 19632
              idEnd: 19625
              bounds: 582,1540,420,40
            END
            ParallelDivergent51192:PFCTree.View.ParallelDivergent
              id: 51192
              idEnd: 51193
              bounds: 292,1575,130,40
            END
            43422_19633:PFCTree.View.Link
              id: 43443
              fromID: 43422
              toID: 19633
              bounds: 495,1580,16,2160
            END
            19632_19633:PFCTree.View.Link
              id: 19647
              fromID: 19632
              toID: 19633
              bounds: 785,1580,16,2160
            END
            51189_51184:PFCTree.View.Link
              id: 51191
              fromID: 51189
              toID: 51184
              bounds: 205,1595,16,275
            END
            51192_51197:PFCTree.View.Link
              id: 51198
              fromID: 51192
              toID: 51197
              bounds: 350,1615,16,35
            END
            P_WAIT_FOR_LBL_VALS_BS:PFCTree.View.Script
              id: 51197
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"LABELS_PRINTED_1_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CALCULATION\USER_ID_1"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{"Any Text"};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"<>"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 292,1650,130,55
              executeAtClientID: No
            END
            51197_51193:PFCTree.View.Link
              id: 51199
              fromID: 51197
              toID: 51193
              bounds: 350,1705,16,55
            END
            EndParallelDivergent51192:PFCTree.View.ParallelConvergent
              id: 51193
              idEnd: 51192
              bounds: 292,1760,130,40
            END
            51193_51184:PFCTree.View.Link
              id: 51196
              fromID: 51193
              toID: 51184
              bounds: 350,1800,16,70
            END
            EndSerialDivergent51183:PFCTree.View.SerialConvergent
              id: 51184
              idEnd: 51183
              bounds: 147,1870,275,40
            END
            51184_43488:PFCTree.View.Link
              id: 51188
              fromID: 51184
              toID: 43488
              bounds: 277,1910,16,70
            END
            EndSerialDivergent43487:PFCTree.View.SerialConvergent
              id: 43488
              idEnd: 43487
              bounds: 147,1980,275,40
            END
            43488_26995:PFCTree.View.Link
              id: 43495
              fromID: 43488
              toID: 26995
              bounds: 277,2020,16,105
            END
            SerialDivergent26995:PFCTree.View.SerialDivergent
              id: 26995
              idEnd: 26996
              bounds: 147,2125,275,40
            END
            26995_27012:PFCTree.View.Link
              id: 27013
              fromID: 26995
              toID: 27012
              bounds: 205,2165,16,35
            END
            26995_27000:PFCTree.View.Link
              id: 27003
              fromID: 26995
              toID: 27000
              bounds: 350,2165,16,70
            END
            S_OVP_ALRM_NULL_BS:PFCTree.View.Script
              id: 27012
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_Alarm1"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,2200,130,55
              executeAtClientID: No
            END
            ParallelDivergent27000:PFCTree.View.ParallelDivergent
              id: 27000
              idEnd: 27001
              bounds: 292,2235,130,40
            END
            27012_26996:PFCTree.View.Link
              id: 27014
              fromID: 27012
              toID: 26996
              bounds: 205,2255,16,275
            END
            27000_27006:PFCTree.View.Link
              id: 27007
              fromID: 27000
              toID: 27006
              bounds: 350,2275,16,35
            END
            P_OVP_ALRM_NULL_BS:PFCTree.View.Script
              id: 27006
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_Alarm1"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 292,2310,130,55
              executeAtClientID: No
            END
            27006_27001:PFCTree.View.Link
              id: 27008
              fromID: 27006
              toID: 27001
              bounds: 350,2365,16,55
            END
            EndParallelDivergent27000:PFCTree.View.ParallelConvergent
              id: 27001
              idEnd: 27000
              bounds: 292,2420,130,40
            END
            27001_26996:PFCTree.View.Link
              id: 27004
              fromID: 27001
              toID: 26996
              bounds: 350,2460,16,70
            END
            EndSerialDivergent26995:PFCTree.View.SerialConvergent
              id: 26996
              idEnd: 26995
              bounds: 147,2530,275,40
            END
            26996_35921:PFCTree.View.Link
              id: 35924
              fromID: 26996
              toID: 35921
              bounds: 277,2570,16,105
            END
            SerialDivergent35921:PFCTree.View.SerialDivergent
              id: 35921
              idEnd: 35922
              bounds: 147,2675,275,40
            END
            35921_35931:PFCTree.View.Link
              id: 35932
              fromID: 35921
              toID: 35931
              bounds: 205,2715,16,35
            END
            35921_35926:PFCTree.View.Link
              id: 35929
              fromID: 35921
              toID: 35926
              bounds: 350,2715,16,70
            END
            S_BX_OVERPRINT_BS:PFCTree.View.Script
              id: 35931
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Overprint"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Ready"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 147,2750,130,55
              executeAtClientID: No
            END
            ParallelDivergent35926:PFCTree.View.ParallelDivergent
              id: 35926
              idEnd: 35927
              bounds: 292,2785,130,40
            END
            35931_35922:PFCTree.View.Link
              id: 35933
              fromID: 35931
              toID: 35922
              bounds: 205,2805,16,275
            END
            35926_35934:PFCTree.View.Link
              id: 35935
              fromID: 35926
              toID: 35934
              bounds: 350,2825,16,35
            END
            P_BX_OVERPRINT_BS:PFCTree.View.Script
              id: 35934
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Overprint"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Ready"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 292,2860,130,55
              executeAtClientID: No
            END
            35934_35927:PFCTree.View.Link
              id: 35936
              fromID: 35934
              toID: 35927
              bounds: 350,2915,16,55
            END
            EndParallelDivergent35926:PFCTree.View.ParallelConvergent
              id: 35927
              idEnd: 35926
              bounds: 292,2970,130,40
            END
            35927_35922:PFCTree.View.Link
              id: 35930
              fromID: 35927
              toID: 35922
              bounds: 350,3010,16,70
            END
            EndSerialDivergent35921:PFCTree.View.SerialConvergent
              id: 35922
              idEnd: 35921
              bounds: 147,3080,275,40
            END
            35922_19631:PFCTree.View.Link
              id: 35925
              fromID: 35922
              toID: 19631
              bounds: 277,3120,16,70
            END
            OVERPRINT_START_VER_BP:PFCTree.View.Phase
              description: Overprint Verification
              buildingBlockElementID: MERPS_CHECK.PRINTED_COMPONENT
              arguments:
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Overprint has been verified";Signature meaning for Standard 1st level;;;true;;
                iSignature_Config_Permission;3;"OPERATOR";RUDO for signature for AdHoc screen;;=GET_UDOS();true;;
                iSignature_Config_Meaning;3;"Overprint Ad hoc selected";Signature meaning for AdHoc screen;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_AdHoc;1;YES;If yes then Ad-Hoc button is displayed in overview screen;;;false;;
                iCreateAtypEventForAdhoc;1;YES;Indicates if an atypical event is created when a component is added with Ad-hoc screen;;;true;;
                iSetup_Display;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintStartVerBp_iSetup_Display : OverprintStartVerBp_iSetup_Display;Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_SignatureRequired;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintStartVerBp_iSetup_SignatureRequired : OverprintStartVerBp_iSetup_SignatureRequired;Required signature level for Setup component;;={"Ok button","1 signature","2 signatures"};true;;
                iSetup_SignaturePermission2ndLevel;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintStartVerBp_iSetup_SignaturePermission2ndLevel : OverprintStartVerBp_iSetup_SignaturePermission2ndLevel;RUDO for second level signature for Setup component;;=GET_UDOS();true;;
                iSetup_SignatureMeaning2ndLevel;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintStartVerBp_iSetup_SignatureMeaning2ndLevel : OverprintStartVerBp_iSetup_SignatureMeaning2ndLevel;Signature meaning for 2nd level signature for Setup component;;;true;;
                iSetup_ComponentType;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintStartVerBp_iSetup_ComponentType : OverprintStartVerBp_iSetup_ComponentType;Setup Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_ComponentAction;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintStartVerBp_iSetup_ComponentAction : OverprintStartVerBp_iSetup_ComponentAction;Setup Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_ComponentReason;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintStartVerBp_iSetup_ComponentReason : OverprintStartVerBp_iSetup_ComponentReason;Setup Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentSetupReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_Instruction;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintStartVerBp_iSetup_Instruction : OverprintStartVerBp_iSetup_Instruction;Setup Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_AdditionalInfo1Label;19;NULL;Setup additional info label 1;;;true;;
                iSetup_AdditionalInfo1Value;19;NULL;Setup additional info value 1;;;true;;
                iSetup_AdditionalInfo2Label;19;NULL;Setup additional info label 2;;;true;;
                iSetup_AdditionalInfo2Value;19;NULL;Setup additional info value 2;;;true;;
                iSetup_AdditionalInfo3Label;19;NULL;Setup additional info label 3;;;true;;
                iSetup_AdditionalInfo3Value;19;NULL;Setup additional info value 3;;;true;;
                iSetup_RequirePassFail;17;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintStartVerBp_iSetup_RequirePassFail : OverprintStartVerBp_iSetup_RequirePassFail;Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
                iRun_Display;19;;Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_SignatureRequired;19;;Required signature level for Run component;;={"Ok button","1 signature","2 signatures"};true;;
                iRun_SignaturePermission2ndLevel;19;;RUDO for second level signature for Run component;;=GET_UDOS();true;;
                iRun_SignatureMeaning2ndLevel;19;;Signature meaning for 2nd level signature for Run component;;;true;;
                iRun_ComponentType;19;;Run Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_ComponentAction;19;;Run Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_ComponentReason;19;;Run Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentRunReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_Instruction;19;;Run Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_AdditionalInfo1Label;19;;Run additional info label 1;;;true;;
                iRun_AdditionalInfo1Value;19;;Run additional info value 1;;;true;;
                iRun_AdditionalInfo2Label;19;;Run additional info label 2;;;true;;
                iRun_AdditionalInfo2Value;19;;Run additional info value 2;;;true;;
                iRun_AdditionalInfo3Label;19;;Run additional info label 3;;;true;;
                iRun_AdditionalInfo3Value;19;;Run additional info value 3;;;true;;
                iRun_RequirePassFail;17;;Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
                iMissingItemAllowed;1;NO;If yes then BP can be closed with missing Component;;;false;;
                iValidation_OrderStatus;3;NULL;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;NULL;Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;NULL;Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;NULL;Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 19631
              order: 0
              bounds: 219,3190,130,83
            END
            19631_39552:PFCTree.View.Link
              id: 39555
              fromID: 19631
              toID: 39552
              bounds: 277,3273,16,62
            END
            SerialDivergent39552:PFCTree.View.SerialDivergent
              id: 39552
              idEnd: 39553
              bounds: 219,3335,130,40
            END
            39552_39752:PFCTree.View.Link
              id: 39753
              fromID: 39552
              toID: 39752
              bounds: 277,3375,16,35
            END
            CHECK_SERIAL_4_BS:PFCTree.View.Script
              id: 39752
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;"AND";Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"vs_Serial","DecomChecks"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"Yes","Yes"};Global variable value;;;true;;
                iCheck_Condition;19;{"=","="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 219,3410,130,55
              executeAtClientID: No
            END
            39752_39757:PFCTree.View.ControlLink
              id: 39758
              fromID: 39752
              toID: 39757
              bounds: 277,3465,16,55
            END
            OVP_SOB_DECOMMISSION_BP:PFCTree.View.Phase
              description: Serialisation De-commissioning
              buildingBlockElementID: GENERIC.CHECKLIST
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"De-commissioning performed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Confirm De-commissioning activities have been completed."};Instructions with a maximum of 3 lines;;;false;;
                iCheckList_Option;19;{"Start  Of Batch Overprint Sample De-Commissioned"};Check List lines to follow;;;false;;
                iCheckList_SigReq;19;{NULL};Required signature level for the option;;1 signature,2 signatures;true;;
                iMode;3;"All Check";Selection mode;;={ TRANSLATE("GENERIC.L_CheckListAllCheck"), TRANSLATE("GENERIC.L_CheckListOneCheck") };false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
                iPartial_SignOff;1;NO;Indicates if is not necesary to check all elements at the same time;;;false;;
                iEnforceCheckListSequence;1;NO;Indicates if checking items according to the list sequence is enforced;;;false;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 39757
              order: 0
              bounds: 219,3520,130,83
            END
            39757_39553:PFCTree.View.Link
              id: 39760
              fromID: 39757
              toID: 39553
              bounds: 277,3603,16,27
            END
            EndSerialDivergent39552:PFCTree.View.SerialConvergent
              id: 39553
              idEnd: 39552
              bounds: 219,3630,130,40
            END
            39553_19633:PFCTree.View.Link
              id: 39556
              fromID: 39553
              toID: 19633
              bounds: 277,3670,16,70
            END
            ParallelConvergent19633:PFCTree.View.ParallelConvergent
              id: 19633
              idEnd: 19622
              bounds: 2,3740,1000,40
            END
            19633_39447:PFCTree.View.Link
              id: 39450
              fromID: 19633
              toID: 39447
              bounds: 495,3780,16,105
            END
            SerialDivergent39447:PFCTree.View.SerialDivergent
              id: 39447
              idEnd: 39448
              bounds: 220,3885,565,40
            END
            39447_39464:PFCTree.View.Link
              id: 39465
              fromID: 39447
              toID: 39464
              bounds: 278,3925,16,35
            END
            39447_39490:PFCTree.View.Link
              id: 39493
              fromID: 39447
              toID: 39490
              bounds: 568,3925,16,70
            END
            CHK_PROCESSCELL1_BS:PFCTree.View.Script
              id: 39464
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;"OR";Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"ProcessCell","ProcessCell"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"DBUCP71","DBUCP79"};Global variable value;;;true;;
                iCheck_Condition;19;{"=","="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 220,3960,130,55
              executeAtClientID: No
            END
            ParallelDivergent39490:PFCTree.View.ParallelDivergent
              id: 39490
              idEnd: 39491
              bounds: 365,3995,420,40
            END
            39464_39448:PFCTree.View.Link
              id: 39466
              fromID: 39464
              toID: 39448
              bounds: 278,4015,16,605
            END
            39490_51200:PFCTree.View.Link
              id: 51203
              fromID: 39490
              toID: 51200
              bounds: 495,4035,16,70
            END
            39490_39505:PFCTree.View.Link
              id: 39508
              fromID: 39490
              toID: 39505
              bounds: 713,4035,16,70
            END
            SerialDivergent51200:PFCTree.View.SerialDivergent
              id: 51200
              idEnd: 51201
              bounds: 365,4105,275,40
            END
            SerialDivergent39505:PFCTree.View.SerialDivergent
              id: 39505
              idEnd: 39506
              bounds: 655,4105,130,40
            END
            51200_51205:PFCTree.View.Link
              id: 51206
              fromID: 51200
              toID: 51205
              bounds: 423,4145,16,35
            END
            51200_51212:PFCTree.View.Link
              id: 51213
              fromID: 51200
              toID: 51212
              bounds: 568,4145,16,35
            END
            39505_39514:PFCTree.View.Link
              id: 39515
              fromID: 39505
              toID: 39514
              bounds: 713,4145,16,35
            END
            NEW_CHKWEIGH_EQUIPMENT_BS:PFCTree.View.Script
              id: 51205
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;"AND";Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"ProcessCell","NewTypeChkWeigher"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"DBUCP78","Yes"};Global variable value;;;true;;
                iCheck_Condition;19;{"=","="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 365,4180,130,55
              executeAtClientID: No
            END
            EQP_SETUP_CHECK_BP:PFCTree.View.Phase
              description: Checkweigher Setup Checks
              buildingBlockElementID: GENERIC.CHECKLIST
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Equipment setup checks confirmed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Confirm the following"};Instructions with a maximum of 3 lines;;;false;;
                iCheckList_Option;19;{"Counters are set to zero","Correct " + $$vs_ProductType + " size is selected","Standard deviation check complete"};Check List lines to follow;;;false;;
                iCheckList_SigReq;19;{NULL,NULL,NULL};Required signature level for the option;;1 signature,2 signatures;true;;
                iMode;3;"All Check";Selection mode;;={ TRANSLATE("GENERIC.L_CheckListAllCheck"), TRANSLATE("GENERIC.L_CheckListOneCheck") };false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
                iPartial_SignOff;1;NO;Indicates if is not necesary to check all elements at the same time;;;false;;
                iEnforceCheckListSequence;1;NO;Indicates if checking items according to the list sequence is enforced;;;false;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 51212
              order: 1
              bounds: 510,4180,130,83
            END
            CHK_2ND_EQUIPMENT_BS:PFCTree.View.Script
              id: 39514
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;"AND";Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"ProcessCell","2ndCheckweigher"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"DBUCP78","Yes"};Global variable value;;;true;;
                iCheck_Condition;19;{"=","="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 655,4180,130,55
              executeAtClientID: No
            END
            51205_51208:PFCTree.View.ControlLink
              id: 51209
              fromID: 51205
              toID: 51208
              bounds: 423,4235,16,55
            END
            39514_43576:PFCTree.View.ControlLink
              id: 43577
              fromID: 39514
              toID: 43576
              bounds: 713,4235,16,55
            END
            51212_51201:PFCTree.View.Link
              id: 51214
              fromID: 51212
              toID: 51201
              bounds: 568,4263,16,137
            END
            EQP_SETUP_CHECK1_BP:PFCTree.View.Phase
              description: Checkweigher Setup Checks
              buildingBlockElementID: GENERIC.CHECKLIST
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Equipment setup checks confirmed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Confirm the following"};Instructions with a maximum of 3 lines;;;false;;
                iCheckList_Option;19;{"Counters are set to zero","Correct " + $$vs_ProductType + " size is selected"};Check List lines to follow;;;false;;
                iCheckList_SigReq;19;{NULL,NULL};Required signature level for the option;;1 signature,2 signatures;true;;
                iMode;3;"All Check";Selection mode;;={ TRANSLATE("GENERIC.L_CheckListAllCheck"), TRANSLATE("GENERIC.L_CheckListOneCheck") };false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
                iPartial_SignOff;1;NO;Indicates if is not necesary to check all elements at the same time;;;false;;
                iEnforceCheckListSequence;1;NO;Indicates if checking items according to the list sequence is enforced;;;false;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 51208
              order: 0
              bounds: 365,4290,130,83
            END
            EQP_SETUP_CHECK2_BP:PFCTree.View.Phase
              description: Pack Checkweigher Setup Checks
              buildingBlockElementID: GENERIC.CHECKLIST
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Equipment setup checks confirmed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Confirm the following"};Instructions with a maximum of 3 lines;;;false;;
                iCheckList_Option;19;{"Counters are set to zero","Correct " + $$vs_ProductType + " size is selected","Standard deviation check complete"};Check List lines to follow;;;false;;
                iCheckList_SigReq;19;{NULL,NULL,NULL};Required signature level for the option;;1 signature,2 signatures;true;;
                iMode;3;"All Check";Selection mode;;={ TRANSLATE("GENERIC.L_CheckListAllCheck"), TRANSLATE("GENERIC.L_CheckListOneCheck") };false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
                iPartial_SignOff;1;NO;Indicates if is not necesary to check all elements at the same time;;;false;;
                iEnforceCheckListSequence;1;NO;Indicates if checking items according to the list sequence is enforced;;;false;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 43576
              order: 0
              bounds: 655,4290,130,83
            END
            51208_51201:PFCTree.View.Link
              id: 51210
              fromID: 51208
              toID: 51201
              bounds: 423,4373,16,27
            END
            43576_39506:PFCTree.View.Link
              id: 43578
              fromID: 43576
              toID: 39506
              bounds: 713,4373,16,27
            END
            EndSerialDivergent51200:PFCTree.View.SerialConvergent
              id: 51201
              idEnd: 51200
              bounds: 365,4400,275,40
            END
            EndSerialDivergent39505:PFCTree.View.SerialConvergent
              id: 39506
              idEnd: 39505
              bounds: 655,4400,130,40
            END
            51201_39491:PFCTree.View.Link
              id: 51211
              fromID: 51201
              toID: 39491
              bounds: 495,4440,16,70
            END
            39506_39491:PFCTree.View.Link
              id: 39510
              fromID: 39506
              toID: 39491
              bounds: 713,4440,16,70
            END
            EndParallelDivergent39490:PFCTree.View.ParallelConvergent
              id: 39491
              idEnd: 39490
              bounds: 365,4510,420,40
            END
            39491_39448:PFCTree.View.Link
              id: 39498
              fromID: 39491
              toID: 39448
              bounds: 568,4550,16,70
            END
            EndSerialDivergent39447:PFCTree.View.SerialConvergent
              id: 39448
              idEnd: 39447
              bounds: 220,4620,565,40
            END
            39448_19634:PFCTree.View.Link
              id: 39452
              fromID: 39448
              toID: 19634
              bounds: 495,4660,16,86
            END
            EndNode19634:PFCTree.View.EndNode
              id: 19634
              bounds: 437,4746,130,32
            END
          END
          bounds: 74,550,130,83
        END
        19620_20505:PFCTree.View.ControlLink
          id: 28123
          fromID: 19620
          toID: 20505
          bounds: 132,633,16,27
        END
        MACHINE_SETTINGS_OP:PFCTree.View.Operation
          description: MACHINE SETTINGS
          id: 20505
          order: 0
          design:
            BeginNode20506:PFCTree.View.BeginNode
              id: 20506
              bounds: 74,16,130,32
            END
            20506_39517:PFCTree.View.Link
              id: 39520
              fromID: 20506
              toID: 39517
              bounds: 132,48,16,97
            END
            ParallelDivergent39517:PFCTree.View.ParallelDivergent
              id: 39517
              idEnd: 39518
              bounds: 2,145,275,40
            END
            39517_39523:PFCTree.View.Link
              id: 39524
              fromID: 39517
              toID: 39523
              bounds: 60,185,16,35
            END
            39517_39526:PFCTree.View.Link
              id: 39529
              fromID: 39517
              toID: 39526
              bounds: 205,185,16,70
            END
            MACHINE_SPEED_BP:PFCTree.View.Phase
              description: Machine Speed
              buildingBlockElementID: GENERIC.MEASUREMENT_ENTRY
              arguments:
                iSignature_Required;3;"2 signatures";Required signature level;;1 signature,2 signatures,2nd blind signature;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Machine speed entered";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;"OPERATOR";Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;"Machine speed verified";Meaning Label for second level signature;;;true;;
                iSignature_Permission2ndLevelOverwrite;3;"OPERATOR";Required RUDO for second level signature at Measurement Overwrite screen;;=GET_UDOS();true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Enter the machine speed"};Instructions with a maximum of 3 lines;;;false;;
                iMeasurement1_Type;3;MachineSpeedBp_iMeasurement1_Type;Measurement type1;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));false;;
                iMeasurement1_Minimum;2;MachineSpeedBp_iMeasurement1_Minimum;Minimum warning value1;;;true;;
                iMeasurement1_Target;2;MachineSpeedBp_iMeasurement1_Target;Target value1;;;true;;
                iMeasurement1_Maximum;2;MachineSpeedBp_iMeasurement1_Maximum;Maximum warning value1;;;true;;
                iMeasurement1_EquipmentType;3;"ResourceArea";Equipment Type1;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");false;;
                iMeasurement1_RPLName;3;;RPL name1. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement1_EquipmentAllocationPhase;3;"EQUIPMENT_ALLOCATION_BP";Equipment Allocation Phase1;;;false;;
                iMeasurement1_CreateAtypEventOnOverwrite;1;YES;Indicates if creates or not an atypical event when overwrites value;;;false;;
                iMeasurement1_IP21Timeout;1;NO;Indicates if IP21 timeout is controlled for this measurement;;;false;;
                iMeasurement1_ForceManual;1;NO;Indicates if the measurement is considered as manual;;;false;;
                iMeasurement2_Type;3;NULL;Measurement type2;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement2_Minimum;2;;Minimum warning value2;;;true;;
                iMeasurement2_Target;2;;Target value2;;;true;;
                iMeasurement2_Maximum;2;;Maximum warning value2;;;true;;
                iMeasurement2_EquipmentType;3;;Equipment Type2;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement2_RPLName;3;;RPL name2. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement2_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement2_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement2_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement2_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement3_Type;3;;Measurement type3;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement3_Minimum;2;;Minimum warning value3;;;true;;
                iMeasurement3_Target;2;;Target value3;;;true;;
                iMeasurement3_Maximum;2;;Maximum warning value3;;;true;;
                iMeasurement3_EquipmentType;3;;Equipment Type3;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement3_RPLName;3;;RPL name3. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement3_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement3_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement3_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement3_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement4_Type;3;;Measurement type4;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement4_Minimum;2;;Minimum warning value4;;;true;;
                iMeasurement4_Target;2;;Target value4;;;true;;
                iMeasurement4_Maximum;2;;Maximum warning value4;;;true;;
                iMeasurement4_EquipmentType;3;;Equipment Type4;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement4_RPLName;3;;RPL name4. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement4_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement4_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement4_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement4_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement5_Type;3;;Measurement type5;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement5_Minimum;2;;Minimum warning value5;;;true;;
                iMeasurement5_Target;2;;Target value5;;;true;;
                iMeasurement5_Maximum;2;;Maximum warning value5;;;true;;
                iMeasurement5_EquipmentType;3;;Equipment Type4;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement5_RPLName;3;;RPL name5. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement5_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement5_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement5_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement5_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement6_Type;3;;Measurement type6;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement6_Minimum;2;;Minimum warning value6;;;true;;
                iMeasurement6_Target;2;;Target value6;;;true;;
                iMeasurement6_Maximum;2;;Maximum warning value6;;;true;;
                iMeasurement6_EquipmentType;3;;Equipment Type6;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement6_RPLName;3;;RPL name6. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement6_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement6_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement6_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement6_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement7_Type;3;;Measurement type7;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement7_Minimum;2;;Minimum warning value7;;;true;;
                iMeasurement7_Target;2;;Target value7;;;true;;
                iMeasurement7_Maximum;2;;Maximum warning value7;;;true;;
                iMeasurement7_EquipmentType;3;;Equipment Type7;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement7_RPLName;3;;RPL name7. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement7_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement7_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement7_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement7_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iAutoAtypEvent;1;YES;If YES, atypical event is raised in case of out of limits entry;;;false;;
                iIP21Timeout_Flag;3;"Global";Indicates which value is used for IP21 timeout. Environmental global variable or local BP argument;;Global,Local;false;;
                iIP21Timeout_Value;2;;Indicates the IP.21 timeout in minutes (NULL doesn't expire);;;true;;
                iSilentModeEnable;1;NO;If all the measurement are automatic and all of them has a good value, then the phase is closed automatically;;;false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 39523
              order: 0
              bounds: 2,220,130,83
            END
            SerialDivergent39526:PFCTree.View.SerialDivergent
              id: 39526
              idEnd: 39527
              bounds: 147,255,130,40
            END
            39526_39534:PFCTree.View.Link
              id: 39535
              fromID: 39526
              toID: 39534
              bounds: 205,295,16,35
            END
            39523_39518:PFCTree.View.Link
              id: 39525
              fromID: 39523
              toID: 39518
              bounds: 60,303,16,357
            END
            CHK_PROCESSCELL3_BS:PFCTree.View.Script
              id: 39534
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;"AND";Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"ProcessCell","2ndMachineSpeed"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"DBUCP78","Yes"};Global variable value;;;true;;
                iCheck_Condition;19;{"=","="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 147,330,130,55
              executeAtClientID: No
            END
            39534_39531:PFCTree.View.ControlLink
              id: 39536
              fromID: 39534
              toID: 39531
              bounds: 205,385,16,55
            END
            MACHINE_SPEED_2_BP:PFCTree.View.Phase
              description: Machine Speed
              buildingBlockElementID: GENERIC.MEASUREMENT_ENTRY
              arguments:
                iSignature_Required;3;"2 signatures";Required signature level;;1 signature,2 signatures,2nd blind signature;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Machine speed entered";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;"OPERATOR";Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;"Machine speed verified";Meaning Label for second level signature;;;true;;
                iSignature_Permission2ndLevelOverwrite;3;"OPERATOR";Required RUDO for second level signature at Measurement Overwrite screen;;=GET_UDOS();true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Enter the machine speed"};Instructions with a maximum of 3 lines;;;false;;
                iMeasurement1_Type;3;MachineSpeed2Bp_iMeasurement1_Type;Measurement type1;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));false;;
                iMeasurement1_Minimum;2;MachineSpeed2Bp_iMeasurement1_Minimum;Minimum warning value1;;;true;;
                iMeasurement1_Target;2;MachineSpeed2Bp_iMeasurement1_Target;Target value1;;;true;;
                iMeasurement1_Maximum;2;MachineSpeed2Bp_iMeasurement1_Maximum;Maximum warning value1;;;true;;
                iMeasurement1_EquipmentType;3;"ResourceArea";Equipment Type1;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");false;;
                iMeasurement1_RPLName;3;;RPL name1. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement1_EquipmentAllocationPhase;3;"EQUIPMENT_ALLOCATION_BP";Equipment Allocation Phase1;;;false;;
                iMeasurement1_CreateAtypEventOnOverwrite;1;YES;Indicates if creates or not an atypical event when overwrites value;;;false;;
                iMeasurement1_IP21Timeout;1;NO;Indicates if IP21 timeout is controlled for this measurement;;;false;;
                iMeasurement1_ForceManual;1;NO;Indicates if the measurement is considered as manual;;;false;;
                iMeasurement2_Type;3;NULL;Measurement type2;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement2_Minimum;2;;Minimum warning value2;;;true;;
                iMeasurement2_Target;2;;Target value2;;;true;;
                iMeasurement2_Maximum;2;;Maximum warning value2;;;true;;
                iMeasurement2_EquipmentType;3;;Equipment Type2;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement2_RPLName;3;;RPL name2. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement2_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement2_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement2_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement2_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement3_Type;3;;Measurement type3;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement3_Minimum;2;;Minimum warning value3;;;true;;
                iMeasurement3_Target;2;;Target value3;;;true;;
                iMeasurement3_Maximum;2;;Maximum warning value3;;;true;;
                iMeasurement3_EquipmentType;3;;Equipment Type3;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement3_RPLName;3;;RPL name3. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement3_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement3_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement3_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement3_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement4_Type;3;;Measurement type4;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement4_Minimum;2;;Minimum warning value4;;;true;;
                iMeasurement4_Target;2;;Target value4;;;true;;
                iMeasurement4_Maximum;2;;Maximum warning value4;;;true;;
                iMeasurement4_EquipmentType;3;;Equipment Type4;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement4_RPLName;3;;RPL name4. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement4_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement4_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement4_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement4_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement5_Type;3;;Measurement type5;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement5_Minimum;2;;Minimum warning value5;;;true;;
                iMeasurement5_Target;2;;Target value5;;;true;;
                iMeasurement5_Maximum;2;;Maximum warning value5;;;true;;
                iMeasurement5_EquipmentType;3;;Equipment Type4;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement5_RPLName;3;;RPL name5. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement5_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement5_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement5_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement5_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement6_Type;3;;Measurement type6;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement6_Minimum;2;;Minimum warning value6;;;true;;
                iMeasurement6_Target;2;;Target value6;;;true;;
                iMeasurement6_Maximum;2;;Maximum warning value6;;;true;;
                iMeasurement6_EquipmentType;3;;Equipment Type6;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement6_RPLName;3;;RPL name6. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement6_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement6_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement6_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement6_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement7_Type;3;;Measurement type7;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement7_Minimum;2;;Minimum warning value7;;;true;;
                iMeasurement7_Target;2;;Target value7;;;true;;
                iMeasurement7_Maximum;2;;Maximum warning value7;;;true;;
                iMeasurement7_EquipmentType;3;;Equipment Type7;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement7_RPLName;3;;RPL name7. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement7_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement7_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement7_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement7_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iAutoAtypEvent;1;YES;If YES, atypical event is raised in case of out of limits entry;;;false;;
                iIP21Timeout_Flag;3;"Global";Indicates which value is used for IP21 timeout. Environmental global variable or local BP argument;;Global,Local;false;;
                iIP21Timeout_Value;2;;Indicates the IP.21 timeout in minutes (NULL doesn't expire);;;true;;
                iSilentModeEnable;1;NO;If all the measurement are automatic and all of them has a good value, then the phase is closed automatically;;;false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 39531
              order: 0
              bounds: 147,440,130,83
            END
            39531_39527:PFCTree.View.Link
              id: 39533
              fromID: 39531
              toID: 39527
              bounds: 205,523,16,27
            END
            EndSerialDivergent39526:PFCTree.View.SerialConvergent
              id: 39527
              idEnd: 39526
              bounds: 147,550,130,40
            END
            39527_39518:PFCTree.View.Link
              id: 39530
              fromID: 39527
              toID: 39518
              bounds: 205,590,16,70
            END
            EndParallelDivergent39517:PFCTree.View.ParallelConvergent
              id: 39518
              idEnd: 39517
              bounds: 2,660,275,40
            END
            39518_20508:PFCTree.View.Link
              id: 63891
              fromID: 39518
              toID: 20508
              bounds: 132,700,16,86
            END
            EndNode20508:PFCTree.View.EndNode
              id: 20508
              bounds: 74,786,130,32
            END
          END
          bounds: 74,660,130,83
        END
        20505_10818:PFCTree.View.ControlLink
          id: 40348
          fromID: 20505
          toID: 10818
          bounds: 132,743,16,43
        END
        EndNode10818:PFCTree.View.EndNode
          id: 10818
          bounds: 74,786,130,32
        END
      END
      bounds: 147,660,130,83
    END
    R_CHALLENGE_BS:PFCTree.View.Script
      id: 8216
      buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
      arguments:
        iReactivateByDefault;1;$$L3 <> NULL ? $$L3 : Yes;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
      end
      type: 2
      order: 0
      bounds: 292,660,130,55
      step: 67045
      executeAtClientID: No
    END
    R_PACKING_LC_BS:PFCTree.View.Script
      id: 25404
      buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
      arguments:
        iReactivateByDefault;1;$$L1 <> NULL ? $$L1 : Yes;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
      end
      type: 2
      order: 0
      bounds: 582,660,130,55
      step: 58742
      executeAtClientID: No
    END
    P_EOB_LC_ACTIVITIES_UP:PFCTree.View.UnitProcedure
      description: END OF BATCH ACTIVITIES
      id: 35938
      order: 0
      design:
        BeginNode35939:PFCTree.View.BeginNode
          id: 35939
          bounds: 2,16,130,32
        END
        35939_35940:PFCTree.View.ControlLink
          id: 35947
          fromID: 35939
          toID: 35940
          bounds: 60,48,16,62
        END
        CHECK_EVENT_BATCH_OP:PFCTree.View.Operation
          description: CHECK EVENTS
          id: 35940
          order: 0
          design:
            BeginNode35941:PFCTree.View.BeginNode
              id: 35941
              bounds: 2,16,130,32
            END
            35941_35942:PFCTree.View.ControlLink
              id: 35944
              fromID: 35941
              toID: 35942
              bounds: 60,48,16,62
            END
            END_BATCH_CHECK_EVENTS_BP:PFCTree.View.Phase
              description: Batch PEL events
              buildingBlockElementID: EQUIPMENT_CHECKS.CHECK_EVENTS
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"All PEL events that must be closed are closed.";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iCheckObjects;3;"Process Cell and Equipment";Indicates the events of which objects are checked;;Process Cell and Equipment,Only Process Cell,Only Equipment;false;;
                iEquipment_Id;19;;It filter the list of equipment to check. If not defined, then all equipment are checked;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iEquipment_Date;20;;Only for Mobile Equipment. If defined, then only events pior to that date are retrieved;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 35942
              order: 0
              bounds: 2,110,130,83
            END
            35942_35943:PFCTree.View.ControlLink
              id: 35945
              fromID: 35942
              toID: 35943
              bounds: 60,193,16,43
            END
            EndNode35943:PFCTree.View.EndNode
              id: 35943
              bounds: 2,236,130,32
            END
          END
          bounds: 2,110,130,83
        END
        35940_35946:PFCTree.View.ControlLink
          id: 35948
          fromID: 35940
          toID: 35946
          bounds: 60,193,16,43
        END
        EndNode35946:PFCTree.View.EndNode
          id: 35946
          bounds: 2,236,130,32
        END
      END
      bounds: 727,660,130,83
    END
    8216_3369:PFCTree.View.Link
      id: 8218
      fromID: 8216
      toID: 3369
      bounds: 350,715,16,275
    END
    25404_3369:PFCTree.View.Link
      id: 35937
      fromID: 25404
      toID: 3369
      bounds: 640,715,16,275
    END
    10737_68410:PFCTree.View.ControlLink
      id: 69615
      fromID: 10737
      toID: 68410
      bounds: 205,743,16,27
    END
    35938_3369:PFCTree.View.Link
      id: 35950
      fromID: 35938
      toID: 3369
      bounds: 785,743,16,247
    END
    P_RUN_UP:PFCTree.View.UnitProcedure
      description: PACKAGING
      id: 68410
      order: 0
      design:
        BeginNode68411:PFCTree.View.BeginNode
          id: 68411
          bounds: 582,16,130,32
        END
        68411_68412:PFCTree.View.Link
          id: 69564
          fromID: 68411
          toID: 68412
          bounds: 640,48,16,97
        END
        ParallelDivergent68412:PFCTree.View.ParallelDivergent
          id: 68412
          idEnd: 69562
          bounds: 2,145,1290,40
        END
        68412_68413:PFCTree.View.Link
          id: 69565
          fromID: 68412
          toID: 68413
          bounds: 640,185,16,35
        END
        SOB_CHALLENGE_OP:PFCTree.View.Operation
          description: CRITICAL DEVICE CHALLENGES
          id: 68413
          order: 0
          design:
            BeginNode68414:PFCTree.View.BeginNode
              id: 68414
              bounds: 74,16,130,32
            END
            68414_68415:PFCTree.View.Link
              id: 68453
              fromID: 68414
              toID: 68415
              bounds: 132,48,16,97
            END
            SerialDivergent68415:PFCTree.View.SerialDivergent
              id: 68415
              idEnd: 68420
              bounds: 2,145,275,40
            END
            68415_68416:PFCTree.View.Link
              id: 68454
              fromID: 68415
              toID: 68416
              bounds: 60,185,16,35
            END
            68415_68417:PFCTree.View.Link
              id: 68455
              fromID: 68415
              toID: 68417
              bounds: 205,185,16,70
            END
            S_CHK_HOLD_CHALLS_BS:PFCTree.View.Script
              id: 68416
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 2,220,130,55
              executeAtClientID: No
            END
            ParallelDivergent68417:PFCTree.View.ParallelDivergent
              id: 68417
              idEnd: 68419
              bounds: 147,255,130,40
            END
            68416_68420:PFCTree.View.Link
              id: 68456
              fromID: 68416
              toID: 68420
              bounds: 60,275,16,275
            END
            68417_68418:PFCTree.View.Link
              id: 68457
              fromID: 68417
              toID: 68418
              bounds: 205,295,16,35
            END
            P_CHK_HOLD_CHALLS_BS:PFCTree.View.Script
              id: 68418
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 147,330,130,55
              executeAtClientID: No
            END
            68418_68419:PFCTree.View.Link
              id: 68458
              fromID: 68418
              toID: 68419
              bounds: 205,385,16,55
            END
            ParallelConvergent68419:PFCTree.View.ParallelConvergent
              id: 68419
              idEnd: 68417
              bounds: 147,440,130,40
            END
            68419_68420:PFCTree.View.Link
              id: 68459
              fromID: 68419
              toID: 68420
              bounds: 205,480,16,70
            END
            SerialConvergent68420:PFCTree.View.SerialConvergent
              id: 68420
              idEnd: 68415
              bounds: 2,550,275,40
            END
            68420_68421:PFCTree.View.Link
              id: 68460
              fromID: 68420
              toID: 68421
              bounds: 132,590,16,105
            END
            SerialDivergent68421:PFCTree.View.SerialDivergent
              id: 68421
              idEnd: 68426
              bounds: 2,695,275,40
            END
            68421_68422:PFCTree.View.Link
              id: 68461
              fromID: 68421
              toID: 68422
              bounds: 60,735,16,35
            END
            68421_68423:PFCTree.View.Link
              id: 68462
              fromID: 68421
              toID: 68423
              bounds: 205,735,16,70
            END
            S_SET_CHALL_BS:PFCTree.View.Script
              id: 68422
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Packaging"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 2,770,130,55
              executeAtClientID: No
            END
            ParallelDivergent68423:PFCTree.View.ParallelDivergent
              id: 68423
              idEnd: 68425
              bounds: 147,805,130,40
            END
            68422_68426:PFCTree.View.Link
              id: 68463
              fromID: 68422
              toID: 68426
              bounds: 60,825,16,275
            END
            68423_68424:PFCTree.View.Link
              id: 68464
              fromID: 68423
              toID: 68424
              bounds: 205,845,16,35
            END
            P_SET_CHALL_BS:PFCTree.View.Script
              id: 68424
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Packaging"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 147,880,130,55
              executeAtClientID: No
            END
            68424_68425:PFCTree.View.Link
              id: 68465
              fromID: 68424
              toID: 68425
              bounds: 205,935,16,55
            END
            ParallelConvergent68425:PFCTree.View.ParallelConvergent
              id: 68425
              idEnd: 68423
              bounds: 147,990,130,40
            END
            68425_68426:PFCTree.View.Link
              id: 68466
              fromID: 68425
              toID: 68426
              bounds: 205,1030,16,70
            END
            SerialConvergent68426:PFCTree.View.SerialConvergent
              id: 68426
              idEnd: 68421
              bounds: 2,1100,275,40
            END
            68426_68427:PFCTree.View.Link
              id: 68467
              fromID: 68426
              toID: 68427
              bounds: 132,1140,16,105
            END
            SerialDivergent68427:PFCTree.View.SerialDivergent
              id: 68427
              idEnd: 68432
              bounds: 2,1245,275,40
            END
            68427_68428:PFCTree.View.Link
              id: 68468
              fromID: 68427
              toID: 68428
              bounds: 60,1285,16,35
            END
            68427_68429:PFCTree.View.Link
              id: 68469
              fromID: 68427
              toID: 68429
              bounds: 205,1285,16,70
            END
            S_WAIT_FILL_CHALL_BS:PFCTree.View.Script
              id: 68428
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"FILLING"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 2,1320,130,55
              executeAtClientID: No
            END
            ParallelDivergent68429:PFCTree.View.ParallelDivergent
              id: 68429
              idEnd: 68431
              bounds: 147,1355,130,40
            END
            68428_68432:PFCTree.View.Link
              id: 68470
              fromID: 68428
              toID: 68432
              bounds: 60,1375,16,275
            END
            68429_68430:PFCTree.View.Link
              id: 68471
              fromID: 68429
              toID: 68430
              bounds: 205,1395,16,35
            END
            P_WAIT_FILL_CHALL_BS:PFCTree.View.Script
              id: 68430
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"FILLING"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 147,1430,130,55
              executeAtClientID: No
            END
            68430_68431:PFCTree.View.Link
              id: 68472
              fromID: 68430
              toID: 68431
              bounds: 205,1485,16,55
            END
            ParallelConvergent68431:PFCTree.View.ParallelConvergent
              id: 68431
              idEnd: 68429
              bounds: 147,1540,130,40
            END
            68431_68432:PFCTree.View.Link
              id: 68473
              fromID: 68431
              toID: 68432
              bounds: 205,1580,16,70
            END
            SerialConvergent68432:PFCTree.View.SerialConvergent
              id: 68432
              idEnd: 68427
              bounds: 2,1650,275,40
            END
            68432_68433:PFCTree.View.Link
              id: 68474
              fromID: 68432
              toID: 68433
              bounds: 132,1690,16,105
            END
            SerialDivergent68433:PFCTree.View.SerialDivergent
              id: 68433
              idEnd: 68438
              bounds: 2,1795,275,40
            END
            68433_68434:PFCTree.View.Link
              id: 68475
              fromID: 68433
              toID: 68434
              bounds: 60,1835,16,35
            END
            68433_68435:PFCTree.View.Link
              id: 68476
              fromID: 68433
              toID: 68435
              bounds: 205,1835,16,70
            END
            S_SOB_CHALLENGES_BS:PFCTree.View.Script
              id: 68434
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"SOB"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 2,1870,130,55
              executeAtClientID: No
            END
            ParallelDivergent68435:PFCTree.View.ParallelDivergent
              id: 68435
              idEnd: 68437
              bounds: 147,1905,130,40
            END
            68434_68438:PFCTree.View.Link
              id: 68477
              fromID: 68434
              toID: 68438
              bounds: 60,1925,16,275
            END
            68435_68436:PFCTree.View.Link
              id: 68478
              fromID: 68435
              toID: 68436
              bounds: 205,1945,16,35
            END
            P_SOB_CHALLENGES_BS:PFCTree.View.Script
              id: 68436
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"SOB"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 147,1980,130,55
              executeAtClientID: No
            END
            68436_68437:PFCTree.View.Link
              id: 68479
              fromID: 68436
              toID: 68437
              bounds: 205,2035,16,55
            END
            ParallelConvergent68437:PFCTree.View.ParallelConvergent
              id: 68437
              idEnd: 68435
              bounds: 147,2090,130,40
            END
            68437_68438:PFCTree.View.Link
              id: 68480
              fromID: 68437
              toID: 68438
              bounds: 205,2130,16,70
            END
            SerialConvergent68438:PFCTree.View.SerialConvergent
              id: 68438
              idEnd: 68433
              bounds: 2,2200,275,40
            END
            68438_68439:PFCTree.View.Link
              id: 68481
              fromID: 68438
              toID: 68439
              bounds: 132,2240,16,105
            END
            SerialDivergent68439:PFCTree.View.SerialDivergent
              id: 68439
              idEnd: 68444
              bounds: 2,2345,275,40
            END
            68439_68440:PFCTree.View.Link
              id: 68482
              fromID: 68439
              toID: 68440
              bounds: 60,2385,16,35
            END
            68439_68441:PFCTree.View.Link
              id: 68483
              fromID: 68439
              toID: 68441
              bounds: 205,2385,16,70
            END
            S_DISABLE_CHALL_PHASE_1_BS:PFCTree.View.Script
              id: 68440
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"DISABLE_CHALLENGE_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,2420,130,55
              executeAtClientID: No
            END
            ParallelDivergent68441:PFCTree.View.ParallelDivergent
              id: 68441
              idEnd: 68443
              bounds: 147,2455,130,40
            END
            68440_68444:PFCTree.View.Link
              id: 68484
              fromID: 68440
              toID: 68444
              bounds: 60,2475,16,275
            END
            68441_68442:PFCTree.View.Link
              id: 68485
              fromID: 68441
              toID: 68442
              bounds: 205,2495,16,35
            END
            P_DISABLE_CHALL_PHASE_1_BS:PFCTree.View.Script
              id: 68442
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"DISABLE_CHALLENGE_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 147,2530,130,55
              executeAtClientID: No
            END
            68442_68443:PFCTree.View.Link
              id: 68486
              fromID: 68442
              toID: 68443
              bounds: 205,2585,16,55
            END
            ParallelConvergent68443:PFCTree.View.ParallelConvergent
              id: 68443
              idEnd: 68441
              bounds: 147,2640,130,40
            END
            68443_68444:PFCTree.View.Link
              id: 68487
              fromID: 68443
              toID: 68444
              bounds: 205,2680,16,70
            END
            SerialConvergent68444:PFCTree.View.SerialConvergent
              id: 68444
              idEnd: 68439
              bounds: 2,2750,275,40
            END
            68444_68445:PFCTree.View.Link
              id: 68488
              fromID: 68444
              toID: 68445
              bounds: 132,2790,16,70
            END
            HOLD_CHALL_ONE_BP:PFCTree.View.Phase
              description: DISABLE BP
              buildingBlockElementID: GENERIC.INSTRUCTION
              arguments:
                iSignature_Required;3;"Ok button";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;NULL;RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;NULL;Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_Print;1;NO;Print button visible;;;false;;
                iButton_Report;19;;Reports available for report button. If Null, report button is not visible;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iEquipment_Type;3;;Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;3;;Equipment Allocation Phase;;;true;;
                iStepAutoComplete;18;;PLC step that signals the completion of the automatic process;;;true;;
                iInstruction;19;{"THIS WILL BE DISABLED BY WORKFLOW"};Default Instructions;;;false;;
                iStep_Instruction;19;;Instructions for step;;;true;;
                iStep_Start;18;;Step range start;;;true;;
                iStep_End;18;;Step range end;;;true;;
                iForceViewPEL;1;NO;If Yes, PEL report must have been called to allow phase validation;;;false;;
                iEnforcedReportName;19;;The Report selected must be viewed by the user before sign off the Phase;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iLabelTemplate;3;;Label template to be printed;;=TRANSLATE ( "OVERALL.L_" + PARSE_LIST ( GET_CONFIG ( "<OVERALL.CONFIG_KEYS>LabelTemplateSpecialList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Disable
              autoStart: No
              usePhaseRet: Yes
              Converge: No
              id: 68445
              order: 0
              bounds: 74,2860,130,83
            END
            68445_68446:PFCTree.View.Link
              id: 68489
              fromID: 68445
              toID: 68446
              bounds: 132,2943,16,62
            END
            SerialDivergent68446:PFCTree.View.SerialDivergent
              id: 68446
              idEnd: 68451
              bounds: 2,3005,275,40
            END
            68446_68447:PFCTree.View.Link
              id: 68490
              fromID: 68446
              toID: 68447
              bounds: 60,3045,16,35
            END
            68446_68448:PFCTree.View.Link
              id: 68491
              fromID: 68446
              toID: 68448
              bounds: 205,3045,16,70
            END
            S_DISABLE_WASTE_PHASE_BS:PFCTree.View.Script
              id: 68447
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"SOB_CHALL_DISABLE_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,3080,130,55
              executeAtClientID: No
            END
            ParallelDivergent68448:PFCTree.View.ParallelDivergent
              id: 68448
              idEnd: 68450
              bounds: 147,3115,130,40
            END
            68447_68451:PFCTree.View.Link
              id: 68492
              fromID: 68447
              toID: 68451
              bounds: 60,3135,16,275
            END
            68448_68449:PFCTree.View.Link
              id: 68493
              fromID: 68448
              toID: 68449
              bounds: 205,3155,16,35
            END
            P_DISABLE_WASTE_PHASE_BS:PFCTree.View.Script
              id: 68449
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"SOB_CHALL_DISABLE_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 147,3190,130,55
              executeAtClientID: No
            END
            68449_68450:PFCTree.View.Link
              id: 68494
              fromID: 68449
              toID: 68450
              bounds: 205,3245,16,55
            END
            ParallelConvergent68450:PFCTree.View.ParallelConvergent
              id: 68450
              idEnd: 68448
              bounds: 147,3300,130,40
            END
            68450_68451:PFCTree.View.Link
              id: 68495
              fromID: 68450
              toID: 68451
              bounds: 205,3340,16,70
            END
            SerialConvergent68451:PFCTree.View.SerialConvergent
              id: 68451
              idEnd: 68446
              bounds: 2,3410,275,40
            END
            68451_68452:PFCTree.View.Link
              id: 68496
              fromID: 68451
              toID: 68452
              bounds: 132,3450,16,86
            END
            EndNode68452:PFCTree.View.EndNode
              id: 68452
              bounds: 74,3536,130,32
            END
          END
          bounds: 582,220,130,83
        END
        68413_68497:PFCTree.View.Link
          id: 69566
          fromID: 68413
          toID: 68497
          bounds: 640,303,16,62
        END
        ParallelDivergent68497:PFCTree.View.ParallelDivergent
          id: 68497
          idEnd: 69462
          bounds: 2,365,1290,40
        END
        68497_68498:PFCTree.View.Link
          id: 69567
          fromID: 68497
          toID: 68498
          bounds: 350,405,16,35
        END
        68497_68504:PFCTree.View.Link
          id: 69568
          fromID: 68497
          toID: 68504
          bounds: 785,405,16,35
        END
        68497_68510:PFCTree.View.Link
          id: 69569
          fromID: 68497
          toID: 68510
          bounds: 1075,405,16,70
        END
        TESTS_STARTUP_OP:PFCTree.View.Operation
          description: Startup Tests
          id: 68498
          order: 0
          design:
            BeginNode68499:PFCTree.View.BeginNode
              id: 68499
              bounds: 2,16,130,32
            END
            68499_68500:PFCTree.View.ControlLink
              id: 68502
              fromID: 68499
              toID: 68500
              bounds: 60,48,16,62
            END
            STARTUP_BP:PFCTree.View.Phase
              description: Start of batch IPC tests
              buildingBlockElementID: GENERIC.TABULAR_CHECK
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"This is first signature";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;"This is second signature";Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Complete the following IPC startup tests"};Instruction List to be implemented by User;;;false;;
                iPassLabel;3;"Pass";Label for Pass Checkbox;;;false;;
                iFailLabel;3;"Fail";Label for Fail Checkbox;;;false;;
                iChecklist;19;{"Collation Check on first packs produced","Outer Box Check"};List of Checks to be completed;;;false;;
                iAutoAtypEvent;1;YES;Enable/Disable Auto Event on a failed check;;;false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 68500
              order: 0
              bounds: 2,110,130,83
            END
            68500_68501:PFCTree.View.ControlLink
              id: 68503
              fromID: 68500
              toID: 68501
              bounds: 60,193,16,43
            END
            EndNode68501:PFCTree.View.EndNode
              id: 68501
              bounds: 2,236,130,32
            END
          END
          bounds: 292,440,130,83
        END
        FULL_PALLET_OP:PFCTree.View.Operation
          description: GOOD PRODUCT COUNT
          id: 68504
          order: 1
          design:
            BeginNode68505:PFCTree.View.BeginNode
              id: 68505
              bounds: 2,16,130,32
            END
            68505_68506:PFCTree.View.ControlLink
              id: 68508
              fromID: 68505
              toID: 68506
              bounds: 60,48,16,62
            END
            GOOD_PRODUCT_COUNT_BP:PFCTree.View.Phase
              description: Complete Pallet Record
              buildingBlockElementID: YIELDS_AND_RECONCILIATION.CALCULATION
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures,2nd blind signature;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Pallet quantity entered";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iEquipment_Type;19;{"ResourceArea"};Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iProfile;3;$$ProcessCell = "DBUCP78" ? "DERMS_PalletCountPumps" : "DERMS_PalletCount";Yields and Reconciliation profile;;=SQL_GET("Select Distinct NAME from YR_PROFILE_CONFIG ORDER BY NAME");false;;
                iLimit1_Low;2;NULL;Lower limit for limit 1 figure. If limit 1 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit1_High;2;NULL;Higher limit for limit 1 figure. If limit 1 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_Low;2;NULL;Lower limit for limit 2 figure. If limit 2 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_High;2;NULL;Higher limit for limit 2 figure. If limit 2 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_Low;2;NULL;Lower limit for limit 3 figure. If limit 3 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_High;2;NULL;Higher limit for limit 3 figure. If limit 3 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iParameter_Name;19;;Parameter names for APRM data source;;=SQL_GET("Select Distinct DETAIL1 from YR_PROFILE_CONFIG where DATA_SOURCE='" + TRANSLATE("YIELDS_AND_RECONCILIATION.L_SourceBatchRecord") + "' ORDER BY DETAIL1");true;;
                iParameter_ValueRPLName;19;;Parameter RPL name for APRM data source;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iParameter_ValuePhaseName;19;;Parameter Phase name for APRM data source;;;true;;
                iParameter_ValueCharPath;19;;Complete path of the APRM characteristic (for APRM data source when it is not related to a BP). If iParameter_ValuePhaseName is informed, then this parameter is ignored;;;true;;
                iParameter_ValueCharName;19;;Parameter Characteristic name for APRM data source;;;true;;
                iValidation_OrderStatus;3;NULL;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;"IPC";Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;"Completed";Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 68506
              order: 0
              bounds: 2,110,130,83
            END
            68506_68507:PFCTree.View.ControlLink
              id: 68509
              fromID: 68506
              toID: 68507
              bounds: 60,193,16,43
            END
            EndNode68507:PFCTree.View.EndNode
              id: 68507
              bounds: 2,236,130,32
            END
          END
          bounds: 727,440,130,83
        END
        ParallelDivergent68510:PFCTree.View.ParallelDivergent
          id: 68510
          idEnd: 69443
          bounds: 872,475,420,40
        END
        68510_68545:PFCTree.View.Link
          id: 69570
          fromID: 68510
          toID: 68545
          bounds: 930,515,16,35
        END
        68510_68595:PFCTree.View.Link
          id: 69571
          fromID: 68510
          toID: 68595
          bounds: 1075,515,16,35
        END
        68510_68686:PFCTree.View.Link
          id: 69572
          fromID: 68510
          toID: 68686
          bounds: 1220,515,16,70
        END
        68498_68685:PFCTree.View.Link
          id: 69573
          fromID: 68498
          toID: 68685
          bounds: 350,523,16,62
        END
        68504_68511:PFCTree.View.ControlLink
          id: 69574
          fromID: 68504
          toID: 68511
          bounds: 785,523,16,27
        END
        END_BX_OVERPRINT_OP:PFCTree.View.Operation
          description: OVERPRINT
          id: 68511
          order: 0
          design:
            BeginNode68512:PFCTree.View.BeginNode
              id: 68512
              bounds: 147,16,130,32
            END
            68512_68513:PFCTree.View.Link
              id: 68528
              fromID: 68512
              toID: 68513
              bounds: 205,48,16,97
            END
            ParallelDivergent68513:PFCTree.View.ParallelDivergent
              id: 68513
              idEnd: 68521
              bounds: 2,145,420,40
            END
            68513_68514:PFCTree.View.Link
              id: 68529
              fromID: 68513
              toID: 68514
              bounds: 60,185,16,35
            END
            68513_68515:PFCTree.View.Link
              id: 68530
              fromID: 68513
              toID: 68515
              bounds: 277,185,16,70
            END
            P_DISABLE_MAN_ACT_BS:PFCTree.View.Script
              id: 68514
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"P_MANUAL_ACTIVITIES_UP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,220,130,55
              executeAtClientID: No
            END
            SerialDivergent68515:PFCTree.View.SerialDivergent
              id: 68515
              idEnd: 68520
              bounds: 147,255,275,40
            END
            68514_68521:PFCTree.View.Link
              id: 68531
              fromID: 68514
              toID: 68521
              bounds: 60,275,16,495
            END
            68515_68516:PFCTree.View.Link
              id: 68532
              fromID: 68515
              toID: 68516
              bounds: 205,295,16,35
            END
            68515_68517:PFCTree.View.Link
              id: 68533
              fromID: 68515
              toID: 68517
              bounds: 350,295,16,70
            END
            S_WAIT_SAMPLE_COMPLETE_BS:PFCTree.View.Script
              id: 68516
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Sampling","Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL,NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed","Disable"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 147,330,130,55
              executeAtClientID: No
            END
            ParallelDivergent68517:PFCTree.View.ParallelDivergent
              id: 68517
              idEnd: 68519
              bounds: 292,365,130,40
            END
            68516_68520:PFCTree.View.Link
              id: 68534
              fromID: 68516
              toID: 68520
              bounds: 205,385,16,275
            END
            68517_68518:PFCTree.View.Link
              id: 68535
              fromID: 68517
              toID: 68518
              bounds: 350,405,16,35
            END
            P_WAIT_SAMPLE_COMPLETE_BS:PFCTree.View.Script
              id: 68518
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Sampling","Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL,NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed","Disable"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 292,440,130,55
              executeAtClientID: No
            END
            68518_68519:PFCTree.View.Link
              id: 68536
              fromID: 68518
              toID: 68519
              bounds: 350,495,16,55
            END
            ParallelConvergent68519:PFCTree.View.ParallelConvergent
              id: 68519
              idEnd: 68517
              bounds: 292,550,130,40
            END
            68519_68520:PFCTree.View.Link
              id: 68537
              fromID: 68519
              toID: 68520
              bounds: 350,590,16,70
            END
            SerialConvergent68520:PFCTree.View.SerialConvergent
              id: 68520
              idEnd: 68515
              bounds: 147,660,275,40
            END
            68520_68521:PFCTree.View.Link
              id: 68538
              fromID: 68520
              toID: 68521
              bounds: 277,700,16,70
            END
            ParallelConvergent68521:PFCTree.View.ParallelConvergent
              id: 68521
              idEnd: 68513
              bounds: 2,770,420,40
            END
            68521_68522:PFCTree.View.Link
              id: 68539
              fromID: 68521
              toID: 68522
              bounds: 205,810,16,70
            END
            OVERPRINT_END1_BATCH_BP:PFCTree.View.Phase
              description: End of Batch Verification
              buildingBlockElementID: MERPS_CHECK.PRINTED_COMPONENT
              arguments:
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Overprint verified";Signature meaning for Standard 1st level;;;true;;
                iSignature_Config_Permission;3;"OPERATOR";RUDO for signature for AdHoc screen;;=GET_UDOS();true;;
                iSignature_Config_Meaning;3;"Overprint AdHoc selected";Signature meaning for AdHoc screen;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_AdHoc;1;NO;If yes then Ad-Hoc button is displayed in overview screen;;;false;;
                iCreateAtypEventForAdhoc;1;YES;Indicates if an atypical event is created when a component is added with Ad-hoc screen;;;true;;
                iSetup_Display;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintEndBatchBp_iSetup_Display : OverprintEndBatchBp_iSetup_Display;Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_SignatureRequired;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintEndBatchBp_iSetup_SignatureRequired : OverprintEndBatchBp_iSetup_SignatureRequired;Required signature level for Setup component;;={"Ok button","1 signature","2 signatures"};true;;
                iSetup_SignaturePermission2ndLevel;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintEndBatchBp_iSetup_SignaturePermission2ndLevel : OverprintEndBatchBp_iSetup_SignaturePermission2ndLevel;RUDO for second level signature for Setup component;;=GET_UDOS();true;;
                iSetup_SignatureMeaning2ndLevel;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintEndBatchBp_iSetup_SignatureMeaning2ndLevel : OverprintEndBatchBp_iSetup_SignatureMeaning2ndLevel;Signature meaning for 2nd level signature for Setup component;;;true;;
                iSetup_ComponentType;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintEndBatchBp_iSetup_ComponentType : OverprintEndBatchBp_iSetup_ComponentType;Setup Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_ComponentAction;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintEndBatchBp_iSetup_ComponentAction : OverprintEndBatchBp_iSetup_ComponentAction;Setup Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_ComponentReason;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintEndBatchBp_iSetup_ComponentReason : OverprintEndBatchBp_iSetup_ComponentReason;Setup Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentSetupReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_Instruction;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintEndBatchBp_iSetup_Instruction : OverprintEndBatchBp_iSetup_Instruction;Setup Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_AdditionalInfo1Label;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintEndBatchBp_iSetup_AdditionalInfo1Label : OverprintEndBatchBp_iSetup_AdditionalInfo1Label;Setup additional info label 1;;;true;;
                iSetup_AdditionalInfo1Value;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintEndBatchBp_iSetup_AdditionalInfo1Value : OverprintEndBatchBp_iSetup_AdditionalInfo1Value;Setup additional info value 1;;;true;;
                iSetup_AdditionalInfo2Label;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintEndBatchBp_iSetup_AdditionalInfo2Label : OverprintEndBatchBp_iSetup_AdditionalInfo2Label;Setup additional info label 2;;;true;;
                iSetup_AdditionalInfo2Value;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintEndBatchBp_iSetup_AdditionalInfo2Value : OverprintEndBatchBp_iSetup_AdditionalInfo2Value;Setup additional info value 2;;;true;;
                iSetup_AdditionalInfo3Label;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintEndBatchBp_iSetup_AdditionalInfo3Label : OverprintEndBatchBp_iSetup_AdditionalInfo3Label;Setup additional info label 3;;;true;;
                iSetup_AdditionalInfo3Value;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintEndBatchBp_iSetup_AdditionalInfo3Value : OverprintEndBatchBp_iSetup_AdditionalInfo3Value;Setup additional info value 3;;;true;;
                iSetup_RequirePassFail;17;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintEndBatchBp_iSetup_RequirePassFail : OverprintEndBatchBp_iSetup_RequirePassFail;Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
                iRun_Display;19;;Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_SignatureRequired;19;;Required signature level for Run component;;={"Ok button","1 signature","2 signatures"};true;;
                iRun_SignaturePermission2ndLevel;19;;RUDO for second level signature for Run component;;=GET_UDOS();true;;
                iRun_SignatureMeaning2ndLevel;19;;Signature meaning for 2nd level signature for Run component;;;true;;
                iRun_ComponentType;19;;Run Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_ComponentAction;19;;Run Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_ComponentReason;19;;Run Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentRunReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_Instruction;19;;Run Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_AdditionalInfo1Label;19;;Run additional info label 1;;;true;;
                iRun_AdditionalInfo1Value;19;;Run additional info value 1;;;true;;
                iRun_AdditionalInfo2Label;19;;Run additional info label 2;;;true;;
                iRun_AdditionalInfo2Value;19;;Run additional info value 2;;;true;;
                iRun_AdditionalInfo3Label;19;;Run additional info label 3;;;true;;
                iRun_AdditionalInfo3Value;19;;Run additional info value 3;;;true;;
                iRun_RequirePassFail;17;;Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
                iMissingItemAllowed;1;NO;If yes then BP can be closed with missing Component;;;false;;
                iValidation_OrderStatus;3;NULL;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;;Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;;Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;;Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_2
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 68522
              order: 0
              bounds: 147,880,130,83
            END
            68522_68523:PFCTree.View.Link
              id: 68540
              fromID: 68522
              toID: 68523
              bounds: 205,963,16,62
            END
            SerialDivergent68523:PFCTree.View.SerialDivergent
              id: 68523
              idEnd: 68526
              bounds: 147,1025,130,40
            END
            68523_68524:PFCTree.View.Link
              id: 68541
              fromID: 68523
              toID: 68524
              bounds: 205,1065,16,35
            END
            CHECK_SERIAL_7_BS:PFCTree.View.Script
              id: 68524
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;"AND";Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"vs_Serial","DecomChecks"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"Yes","Yes"};Global variable value;;;true;;
                iCheck_Condition;19;{"=","="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 147,1100,130,55
              executeAtClientID: No
            END
            68524_68525:PFCTree.View.ControlLink
              id: 68542
              fromID: 68524
              toID: 68525
              bounds: 205,1155,16,55
            END
            OVP_EOB_DECOMMISSION_BP:PFCTree.View.Phase
              description: Serialisation De-commissioning
              buildingBlockElementID: GENERIC.CHECKLIST
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"De-commissioning performed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Confirm De-commissioning activities have been completed."};Instructions with a maximum of 3 lines;;;false;;
                iCheckList_Option;19;{"End Of Order Overprint Sample De-Commissioned"};Check List lines to follow;;;false;;
                iCheckList_SigReq;19;{NULL};Required signature level for the option;;1 signature,2 signatures;true;;
                iMode;3;"All Check";Selection mode;;={ TRANSLATE("GENERIC.L_CheckListAllCheck"), TRANSLATE("GENERIC.L_CheckListOneCheck") };false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
                iPartial_SignOff;1;NO;Indicates if is not necesary to check all elements at the same time;;;false;;
                iEnforceCheckListSequence;1;NO;Indicates if checking items according to the list sequence is enforced;;;false;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 68525
              order: 0
              bounds: 147,1210,130,83
            END
            68525_68526:PFCTree.View.Link
              id: 68543
              fromID: 68525
              toID: 68526
              bounds: 205,1293,16,27
            END
            SerialConvergent68526:PFCTree.View.SerialConvergent
              id: 68526
              idEnd: 68523
              bounds: 147,1320,130,40
            END
            68526_68527:PFCTree.View.Link
              id: 68544
              fromID: 68526
              toID: 68527
              bounds: 205,1360,16,86
            END
            EndNode68527:PFCTree.View.EndNode
              id: 68527
              bounds: 147,1446,130,32
            END
          END
          bounds: 727,550,130,83
        END
        SAMPLING_OP:PFCTree.View.Operation
          description: SAMPLING
          id: 68545
          order: 0
          design:
            BeginNode68546:PFCTree.View.BeginNode
              id: 68546
              bounds: 219,16,130,32
            END
            68546_68547:PFCTree.View.ControlLink
              id: 68569
              fromID: 68546
              toID: 68547
              bounds: 277,48,16,62
            END
            SAMPLING_BP:PFCTree.View.Phase
              description: Sampling
              buildingBlockElementID: YIELDS_AND_RECONCILIATION.SAMPLING
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Sample taken";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iSignature_Config_Permission;3;"OPERATOR";RUDO for Ad-Hoc sample configuration;;=GET_UDOS();false;;
                iSignature_Config_Meaning;3;"Adhoc Sampling plan created";Meaning signature for ad-hoc sample configuration;;;false;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT order by DOCUMENT_ID");true;;
                iPlanned_Sample_Type;19;{"Retention"};List of planned samples type;;=TRANSLATE("YIELDS_AND_RECONCILIATION."+PARSE_LIST(GET_CONFIG("<YIELDS_AND_RECONCILIATION.CONFIG_KEYS>SampleTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iPlanned_Sample_Description;19;{"Collect sample from case one"};List of planned samples description;;;true;;
                iPlanned_Sample_Units;18;SamplingBp_iPlanned_Sample_Units;List of planned samples Units;;;true;;
                iPlanned_Sample_Uom;19;{"EA"};List of planned samples Uom;;=PARSE_LIST(GET_CONFIG("<OVERALL.UOM>OverallUoMs"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iPlanned_Sample_SamplePoints;19;{NULL};List of Sample points;;=TRANSLATE("YIELDS_AND_RECONCILIATION." + PARSE_LIST(GET_CONFIG("<YIELDS_AND_RECONCILIATION.SAMPLE_POINT>OverallSamplePointList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iPlanned_Sample_Time;19;{"Start of Batch"};List of Sample times;;=TRANSLATE("YIELDS_AND_RECONCILIATION."+PARSE_LIST(GET_CONFIG("<YIELDS_AND_RECONCILIATION.CONFIG_KEYS>SampleTimeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iPlanned_Sample_LabelTemplate;19;;Label template to be printed;;=TRANSLATE ( "OVERALL.L_" + PARSE_LIST ( GET_CONFIG ( "<OVERALL.CONFIG_KEYS>LabelTemplateSamplingList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iBatch_Display;1;NO;Display a free text batch entry field;;;false;;
                iBatch_DropDown;1;NO;Display a dropdown list of batch numbers from ZINT type material;;;false;;
                iAdditionalFieldDescription;3;NULL;Additional free text field description;;;true;;
                iMissingSampleAllowed;1;NO;If yes then BP can be closed with missing sample;;;false;;
                iValidation_OrderStatus;3;NULL;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;"IPC";Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;"Completed";Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;{"DecomAlrm"};Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;{YES};Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 68547
              order: 0
              bounds: 219,110,130,83
            END
            68547_68548:PFCTree.View.Link
              id: 68570
              fromID: 68547
              toID: 68548
              bounds: 277,193,16,62
            END
            ParallelDivergent68548:PFCTree.View.ParallelDivergent
              id: 68548
              idEnd: 68567
              bounds: 2,255,565,40
            END
            68548_68549:PFCTree.View.Link
              id: 68571
              fromID: 68548
              toID: 68549
              bounds: 132,295,16,70
            END
            68548_68550:PFCTree.View.Link
              id: 68572
              fromID: 68548
              toID: 68550
              bounds: 422,295,16,70
            END
            SerialDivergent68549:PFCTree.View.SerialDivergent
              id: 68549
              idEnd: 68559
              bounds: 2,365,275,40
            END
            SerialDivergent68550:PFCTree.View.SerialDivergent
              id: 68550
              idEnd: 68560
              bounds: 292,365,275,40
            END
            68549_68551:PFCTree.View.Link
              id: 68573
              fromID: 68549
              toID: 68551
              bounds: 60,405,16,35
            END
            68549_68553:PFCTree.View.Link
              id: 68574
              fromID: 68549
              toID: 68553
              bounds: 205,405,16,70
            END
            68550_68552:PFCTree.View.Link
              id: 68575
              fromID: 68550
              toID: 68552
              bounds: 350,405,16,35
            END
            68550_68554:PFCTree.View.Link
              id: 68576
              fromID: 68550
              toID: 68554
              bounds: 495,405,16,70
            END
            S_DISABLE_MONITOR1_BS:PFCTree.View.Script
              id: 68551
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"R_DECOMMISION_BS"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,440,130,55
              executeAtClientID: No
            END
            S_SAMPLING_COMPLETE_BS:PFCTree.View.Script
              id: 68552
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Sampling"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 292,440,130,55
              executeAtClientID: No
            END
            ParallelDivergent68553:PFCTree.View.ParallelDivergent
              id: 68553
              idEnd: 68557
              bounds: 147,475,130,40
            END
            ParallelDivergent68554:PFCTree.View.ParallelDivergent
              id: 68554
              idEnd: 68558
              bounds: 437,475,130,40
            END
            68551_68559:PFCTree.View.Link
              id: 68577
              fromID: 68551
              toID: 68559
              bounds: 60,495,16,275
            END
            68552_68560:PFCTree.View.Link
              id: 68578
              fromID: 68552
              toID: 68560
              bounds: 350,495,16,275
            END
            68553_68555:PFCTree.View.Link
              id: 68579
              fromID: 68553
              toID: 68555
              bounds: 205,515,16,35
            END
            68554_68556:PFCTree.View.Link
              id: 68580
              fromID: 68554
              toID: 68556
              bounds: 495,515,16,35
            END
            P_DISABLE_MONITOR1_BS:PFCTree.View.Script
              id: 68555
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"R_DECOMMISION1_BS"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 147,550,130,55
              executeAtClientID: No
            END
            P_SAMPLING_COMPLETE_BS:PFCTree.View.Script
              id: 68556
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Sampling"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 437,550,130,55
              executeAtClientID: No
            END
            68555_68557:PFCTree.View.Link
              id: 68581
              fromID: 68555
              toID: 68557
              bounds: 205,605,16,55
            END
            68556_68558:PFCTree.View.Link
              id: 68582
              fromID: 68556
              toID: 68558
              bounds: 495,605,16,55
            END
            ParallelConvergent68557:PFCTree.View.ParallelConvergent
              id: 68557
              idEnd: 68553
              bounds: 147,660,130,40
            END
            ParallelConvergent68558:PFCTree.View.ParallelConvergent
              id: 68558
              idEnd: 68554
              bounds: 437,660,130,40
            END
            68557_68559:PFCTree.View.Link
              id: 68583
              fromID: 68557
              toID: 68559
              bounds: 205,700,16,70
            END
            68558_68560:PFCTree.View.Link
              id: 68584
              fromID: 68558
              toID: 68560
              bounds: 495,700,16,70
            END
            SerialConvergent68559:PFCTree.View.SerialConvergent
              id: 68559
              idEnd: 68549
              bounds: 2,770,275,40
            END
            SerialConvergent68560:PFCTree.View.SerialConvergent
              id: 68560
              idEnd: 68550
              bounds: 292,770,275,40
            END
            68559_68561:PFCTree.View.Link
              id: 68585
              fromID: 68559
              toID: 68561
              bounds: 132,810,16,105
            END
            68560_68567:PFCTree.View.Link
              id: 68586
              fromID: 68560
              toID: 68567
              bounds: 422,810,16,620
            END
            SerialDivergent68561:PFCTree.View.SerialDivergent
              id: 68561
              idEnd: 68566
              bounds: 2,915,275,40
            END
            68561_68562:PFCTree.View.Link
              id: 68587
              fromID: 68561
              toID: 68562
              bounds: 60,955,16,35
            END
            68561_68563:PFCTree.View.Link
              id: 68588
              fromID: 68561
              toID: 68563
              bounds: 205,955,16,70
            END
            S_DISABLE_MONITOR2_BS:PFCTree.View.Script
              id: 68562
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"WAIT_SAMPLE_TAKEN_BS"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,990,130,55
              executeAtClientID: No
            END
            ParallelDivergent68563:PFCTree.View.ParallelDivergent
              id: 68563
              idEnd: 68565
              bounds: 147,1025,130,40
            END
            68562_68566:PFCTree.View.Link
              id: 68589
              fromID: 68562
              toID: 68566
              bounds: 60,1045,16,275
            END
            68563_68564:PFCTree.View.Link
              id: 68590
              fromID: 68563
              toID: 68564
              bounds: 205,1065,16,35
            END
            P_DISABLE_MONITOR2_BS:PFCTree.View.Script
              id: 68564
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"WAIT_SAMPLE_TAKEN_BS"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 147,1100,130,55
              executeAtClientID: No
            END
            68564_68565:PFCTree.View.Link
              id: 68591
              fromID: 68564
              toID: 68565
              bounds: 205,1155,16,55
            END
            ParallelConvergent68565:PFCTree.View.ParallelConvergent
              id: 68565
              idEnd: 68563
              bounds: 147,1210,130,40
            END
            68565_68566:PFCTree.View.Link
              id: 68592
              fromID: 68565
              toID: 68566
              bounds: 205,1250,16,70
            END
            SerialConvergent68566:PFCTree.View.SerialConvergent
              id: 68566
              idEnd: 68561
              bounds: 2,1320,275,40
            END
            68566_68567:PFCTree.View.Link
              id: 68593
              fromID: 68566
              toID: 68567
              bounds: 132,1360,16,70
            END
            ParallelConvergent68567:PFCTree.View.ParallelConvergent
              id: 68567
              idEnd: 68548
              bounds: 2,1430,565,40
            END
            68567_68568:PFCTree.View.Link
              id: 68594
              fromID: 68567
              toID: 68568
              bounds: 277,1470,16,86
            END
            EndNode68568:PFCTree.View.EndNode
              id: 68568
              bounds: 219,1556,130,32
            END
          END
          bounds: 872,550,130,83
        END
        SAMPLING_PLAN_OP:PFCTree.View.Operation
          description: SAMPLING
          id: 68595
          order: 1
          design:
            BeginNode68596:PFCTree.View.BeginNode
              id: 68596
              bounds: 147,16,130,32
            END
            68596_68597:PFCTree.View.ControlLink
              id: 68638
              fromID: 68596
              toID: 68597
              bounds: 205,48,16,62
            END
            INPUT_BX_SAMPLING_BP:PFCTree.View.Phase
              description: Input Batch Sampling
              buildingBlockElementID: GENERIC.MEASUREMENT_ENTRY
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures,2nd blind signature;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Data entered";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_Permission2ndLevelOverwrite;3;NULL;Required RUDO for second level signature at Measurement Overwrite screen;;=GET_UDOS();true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Enter the following details for the input batch."};Instructions with a maximum of 3 lines;;;false;;
                iMeasurement1_Type;3;"ConicalBatchNo";Measurement type1;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));false;;
                iMeasurement1_Minimum;2;NULL;Minimum warning value1;;;true;;
                iMeasurement1_Target;2;;Target value1;;;true;;
                iMeasurement1_Maximum;2;;Maximum warning value1;;;true;;
                iMeasurement1_EquipmentType;3;"ResourceArea";Equipment Type1;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");false;;
                iMeasurement1_RPLName;3;;RPL name1. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement1_EquipmentAllocationPhase;3;"EQUIPMENT_ALLOCATION_BP";Equipment Allocation Phase1;;;false;;
                iMeasurement1_CreateAtypEventOnOverwrite;1;NO;Indicates if creates or not an atypical event when overwrites value;;;false;;
                iMeasurement1_IP21Timeout;1;NO;Indicates if IP21 timeout is controlled for this measurement;;;false;;
                iMeasurement1_ForceManual;1;NO;Indicates if the measurement is considered as manual;;;false;;
                iMeasurement2_Type;3;"SampleTime";Measurement type2;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement2_Minimum;2;NULL;Minimum warning value2;;;true;;
                iMeasurement2_Target;2;;Target value2;;;true;;
                iMeasurement2_Maximum;2;NULL;Maximum warning value2;;;true;;
                iMeasurement2_EquipmentType;3;"ResourceArea";Equipment Type2;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement2_RPLName;3;;RPL name2. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement2_EquipmentAllocationPhase;3;"EQUIPMENT_ALLOCATION_BP";Equipment Allocation Phase1;;;true;;
                iMeasurement2_CreateAtypEventOnOverwrite;1;NO;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement2_IP21Timeout;1;NO;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement2_ForceManual;1;NO;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement3_Type;3;"KeepingQty";Measurement type3;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement3_Minimum;2;0;Minimum warning value3;;;true;;
                iMeasurement3_Target;2;NULL;Target value3;;;true;;
                iMeasurement3_Maximum;2;99;Maximum warning value3;;;true;;
                iMeasurement3_EquipmentType;3;"ResourceArea";Equipment Type3;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement3_RPLName;3;;RPL name3. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement3_EquipmentAllocationPhase;3;"EQUIPMENT_ALLOCATION_BP";Equipment Allocation Phase1;;;true;;
                iMeasurement3_CreateAtypEventOnOverwrite;1;NO;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement3_IP21Timeout;1;NO;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement3_ForceManual;1;NO;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement4_Type;3;"ChemicalQty";Measurement type4;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement4_Minimum;2;0;Minimum warning value4;;;true;;
                iMeasurement4_Target;2;NULL;Target value4;;;true;;
                iMeasurement4_Maximum;2;99;Maximum warning value4;;;true;;
                iMeasurement4_EquipmentType;3;"ResourceArea";Equipment Type4;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement4_RPLName;3;;RPL name4. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement4_EquipmentAllocationPhase;3;"EQUIPMENT_ALLOCATION_BP";Equipment Allocation Phase1;;;true;;
                iMeasurement4_CreateAtypEventOnOverwrite;1;NO;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement4_IP21Timeout;1;NO;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement4_ForceManual;1;NO;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement5_Type;3;"BiologyQty";Measurement type5;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement5_Minimum;2;0;Minimum warning value5;;;true;;
                iMeasurement5_Target;2;NULL;Target value5;;;true;;
                iMeasurement5_Maximum;2;99;Maximum warning value5;;;true;;
                iMeasurement5_EquipmentType;3;"ResourceArea";Equipment Type4;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement5_RPLName;3;;RPL name5. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement5_EquipmentAllocationPhase;3;"EQUIPMENT_ALLOCATION_BP";Equipment Allocation Phase1;;;true;;
                iMeasurement5_CreateAtypEventOnOverwrite;1;NO;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement5_IP21Timeout;1;NO;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement5_ForceManual;1;NO;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement6_Type;3;NULL;Measurement type6;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement6_Minimum;2;;Minimum warning value6;;;true;;
                iMeasurement6_Target;2;;Target value6;;;true;;
                iMeasurement6_Maximum;2;;Maximum warning value6;;;true;;
                iMeasurement6_EquipmentType;3;;Equipment Type6;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement6_RPLName;3;;RPL name6. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement6_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement6_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement6_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement6_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement7_Type;3;;Measurement type7;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement7_Minimum;2;;Minimum warning value7;;;true;;
                iMeasurement7_Target;2;;Target value7;;;true;;
                iMeasurement7_Maximum;2;;Maximum warning value7;;;true;;
                iMeasurement7_EquipmentType;3;;Equipment Type7;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement7_RPLName;3;;RPL name7. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement7_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement7_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement7_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement7_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iAutoAtypEvent;1;YES;If YES, atypical event is raised in case of out of limits entry;;;false;;
                iIP21Timeout_Flag;3;"Global";Indicates which value is used for IP21 timeout. Environmental global variable or local BP argument;;Global,Local;false;;
                iIP21Timeout_Value;2;;Indicates the IP.21 timeout in minutes (NULL doesn't expire);;;true;;
                iSilentModeEnable;1;NO;If all the measurement are automatic and all of them has a good value, then the phase is closed automatically;;;false;;
                iAlarm_Alarm;19;{"SmplPlanNew","AlrmSmp2"};Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;{NO,YES};Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 68597
              order: 0
              bounds: 147,110,130,83
            END
            68597_68598:PFCTree.View.Link
              id: 68639
              fromID: 68597
              toID: 68598
              bounds: 205,193,16,62
            END
            SerialDivergent68598:PFCTree.View.SerialDivergent
              id: 68598
              idEnd: 68603
              bounds: 75,255,275,40
            END
            68598_68599:PFCTree.View.Link
              id: 68640
              fromID: 68598
              toID: 68599
              bounds: 133,295,16,35
            END
            68598_68600:PFCTree.View.Link
              id: 68641
              fromID: 68598
              toID: 68600
              bounds: 278,295,16,70
            END
            P_SAMPLE_ADDED1_BS:PFCTree.View.Script
              id: 68599
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"SmplPlan1","SmplPlan2","SmplPlan3","SmplPlan4","SmplPlan5"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL,NULL,NULL,NULL,NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"INPUT_BX_SAMPLING_BP","INPUT_BX_SAMPLING_BP","INPUT_BX_SAMPLING_BP","INPUT_BX_SAMPLING_BP","INPUT_BX_SAMPLING_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"MEASUREMENT_ENTRY\ACTUAL_TEXT1","MEASUREMENT_ENTRY\ACTUAL_TEXT2","MEASUREMENT_ENTRY\ACTUAL3","MEASUREMENT_ENTRY\ACTUAL4","MEASUREMENT_ENTRY\ACTUAL5"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 75,330,130,55
              executeAtClientID: No
            END
            ParallelDivergent68600:PFCTree.View.ParallelDivergent
              id: 68600
              idEnd: 68602
              bounds: 220,365,130,40
            END
            68599_68603:PFCTree.View.Link
              id: 68642
              fromID: 68599
              toID: 68603
              bounds: 133,385,16,275
            END
            68600_68601:PFCTree.View.Link
              id: 68643
              fromID: 68600
              toID: 68601
              bounds: 278,405,16,35
            END
            S_SAMPLE_ADDED1_BS:PFCTree.View.Script
              id: 68601
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"SmplPlan1","SmplPlan2","SmplPlan3","SmplPlan4","SmplPlan5"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL,NULL,NULL,NULL,NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"INPUT_BX_SAMPLING_BP","INPUT_BX_SAMPLING_BP","INPUT_BX_SAMPLING_BP","INPUT_BX_SAMPLING_BP","INPUT_BX_SAMPLING_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"MEASUREMENT_ENTRY\ACTUAL_TEXT1","MEASUREMENT_ENTRY\ACTUAL_TEXT2","MEASUREMENT_ENTRY\ACTUAL3","MEASUREMENT_ENTRY\ACTUAL4","MEASUREMENT_ENTRY\ACTUAL5"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 220,440,130,55
              executeAtClientID: No
            END
            68601_68602:PFCTree.View.Link
              id: 68644
              fromID: 68601
              toID: 68602
              bounds: 278,495,16,55
            END
            ParallelConvergent68602:PFCTree.View.ParallelConvergent
              id: 68602
              idEnd: 68600
              bounds: 220,550,130,40
            END
            68602_68603:PFCTree.View.Link
              id: 68645
              fromID: 68602
              toID: 68603
              bounds: 278,590,16,70
            END
            SerialConvergent68603:PFCTree.View.SerialConvergent
              id: 68603
              idEnd: 68598
              bounds: 75,660,275,40
            END
            68603_68604:PFCTree.View.Link
              id: 68646
              fromID: 68603
              toID: 68604
              bounds: 205,700,16,105
            END
            ParallelDivergent68604:PFCTree.View.ParallelDivergent
              id: 68604
              idEnd: 68636
              bounds: 2,805,420,40
            END
            68604_68605:PFCTree.View.Link
              id: 68647
              fromID: 68604
              toID: 68605
              bounds: 60,845,16,70
            END
            68604_68606:PFCTree.View.Link
              id: 68648
              fromID: 68604
              toID: 68606
              bounds: 277,845,16,70
            END
            SerialDivergent68605:PFCTree.View.SerialDivergent
              id: 68605
              idEnd: 68618
              bounds: 2,915,130,40
            END
            SerialDivergent68606:PFCTree.View.SerialDivergent
              id: 68606
              idEnd: 68615
              bounds: 147,915,275,40
            END
            68605_68607:PFCTree.View.Link
              id: 68649
              fromID: 68605
              toID: 68607
              bounds: 60,955,16,35
            END
            68606_68608:PFCTree.View.Link
              id: 68650
              fromID: 68606
              toID: 68608
              bounds: 205,955,16,35
            END
            68606_68609:PFCTree.View.Link
              id: 68651
              fromID: 68606
              toID: 68609
              bounds: 350,955,16,70
            END
            CHECK_SERIAL_5_BS:PFCTree.View.Script
              id: 68607
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;"AND";Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"vs_Serial","DecomChecks"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"Yes","Yes"};Global variable value;;;true;;
                iCheck_Condition;19;{"=","="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 2,990,130,55
              executeAtClientID: No
            END
            P_ADD_SAMP_TOTAL_BS:PFCTree.View.Script
              id: 68608
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"SmplPlanTot"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$SmplPlanTot + $$SmplPlan3 + $$SmplPlan4 + $$SmplPlan5};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,990,130,55
              executeAtClientID: No
            END
            ParallelDivergent68609:PFCTree.View.ParallelDivergent
              id: 68609
              idEnd: 68613
              bounds: 292,1025,130,40
            END
            68607_68611:PFCTree.View.Link
              id: 68652
              fromID: 68607
              toID: 68611
              bounds: 60,1045,16,90
            END
            68608_68615:PFCTree.View.Link
              id: 68653
              fromID: 68608
              toID: 68615
              bounds: 205,1045,16,275
            END
            68609_68610:PFCTree.View.Link
              id: 68654
              fromID: 68609
              toID: 68610
              bounds: 350,1065,16,35
            END
            S_ADD_SAMP_TOTAL_BS:PFCTree.View.Script
              id: 68610
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"SmplPlanTot"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$SmplPlanTot + $$SmplPlan3 + $$SmplPlan4 + $$SmplPlan5};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 292,1100,130,55
              executeAtClientID: No
            END
            SerialDivergent68611:PFCTree.View.SerialDivergent
              id: 68611
              idEnd: 68616
              bounds: 2,1135,130,40
            END
            68610_68613:PFCTree.View.Link
              id: 68655
              fromID: 68610
              toID: 68613
              bounds: 350,1155,16,55
            END
            68611_68612:PFCTree.View.Link
              id: 68656
              fromID: 68611
              toID: 68612
              bounds: 60,1175,16,35
            END
            CHK_KEEPING_NOT_ZERO_BS:PFCTree.View.Script
              id: 68612
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"SmplPlan3"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{0};Global variable value;;;true;;
                iCheck_Condition;19;{">"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 2,1210,130,55
              executeAtClientID: No
            END
            ParallelConvergent68613:PFCTree.View.ParallelConvergent
              id: 68613
              idEnd: 68609
              bounds: 292,1210,130,40
            END
            68613_68615:PFCTree.View.Link
              id: 68657
              fromID: 68613
              toID: 68615
              bounds: 350,1250,16,70
            END
            68612_68614:PFCTree.View.ControlLink
              id: 68658
              fromID: 68612
              toID: 68614
              bounds: 60,1265,16,55
            END
            OVP_INPUTBX_DECOMMISION_BP:PFCTree.View.Phase
              description: Serialisation De-commissioning
              buildingBlockElementID: GENERIC.CHECKLIST
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"De-commissioning performed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Confirm De-commissioning activities have been completed."};Instructions with a maximum of 3 lines;;;false;;
                iCheckList_Option;19;{"Keeping Samples De-Commissioned"};Check List lines to follow;;;false;;
                iCheckList_SigReq;19;{NULL};Required signature level for the option;;1 signature,2 signatures;true;;
                iMode;3;"All Check";Selection mode;;={ TRANSLATE("GENERIC.L_CheckListAllCheck"), TRANSLATE("GENERIC.L_CheckListOneCheck") };false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
                iPartial_SignOff;1;NO;Indicates if is not necesary to check all elements at the same time;;;false;;
                iEnforceCheckListSequence;1;NO;Indicates if checking items according to the list sequence is enforced;;;false;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 68614
              order: 0
              bounds: 2,1320,130,83
            END
            SerialConvergent68615:PFCTree.View.SerialConvergent
              id: 68615
              idEnd: 68606
              bounds: 147,1320,275,40
            END
            68615_68617:PFCTree.View.Link
              id: 68659
              fromID: 68615
              toID: 68617
              bounds: 277,1360,16,105
            END
            68614_68616:PFCTree.View.Link
              id: 68660
              fromID: 68614
              toID: 68616
              bounds: 60,1403,16,27
            END
            SerialConvergent68616:PFCTree.View.SerialConvergent
              id: 68616
              idEnd: 68611
              bounds: 2,1430,130,40
            END
            SerialDivergent68617:PFCTree.View.SerialDivergent
              id: 68617
              idEnd: 68623
              bounds: 147,1465,275,40
            END
            68616_68618:PFCTree.View.Link
              id: 68661
              fromID: 68616
              toID: 68618
              bounds: 60,1470,16,70
            END
            68617_68619:PFCTree.View.Link
              id: 68662
              fromID: 68617
              toID: 68619
              bounds: 205,1505,16,35
            END
            68617_68620:PFCTree.View.Link
              id: 68663
              fromID: 68617
              toID: 68620
              bounds: 350,1505,16,70
            END
            SerialConvergent68618:PFCTree.View.SerialConvergent
              id: 68618
              idEnd: 68605
              bounds: 2,1540,130,40
            END
            P_SAMPLE_STRING_BS:PFCTree.View.Script
              id: 68619
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"SmplPlanNew"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Batch ID " +$$SmplPlan1 + "       " + $$SmplPlan2 + "       Keeping Qty " + $$SmplPlan3 + "        Chemical Qty " + $$SmplPlan4 + "        Biology Qty " + $$SmplPlan5};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,1540,130,55
              executeAtClientID: No
            END
            ParallelDivergent68620:PFCTree.View.ParallelDivergent
              id: 68620
              idEnd: 68622
              bounds: 292,1575,130,40
            END
            68618_68636:PFCTree.View.Link
              id: 68664
              fromID: 68618
              toID: 68636
              bounds: 60,1580,16,1500
            END
            68619_68623:PFCTree.View.Link
              id: 68665
              fromID: 68619
              toID: 68623
              bounds: 205,1595,16,275
            END
            68620_68621:PFCTree.View.Link
              id: 68666
              fromID: 68620
              toID: 68621
              bounds: 350,1615,16,35
            END
            S_SAMPLE_STRING_BS:PFCTree.View.Script
              id: 68621
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"SmplPlanNew"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Batch ID " +$$SmplPlan1 + ":      " + $$SmplPlan2 + "       Keeping Qty " + $$SmplPlan3 + ":       Chemical Qty " + $$SmplPlan4 + ":       Biology Qty " + $$SmplPlan5};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 292,1650,130,55
              executeAtClientID: No
            END
            68621_68622:PFCTree.View.Link
              id: 68667
              fromID: 68621
              toID: 68622
              bounds: 350,1705,16,55
            END
            ParallelConvergent68622:PFCTree.View.ParallelConvergent
              id: 68622
              idEnd: 68620
              bounds: 292,1760,130,40
            END
            68622_68623:PFCTree.View.Link
              id: 68668
              fromID: 68622
              toID: 68623
              bounds: 350,1800,16,70
            END
            SerialConvergent68623:PFCTree.View.SerialConvergent
              id: 68623
              idEnd: 68617
              bounds: 147,1870,275,40
            END
            68623_68624:PFCTree.View.Link
              id: 68669
              fromID: 68623
              toID: 68624
              bounds: 277,1910,16,105
            END
            SerialDivergent68624:PFCTree.View.SerialDivergent
              id: 68624
              idEnd: 68629
              bounds: 147,2015,275,40
            END
            68624_68625:PFCTree.View.Link
              id: 68670
              fromID: 68624
              toID: 68625
              bounds: 205,2055,16,35
            END
            68624_68626:PFCTree.View.Link
              id: 68671
              fromID: 68624
              toID: 68626
              bounds: 350,2055,16,70
            END
            S_APPEND_SAMPLE_BS:PFCTree.View.Script
              id: 68625
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"SmplPlanStr"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$SmplPlanStr + "|" + $$SmplPlanNew};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,2090,130,55
              executeAtClientID: No
            END
            ParallelDivergent68626:PFCTree.View.ParallelDivergent
              id: 68626
              idEnd: 68628
              bounds: 292,2125,130,40
            END
            68625_68629:PFCTree.View.Link
              id: 68672
              fromID: 68625
              toID: 68629
              bounds: 205,2145,16,275
            END
            68626_68627:PFCTree.View.Link
              id: 68673
              fromID: 68626
              toID: 68627
              bounds: 350,2165,16,35
            END
            P_APPEND_SAMPLE_BS:PFCTree.View.Script
              id: 68627
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"SmplPlanStr"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$SmplPlanStr + "|" + $$SmplPlanNew};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 292,2200,130,55
              executeAtClientID: No
            END
            68627_68628:PFCTree.View.Link
              id: 68674
              fromID: 68627
              toID: 68628
              bounds: 350,2255,16,55
            END
            ParallelConvergent68628:PFCTree.View.ParallelConvergent
              id: 68628
              idEnd: 68626
              bounds: 292,2310,130,40
            END
            68628_68629:PFCTree.View.Link
              id: 68675
              fromID: 68628
              toID: 68629
              bounds: 350,2350,16,70
            END
            SerialConvergent68629:PFCTree.View.SerialConvergent
              id: 68629
              idEnd: 68624
              bounds: 147,2420,275,40
            END
            68629_68630:PFCTree.View.Link
              id: 68676
              fromID: 68629
              toID: 68630
              bounds: 277,2460,16,105
            END
            SerialDivergent68630:PFCTree.View.SerialDivergent
              id: 68630
              idEnd: 68635
              bounds: 147,2565,275,40
            END
            68630_68631:PFCTree.View.Link
              id: 68677
              fromID: 68630
              toID: 68631
              bounds: 205,2605,16,35
            END
            68630_68632:PFCTree.View.Link
              id: 68678
              fromID: 68630
              toID: 68632
              bounds: 350,2605,16,70
            END
            S_SAMPLE_ALARM_BS:PFCTree.View.Script
              id: 68631
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"SmplPlanNew"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Last Sample: Batch ID " +$$SmplPlan1 + "   " + $$SmplPlan2 + "   Keeping " + $$SmplPlan3 + "   Chemical " + $$SmplPlan4 + "   Biology  " + $$SmplPlan5};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,2640,130,55
              executeAtClientID: No
            END
            ParallelDivergent68632:PFCTree.View.ParallelDivergent
              id: 68632
              idEnd: 68634
              bounds: 292,2675,130,40
            END
            68631_68635:PFCTree.View.Link
              id: 68679
              fromID: 68631
              toID: 68635
              bounds: 205,2695,16,275
            END
            68632_68633:PFCTree.View.Link
              id: 68680
              fromID: 68632
              toID: 68633
              bounds: 350,2715,16,35
            END
            P_SAMPLE_ALARM_BS:PFCTree.View.Script
              id: 68633
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"SmplPlanNew"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Last Sample: Batch ID " +$$SmplPlan1 + "   " + $$SmplPlan2 + "   Keeping " + $$SmplPlan3 + "   Chemical " + $$SmplPlan4 + "   Biology  " + $$SmplPlan5};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 292,2750,130,55
              executeAtClientID: No
            END
            68633_68634:PFCTree.View.Link
              id: 68681
              fromID: 68633
              toID: 68634
              bounds: 350,2805,16,55
            END
            ParallelConvergent68634:PFCTree.View.ParallelConvergent
              id: 68634
              idEnd: 68632
              bounds: 292,2860,130,40
            END
            68634_68635:PFCTree.View.Link
              id: 68682
              fromID: 68634
              toID: 68635
              bounds: 350,2900,16,70
            END
            SerialConvergent68635:PFCTree.View.SerialConvergent
              id: 68635
              idEnd: 68630
              bounds: 147,2970,275,40
            END
            68635_68636:PFCTree.View.Link
              id: 68683
              fromID: 68635
              toID: 68636
              bounds: 277,3010,16,70
            END
            ParallelConvergent68636:PFCTree.View.ParallelConvergent
              id: 68636
              idEnd: 68604
              bounds: 2,3080,420,40
            END
            68636_68637:PFCTree.View.Link
              id: 68684
              fromID: 68636
              toID: 68637
              bounds: 205,3120,16,86
            END
            EndNode68637:PFCTree.View.EndNode
              id: 68637
              bounds: 147,3206,130,32
            END
          END
          bounds: 1017,550,130,83
        END
        ParallelDivergent68685:PFCTree.View.ParallelDivergent
          id: 68685
          idEnd: 69444
          bounds: 2,585,710,40
        END
        SerialDivergent68686:PFCTree.View.SerialDivergent
          id: 68686
          idEnd: 69441
          bounds: 1162,585,130,40
        END
        68685_68687:PFCTree.View.Link
          id: 69575
          fromID: 68685
          toID: 68687
          bounds: 60,625,16,35
        END
        68685_68688:PFCTree.View.Link
          id: 69576
          fromID: 68685
          toID: 68688
          bounds: 277,625,16,35
        END
        68685_68720:PFCTree.View.Link
          id: 69577
          fromID: 68685
          toID: 68720
          bounds: 495,625,16,35
        END
        68685_68793:PFCTree.View.Link
          id: 69578
          fromID: 68685
          toID: 68793
          bounds: 640,625,16,35
        END
        68686_68899:PFCTree.View.Link
          id: 69579
          fromID: 68686
          toID: 68899
          bounds: 1220,625,16,35
        END
        68511_68825:PFCTree.View.ControlLink
          id: 69580
          fromID: 68511
          toID: 68825
          bounds: 785,633,16,27
        END
        68545_69443:PFCTree.View.Link
          id: 69581
          fromID: 68545
          toID: 69443
          bounds: 930,633,16,467
        END
        68595_68898:PFCTree.View.ControlLink
          id: 69582
          fromID: 68595
          toID: 68898
          bounds: 1075,633,16,27
        END
        ADD_TESTS_BS:PFCTree.View.Script
          id: 68687
          buildingBlockElementID: GENERIC.SCHEDULER_UPDATE
          arguments:
            iSchedulerName;3;"SCH";Unique name in the recipe for the scheduler script;;;false;;
            iUpdateType;3;"Add";Type of update;;Add,Modify;false;;
            iCalcNextDue;1;YES;Indicates if next due time is calculated;;;false;;
            iActivity_Name;19;{"30MIN","SHIFTCHAL"};Name of the activity for signal setting (no spaces or special characters);;;false;;
            iActivity_Label;19;{"30 Minute IPC Tests","Start of shift challenges"};Human readable label of the activity;;;true;;
            iActivity_Type;19;{"Run","Always"};Type of activity;;Run,Stop,Always;true;;
            iActivity_TimeInterval;18;{30,480};Frequency of activity in minutes. For Manual activities, frequency is irrelevant;;;true;;
            iActivity_Reset;17;{YES,YES};Reset activity;;;true;;
            iActivity_Reschedule;19;{"Immediate","Immediate"};Rescheduling of the activity;;Immediate,When completed,Never,Manual;true;;
            iActivity_AllowManual;17;{NO,YES};Allow manual triggering of the activity;;;true;;
            iActivity_Disabled;17;{NO,NO};Indicates if the activity is disabled;;;true;;
          end
          type: 0
          order: 0
          bounds: 2,660,130,55
          executeAtClientID: No
        END
        TESTS_30_MIN_OP:PFCTree.View.Operation
          description: 30 Minute Tests
          id: 68688
          order: 1
          design:
            BeginNode68689:PFCTree.View.BeginNode
              id: 68689
              bounds: 74,16,130,32
            END
            68689_68690:PFCTree.View.ControlLink
              id: 68704
              fromID: 68689
              toID: 68690
              bounds: 132,48,16,62
            END
            WAIT_30_MIC:PFCTree.View.Script
              id: 68690
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"SCH_30MIN"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 74,110,130,55
              executeAtClientID: No
            END
            68690_68691:PFCTree.View.Link
              id: 68705
              fromID: 68690
              toID: 68691
              bounds: 132,165,16,90
            END
            ParallelDivergent68691:PFCTree.View.ParallelDivergent
              id: 68691
              idEnd: 68696
              bounds: 2,255,275,40
            END
            68691_68692:PFCTree.View.Link
              id: 68706
              fromID: 68691
              toID: 68692
              bounds: 60,295,16,35
            END
            68691_68693:PFCTree.View.Link
              id: 68707
              fromID: 68691
              toID: 68693
              bounds: 205,295,16,35
            END
            SAMPLING_30MIN_BP:PFCTree.View.Phase
              description: Take IPC Sample
              buildingBlockElementID: GENERIC.MEASUREMENT_ENTRY
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures,2nd blind signature;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"This is first signature";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;"This is second signature";Meaning Label for second level signature;;;true;;
                iSignature_Permission2ndLevelOverwrite;3;NULL;Required RUDO for second level signature at Measurement Overwrite screen;;=GET_UDOS();true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Take a sample to execute 30 minute IPC tests. Record the current case number."};Instructions with a maximum of 3 lines;;;false;;
                iMeasurement1_Type;3;"CaseNumber";Measurement type1;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));false;;
                iMeasurement1_Minimum;2;;Minimum warning value1;;;true;;
                iMeasurement1_Target;2;;Target value1;;;true;;
                iMeasurement1_Maximum;2;;Maximum warning value1;;;true;;
                iMeasurement1_EquipmentType;3;"ResourceArea";Equipment Type1;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");false;;
                iMeasurement1_RPLName;3;;RPL name1. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement1_EquipmentAllocationPhase;3;"EQUIPMENT_ALLOCATION_BP";Equipment Allocation Phase1;;;false;;
                iMeasurement1_CreateAtypEventOnOverwrite;1;NO;Indicates if creates or not an atypical event when overwrites value;;;false;;
                iMeasurement1_IP21Timeout;1;NO;Indicates if IP21 timeout is controlled for this measurement;;;false;;
                iMeasurement1_ForceManual;1;NO;Indicates if the measurement is considered as manual;;;false;;
                iMeasurement2_Type;3;;Measurement type2;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement2_Minimum;2;;Minimum warning value2;;;true;;
                iMeasurement2_Target;2;;Target value2;;;true;;
                iMeasurement2_Maximum;2;;Maximum warning value2;;;true;;
                iMeasurement2_EquipmentType;3;;Equipment Type2;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement2_RPLName;3;;RPL name2. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement2_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement2_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement2_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement2_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement3_Type;3;;Measurement type3;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement3_Minimum;2;;Minimum warning value3;;;true;;
                iMeasurement3_Target;2;;Target value3;;;true;;
                iMeasurement3_Maximum;2;;Maximum warning value3;;;true;;
                iMeasurement3_EquipmentType;3;;Equipment Type3;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement3_RPLName;3;;RPL name3. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement3_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement3_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement3_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement3_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement4_Type;3;;Measurement type4;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement4_Minimum;2;;Minimum warning value4;;;true;;
                iMeasurement4_Target;2;;Target value4;;;true;;
                iMeasurement4_Maximum;2;;Maximum warning value4;;;true;;
                iMeasurement4_EquipmentType;3;;Equipment Type4;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement4_RPLName;3;;RPL name4. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement4_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement4_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement4_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement4_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement5_Type;3;;Measurement type5;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement5_Minimum;2;;Minimum warning value5;;;true;;
                iMeasurement5_Target;2;;Target value5;;;true;;
                iMeasurement5_Maximum;2;;Maximum warning value5;;;true;;
                iMeasurement5_EquipmentType;3;;Equipment Type4;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement5_RPLName;3;;RPL name5. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement5_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement5_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement5_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement5_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement6_Type;3;;Measurement type6;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement6_Minimum;2;;Minimum warning value6;;;true;;
                iMeasurement6_Target;2;;Target value6;;;true;;
                iMeasurement6_Maximum;2;;Maximum warning value6;;;true;;
                iMeasurement6_EquipmentType;3;;Equipment Type6;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement6_RPLName;3;;RPL name6. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement6_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement6_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement6_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement6_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement7_Type;3;;Measurement type7;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement7_Minimum;2;;Minimum warning value7;;;true;;
                iMeasurement7_Target;2;;Target value7;;;true;;
                iMeasurement7_Maximum;2;;Maximum warning value7;;;true;;
                iMeasurement7_EquipmentType;3;;Equipment Type7;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement7_RPLName;3;;RPL name7. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement7_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement7_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement7_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement7_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iAutoAtypEvent;1;YES;If YES, atypical event is raised in case of out of limits entry;;;false;;
                iIP21Timeout_Flag;3;"Global";Indicates which value is used for IP21 timeout. Environmental global variable or local BP argument;;Global,Local;false;;
                iIP21Timeout_Value;2;;Indicates the IP.21 timeout in minutes (NULL doesn't expire);;;true;;
                iSilentModeEnable;1;NO;If all the measurement are automatic and all of them has a good value, then the phase is closed automatically;;;false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_2
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 68692
              order: 0
              bounds: 2,330,130,83
            END
            CHECK_30MIN_SAMPLE_BS:PFCTree.View.Script
              id: 68693
              buildingBlockElementID: GENERIC.ELAPSE_TIME
              arguments:
                iOperand;3;NULL;Operator to link conditions;;OR,AND;true;;
                iTime_StartRPLName;19;{NULL};RPL name for EST. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iTime_StartPhaseName;19;{"SAMPLING_30MIN_BP"};Phase name for EST;;;false;;
                iTime_StartRefPoint;19;{"Start Time"};Indicates if either the PST or PET is used for EST;;Start Time,End Time;false;;
                iTime_EndRPLName;19;{NULL};RPL name for EET. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iTime_EndPhaseName;19;{NULL};Phase name for EET;;;true;;
                iTime_EndRefPoint;19;{NULL};Indicates if either the PST or PET is used for EET;;Start Time,End Time;true;;
                iTime_Value;18;{10};Time elapsed in minutes (EV);;;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
                iMode;3;;Indicates the script usage mode;;SetTimer,SetTimerOnly;true;;
                iTimerDescription;3;;Description for the timer;;;true;;
              end
              type: 0
              order: 1
              bounds: 147,330,130,55
              executeAtClientID: No
            END
            68693_68695:PFCTree.View.ControlLink
              id: 68708
              fromID: 68693
              toID: 68695
              bounds: 205,385,16,55
            END
            68692_68694:PFCTree.View.ControlLink
              id: 68709
              fromID: 68692
              toID: 68694
              bounds: 60,413,16,27
            END
            DISABLE_SAMP_MONITOR_BS:PFCTree.View.Script
              id: 68694
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"CHECK_30MIN_SAMPLE_BS","SAMPLING_30_MIN_EXPIRED_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO,NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,440,130,55
              executeAtClientID: No
            END
            SAMPLING_30_MIN_EXPIRED_BP:PFCTree.View.Phase
              description: Sample not taken in time
              buildingBlockElementID: EVENT_MANAGEMENT.ATYPICAL_EVENT
              arguments:
                iEventDescription;19;{"Sample for 30 minute IPC tests not taken in time"};Event Description when Automatic Atypical Event;;;true;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iPathWriteID;3;;Path to write ATYPICAL_EVENT_ID characteristic;;;true;;
              end
              wksResource: BC_UDO_Packing_2
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 68695
              order: 0
              bounds: 147,440,130,83
            END
            68694_68696:PFCTree.View.Link
              id: 68710
              fromID: 68694
              toID: 68696
              bounds: 60,495,16,55
            END
            68695_68696:PFCTree.View.Link
              id: 68711
              fromID: 68695
              toID: 68696
              bounds: 205,523,16,27
            END
            ParallelConvergent68696:PFCTree.View.ParallelConvergent
              id: 68696
              idEnd: 68691
              bounds: 2,550,275,40
            END
            68696_68697:PFCTree.View.Link
              id: 68712
              fromID: 68696
              toID: 68697
              bounds: 132,590,16,105
            END
            ParallelDivergent68697:PFCTree.View.ParallelDivergent
              id: 68697
              idEnd: 68702
              bounds: 2,695,275,40
            END
            68697_68698:PFCTree.View.Link
              id: 68713
              fromID: 68697
              toID: 68698
              bounds: 60,735,16,35
            END
            68697_68699:PFCTree.View.Link
              id: 68714
              fromID: 68697
              toID: 68699
              bounds: 205,735,16,35
            END
            IPC_30MIN_BP:PFCTree.View.Phase
              description: 30 Minute IPC Tests
              buildingBlockElementID: GENERIC.TABULAR_CHECK
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"This is first signature";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;"This is second signature";Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Complte the following IPC tests"};Instruction List to be implemented by User;;;false;;
                iPassLabel;3;"Pass";Label for Pass Checkbox;;;false;;
                iFailLabel;3;"Fail";Label for Fail Checkbox;;;false;;
                iChecklist;19;{"Carton quality and overprint quality check","Case Insertion Quality Check","Pallet Cold Store Time Check check","PU Label Print Quality check","Tamper evident alignment and quality check","Tube Quality Check"};List of Checks to be completed;;;false;;
                iAutoAtypEvent;1;YES;Enable/Disable Auto Event on a failed check;;;false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_2
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 68698
              order: 0
              bounds: 2,770,130,83
            END
            CHECK_30MIN_IPC_BS:PFCTree.View.Script
              id: 68699
              buildingBlockElementID: GENERIC.ELAPSE_TIME
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iTime_StartRPLName;19;{NULL};RPL name for EST. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iTime_StartPhaseName;19;{"IPC_30MIN_BP"};Phase name for EST;;;false;;
                iTime_StartRefPoint;19;{"Start Time"};Indicates if either the PST or PET is used for EST;;Start Time,End Time;false;;
                iTime_EndRPLName;19;{NULL};RPL name for EET. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iTime_EndPhaseName;19;{NULL};Phase name for EET;;;true;;
                iTime_EndRefPoint;19;{NULL};Indicates if either the PST or PET is used for EET;;Start Time,End Time;true;;
                iTime_Value;18;{15};Time elapsed in minutes (EV);;;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
                iMode;3;;Indicates the script usage mode;;SetTimer,SetTimerOnly;true;;
                iTimerDescription;3;;Description for the timer;;;true;;
              end
              type: 0
              order: 1
              bounds: 147,770,130,55
              executeAtClientID: No
            END
            68699_68701:PFCTree.View.ControlLink
              id: 68715
              fromID: 68699
              toID: 68701
              bounds: 205,825,16,55
            END
            68698_68700:PFCTree.View.ControlLink
              id: 68716
              fromID: 68698
              toID: 68700
              bounds: 60,853,16,27
            END
            DISABLE_IPC_MONITOR_BS:PFCTree.View.Script
              id: 68700
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"CHECK_30MIN_IPC_BS","IPC_30_MIN_EXPIRED_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO,NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,880,130,55
              executeAtClientID: No
            END
            IPC_30_MIN_EXPIRED_BP_1:PFCTree.View.Phase
              description: Test not executed in time
              buildingBlockElementID: EVENT_MANAGEMENT.ATYPICAL_EVENT
              arguments:
                iEventDescription;19;{"Execution for 30 minute IPC test not completed in time."};Event Description when Automatic Atypical Event;;;true;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iPathWriteID;3;;Path to write ATYPICAL_EVENT_ID characteristic;;;true;;
              end
              wksResource: BC_UDO_Packing_2
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 68701
              order: 0
              bounds: 147,880,130,83
            END
            68700_68702:PFCTree.View.Link
              id: 68717
              fromID: 68700
              toID: 68702
              bounds: 60,935,16,55
            END
            68701_68702:PFCTree.View.Link
              id: 68718
              fromID: 68701
              toID: 68702
              bounds: 205,963,16,27
            END
            ParallelConvergent68702:PFCTree.View.ParallelConvergent
              id: 68702
              idEnd: 68697
              bounds: 2,990,275,40
            END
            68702_68703:PFCTree.View.Link
              id: 68719
              fromID: 68702
              toID: 68703
              bounds: 132,1030,16,86
            END
            EndNode68703:PFCTree.View.EndNode
              id: 68703
              bounds: 74,1116,130,32
            END
          END
          bounds: 219,660,130,83
        END
        CLOCK_REASON_1_OP:PFCTree.View.Operation
          description: Start Shift Clock Reason
          id: 68720
          order: 2
          design:
            BeginNode68721:PFCTree.View.BeginNode
              id: 68721
              bounds: 147,16,130,32
            END
            68721_68722:PFCTree.View.ControlLink
              id: 68755
              fromID: 68721
              toID: 68722
              bounds: 205,48,16,62
            END
            WAIT_SHIFT:PFCTree.View.Script
              id: 68722
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"SCH_SHIFTCHAL"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 147,110,130,55
              executeAtClientID: No
            END
            68722_68723:PFCTree.View.Link
              id: 68756
              fromID: 68722
              toID: 68723
              bounds: 205,165,16,90
            END
            SerialDivergent68723:PFCTree.View.SerialDivergent
              id: 68723
              idEnd: 68728
              bounds: 75,255,275,40
            END
            68723_68724:PFCTree.View.Link
              id: 68757
              fromID: 68723
              toID: 68724
              bounds: 133,295,16,35
            END
            68723_68725:PFCTree.View.Link
              id: 68758
              fromID: 68723
              toID: 68725
              bounds: 278,295,16,70
            END
            S_SET_ALRM_SOS_BS:PFCTree.View.Script
              id: 68724
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AlrmSOS"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Start of shift challenges to be completed"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 75,330,130,55
              executeAtClientID: No
            END
            ParallelDivergent68725:PFCTree.View.ParallelDivergent
              id: 68725
              idEnd: 68727
              bounds: 220,365,130,40
            END
            68724_68728:PFCTree.View.Link
              id: 68759
              fromID: 68724
              toID: 68728
              bounds: 133,385,16,275
            END
            68725_68726:PFCTree.View.Link
              id: 68760
              fromID: 68725
              toID: 68726
              bounds: 278,405,16,35
            END
            P_SET_ALRM_SOS_BS:PFCTree.View.Script
              id: 68726
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AlrmSOS"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Start of shift challenges to be completed"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 220,440,130,55
              executeAtClientID: No
            END
            68726_68727:PFCTree.View.Link
              id: 68761
              fromID: 68726
              toID: 68727
              bounds: 278,495,16,55
            END
            ParallelConvergent68727:PFCTree.View.ParallelConvergent
              id: 68727
              idEnd: 68725
              bounds: 220,550,130,40
            END
            68727_68728:PFCTree.View.Link
              id: 68762
              fromID: 68727
              toID: 68728
              bounds: 278,590,16,70
            END
            SerialConvergent68728:PFCTree.View.SerialConvergent
              id: 68728
              idEnd: 68723
              bounds: 75,660,275,40
            END
            68728_68729:PFCTree.View.Link
              id: 68763
              fromID: 68728
              toID: 68729
              bounds: 205,700,16,105
            END
            SerialDivergent68729:PFCTree.View.SerialDivergent
              id: 68729
              idEnd: 68734
              bounds: 75,805,275,40
            END
            68729_68730:PFCTree.View.Link
              id: 68764
              fromID: 68729
              toID: 68730
              bounds: 133,845,16,35
            END
            68729_68731:PFCTree.View.Link
              id: 68765
              fromID: 68729
              toID: 68731
              bounds: 278,845,16,70
            END
            S_CHK_HOLD_CHALL1_BS:PFCTree.View.Script
              id: 68730
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 75,880,130,55
              executeAtClientID: No
            END
            ParallelDivergent68731:PFCTree.View.ParallelDivergent
              id: 68731
              idEnd: 68733
              bounds: 220,915,130,40
            END
            68730_68734:PFCTree.View.Link
              id: 68766
              fromID: 68730
              toID: 68734
              bounds: 133,935,16,275
            END
            68731_68732:PFCTree.View.Link
              id: 68767
              fromID: 68731
              toID: 68732
              bounds: 278,955,16,35
            END
            P_CHK_HOLD_CHALL1_BS:PFCTree.View.Script
              id: 68732
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 220,990,130,55
              executeAtClientID: No
            END
            68732_68733:PFCTree.View.Link
              id: 68768
              fromID: 68732
              toID: 68733
              bounds: 278,1045,16,55
            END
            ParallelConvergent68733:PFCTree.View.ParallelConvergent
              id: 68733
              idEnd: 68731
              bounds: 220,1100,130,40
            END
            68733_68734:PFCTree.View.Link
              id: 68769
              fromID: 68733
              toID: 68734
              bounds: 278,1140,16,70
            END
            SerialConvergent68734:PFCTree.View.SerialConvergent
              id: 68734
              idEnd: 68729
              bounds: 75,1210,275,40
            END
            68734_68735:PFCTree.View.Link
              id: 68770
              fromID: 68734
              toID: 68735
              bounds: 205,1250,16,105
            END
            SerialDivergent68735:PFCTree.View.SerialDivergent
              id: 68735
              idEnd: 68740
              bounds: 75,1355,275,40
            END
            68735_68736:PFCTree.View.Link
              id: 68771
              fromID: 68735
              toID: 68736
              bounds: 133,1395,16,35
            END
            68735_68737:PFCTree.View.Link
              id: 68772
              fromID: 68735
              toID: 68737
              bounds: 278,1395,16,70
            END
            S_SET_DAILY_CHALLENGES2_BS:PFCTree.View.Script
              id: 68736
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"StartShift"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 75,1430,130,55
              executeAtClientID: No
            END
            ParallelDivergent68737:PFCTree.View.ParallelDivergent
              id: 68737
              idEnd: 68739
              bounds: 220,1465,130,40
            END
            68736_68740:PFCTree.View.Link
              id: 68773
              fromID: 68736
              toID: 68740
              bounds: 133,1485,16,275
            END
            68737_68738:PFCTree.View.Link
              id: 68774
              fromID: 68737
              toID: 68738
              bounds: 278,1505,16,35
            END
            P_SET_DAILY_CHALLENGES2_BS:PFCTree.View.Script
              id: 68738
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"StartShift"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 220,1540,130,55
              executeAtClientID: No
            END
            68738_68739:PFCTree.View.Link
              id: 68775
              fromID: 68738
              toID: 68739
              bounds: 278,1595,16,55
            END
            ParallelConvergent68739:PFCTree.View.ParallelConvergent
              id: 68739
              idEnd: 68737
              bounds: 220,1650,130,40
            END
            68739_68740:PFCTree.View.Link
              id: 68776
              fromID: 68739
              toID: 68740
              bounds: 278,1690,16,70
            END
            SerialConvergent68740:PFCTree.View.SerialConvergent
              id: 68740
              idEnd: 68735
              bounds: 75,1760,275,40
            END
            68740_68741:PFCTree.View.Link
              id: 68777
              fromID: 68740
              toID: 68741
              bounds: 205,1800,16,105
            END
            SerialDivergent68741:PFCTree.View.SerialDivergent
              id: 68741
              idEnd: 68746
              bounds: 75,1905,275,40
            END
            68741_68742:PFCTree.View.Link
              id: 68778
              fromID: 68741
              toID: 68742
              bounds: 133,1945,16,35
            END
            68741_68743:PFCTree.View.Link
              id: 68779
              fromID: 68741
              toID: 68743
              bounds: 278,1945,16,70
            END
            S_DISABLE_CHALL_PHASE_2_BS:PFCTree.View.Script
              id: 68742
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"DISABLE_CHALLENGE_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 75,1980,130,55
              executeAtClientID: No
            END
            ParallelDivergent68743:PFCTree.View.ParallelDivergent
              id: 68743
              idEnd: 68745
              bounds: 220,2015,130,40
            END
            68742_68746:PFCTree.View.Link
              id: 68780
              fromID: 68742
              toID: 68746
              bounds: 133,2035,16,275
            END
            68743_68744:PFCTree.View.Link
              id: 68781
              fromID: 68743
              toID: 68744
              bounds: 278,2055,16,35
            END
            P_DISABLE_CHALL_PHASE_2_BS:PFCTree.View.Script
              id: 68744
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"DISABLE_CHALLENGE_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 220,2090,130,55
              executeAtClientID: No
            END
            68744_68745:PFCTree.View.Link
              id: 68782
              fromID: 68744
              toID: 68745
              bounds: 278,2145,16,55
            END
            ParallelConvergent68745:PFCTree.View.ParallelConvergent
              id: 68745
              idEnd: 68743
              bounds: 220,2200,130,40
            END
            68745_68746:PFCTree.View.Link
              id: 68783
              fromID: 68745
              toID: 68746
              bounds: 278,2240,16,70
            END
            SerialConvergent68746:PFCTree.View.SerialConvergent
              id: 68746
              idEnd: 68741
              bounds: 75,2310,275,40
            END
            68746_68747:PFCTree.View.Link
              id: 68784
              fromID: 68746
              toID: 68747
              bounds: 205,2350,16,70
            END
            HOLD_CHALL_TWO_BP:PFCTree.View.Phase
              description: DISABLE BP
              buildingBlockElementID: GENERIC.INSTRUCTION
              arguments:
                iSignature_Required;3;"Ok button";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;NULL;RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;NULL;Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_Print;1;NO;Print button visible;;;false;;
                iButton_Report;19;;Reports available for report button. If Null, report button is not visible;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iEquipment_Type;3;;Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;3;;Equipment Allocation Phase;;;true;;
                iStepAutoComplete;18;;PLC step that signals the completion of the automatic process;;;true;;
                iInstruction;19;{"THIS WILL BE DISABLED BY WORKFLOW"};Default Instructions;;;false;;
                iStep_Instruction;19;;Instructions for step;;;true;;
                iStep_Start;18;;Step range start;;;true;;
                iStep_End;18;;Step range end;;;true;;
                iForceViewPEL;1;NO;If Yes, PEL report must have been called to allow phase validation;;;false;;
                iEnforcedReportName;19;;The Report selected must be viewed by the user before sign off the Phase;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iLabelTemplate;3;;Label template to be printed;;=TRANSLATE ( "OVERALL.L_" + PARSE_LIST ( GET_CONFIG ( "<OVERALL.CONFIG_KEYS>LabelTemplateSpecialList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Disable
              autoStart: No
              usePhaseRet: Yes
              Converge: No
              id: 68747
              order: 0
              bounds: 147,2420,130,83
            END
            68747_68748:PFCTree.View.Link
              id: 68785
              fromID: 68747
              toID: 68748
              bounds: 205,2503,16,62
            END
            SerialDivergent68748:PFCTree.View.SerialDivergent
              id: 68748
              idEnd: 68753
              bounds: 75,2565,275,40
            END
            68748_68749:PFCTree.View.Link
              id: 68786
              fromID: 68748
              toID: 68749
              bounds: 133,2605,16,35
            END
            68748_68750:PFCTree.View.Link
              id: 68787
              fromID: 68748
              toID: 68750
              bounds: 278,2605,16,70
            END
            S_SET_ALRM_SOS_NULL_BS:PFCTree.View.Script
              id: 68749
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AlrmSOS"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 75,2640,130,55
              executeAtClientID: No
            END
            ParallelDivergent68750:PFCTree.View.ParallelDivergent
              id: 68750
              idEnd: 68752
              bounds: 220,2675,130,40
            END
            68749_68753:PFCTree.View.Link
              id: 68788
              fromID: 68749
              toID: 68753
              bounds: 133,2695,16,275
            END
            68750_68751:PFCTree.View.Link
              id: 68789
              fromID: 68750
              toID: 68751
              bounds: 278,2715,16,35
            END
            P_SET_ALRM_SOS_NULL_BS:PFCTree.View.Script
              id: 68751
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AlrmSOS"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 220,2750,130,55
              executeAtClientID: No
            END
            68751_68752:PFCTree.View.Link
              id: 68790
              fromID: 68751
              toID: 68752
              bounds: 278,2805,16,55
            END
            ParallelConvergent68752:PFCTree.View.ParallelConvergent
              id: 68752
              idEnd: 68750
              bounds: 220,2860,130,40
            END
            68752_68753:PFCTree.View.Link
              id: 68791
              fromID: 68752
              toID: 68753
              bounds: 278,2900,16,70
            END
            SerialConvergent68753:PFCTree.View.SerialConvergent
              id: 68753
              idEnd: 68748
              bounds: 75,2970,275,40
            END
            68753_68754:PFCTree.View.Link
              id: 68792
              fromID: 68753
              toID: 68754
              bounds: 205,3010,16,86
            END
            EndNode68754:PFCTree.View.EndNode
              id: 68754
              bounds: 147,3096,130,32
            END
          END
          bounds: 437,660,130,83
        END
        SAMPLE_SCRIPTS_OP:PFCTree.View.Operation
          description: First Sample Check
          id: 68793
          order: 3
          design:
            BeginNode68794:PFCTree.View.BeginNode
              id: 68794
              bounds: 74,16,130,32
            END
            68794_68795:PFCTree.View.ControlLink
              id: 68809
              fromID: 68794
              toID: 68795
              bounds: 132,48,16,62
            END
            CHECK_SAMPLE_BS:PFCTree.View.Script
              id: 68795
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"SAMPLING_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"SAMPLING\DESCRIPTION"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{"Some Text"};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"<>"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 74,110,130,55
              executeAtClientID: No
            END
            68795_68796:PFCTree.View.Link
              id: 68810
              fromID: 68795
              toID: 68796
              bounds: 132,165,16,90
            END
            SerialDivergent68796:PFCTree.View.SerialDivergent
              id: 68796
              idEnd: 68801
              bounds: 2,255,275,40
            END
            68796_68797:PFCTree.View.Link
              id: 68811
              fromID: 68796
              toID: 68797
              bounds: 60,295,16,35
            END
            68796_68798:PFCTree.View.Link
              id: 68812
              fromID: 68796
              toID: 68798
              bounds: 205,295,16,70
            END
            S_SMPLCHK_YES_BS:PFCTree.View.Script
              id: 68797
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"SmplChk"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Ready"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 2,330,130,55
              executeAtClientID: No
            END
            ParallelDivergent68798:PFCTree.View.ParallelDivergent
              id: 68798
              idEnd: 68800
              bounds: 147,365,130,40
            END
            68797_68801:PFCTree.View.Link
              id: 68813
              fromID: 68797
              toID: 68801
              bounds: 60,385,16,275
            END
            68798_68799:PFCTree.View.Link
              id: 68814
              fromID: 68798
              toID: 68799
              bounds: 205,405,16,35
            END
            P_SMPLCHK_READY_BS:PFCTree.View.Script
              id: 68799
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"SmplChk"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Ready"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 147,440,130,55
              executeAtClientID: No
            END
            68799_68800:PFCTree.View.Link
              id: 68815
              fromID: 68799
              toID: 68800
              bounds: 205,495,16,55
            END
            ParallelConvergent68800:PFCTree.View.ParallelConvergent
              id: 68800
              idEnd: 68798
              bounds: 147,550,130,40
            END
            68800_68801:PFCTree.View.Link
              id: 68816
              fromID: 68800
              toID: 68801
              bounds: 205,590,16,70
            END
            SerialConvergent68801:PFCTree.View.SerialConvergent
              id: 68801
              idEnd: 68796
              bounds: 2,660,275,40
            END
            68801_68802:PFCTree.View.Link
              id: 68817
              fromID: 68801
              toID: 68802
              bounds: 132,700,16,105
            END
            SerialDivergent68802:PFCTree.View.SerialDivergent
              id: 68802
              idEnd: 68807
              bounds: 2,805,275,40
            END
            68802_68803:PFCTree.View.Link
              id: 68818
              fromID: 68802
              toID: 68803
              bounds: 60,845,16,35
            END
            68802_68804:PFCTree.View.Link
              id: 68819
              fromID: 68802
              toID: 68804
              bounds: 205,845,16,70
            END
            S_ALARM_NULL_BS:PFCTree.View.Script
              id: 68803
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AlrmSmp"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,880,130,55
              executeAtClientID: No
            END
            ParallelDivergent68804:PFCTree.View.ParallelDivergent
              id: 68804
              idEnd: 68806
              bounds: 147,915,130,40
            END
            68803_68807:PFCTree.View.Link
              id: 68820
              fromID: 68803
              toID: 68807
              bounds: 60,935,16,275
            END
            68804_68805:PFCTree.View.Link
              id: 68821
              fromID: 68804
              toID: 68805
              bounds: 205,955,16,35
            END
            P_ALARM_NULL_BS:PFCTree.View.Script
              id: 68805
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AlrmSmp"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,990,130,55
              executeAtClientID: No
            END
            68805_68806:PFCTree.View.Link
              id: 68822
              fromID: 68805
              toID: 68806
              bounds: 205,1045,16,55
            END
            ParallelConvergent68806:PFCTree.View.ParallelConvergent
              id: 68806
              idEnd: 68804
              bounds: 147,1100,130,40
            END
            68806_68807:PFCTree.View.Link
              id: 68823
              fromID: 68806
              toID: 68807
              bounds: 205,1140,16,70
            END
            SerialConvergent68807:PFCTree.View.SerialConvergent
              id: 68807
              idEnd: 68802
              bounds: 2,1210,275,40
            END
            68807_68808:PFCTree.View.Link
              id: 68824
              fromID: 68807
              toID: 68808
              bounds: 132,1250,16,86
            END
            EndNode68808:PFCTree.View.EndNode
              id: 68808
              bounds: 74,1336,130,32
            END
          END
          bounds: 582,660,130,83
        END
        PROFILE_SCRIPTS_OP:PFCTree.View.Operation
          description: PROFILE SCRIPTS
          id: 68825
          order: 0
          design:
            BeginNode68826:PFCTree.View.BeginNode
              id: 68826
              bounds: 509,16,130,32
            END
            68826_68827:PFCTree.View.Link
              id: 68859
              fromID: 68826
              toID: 68827
              bounds: 567,48,16,97
            END
            SerialDivergent68827:PFCTree.View.SerialDivergent
              id: 68827
              idEnd: 68857
              bounds: 2,145,1145,40
            END
            68827_68828:PFCTree.View.Link
              id: 68860
              fromID: 68827
              toID: 68828
              bounds: 277,185,16,35
            END
            68827_68829:PFCTree.View.Link
              id: 68861
              fromID: 68827
              toID: 68829
              bounds: 712,185,16,35
            END
            68827_68830:PFCTree.View.Link
              id: 68862
              fromID: 68827
              toID: 68830
              bounds: 1002,185,16,70
            END
            CHK_PROCESSCELL4_BS:PFCTree.View.Script
              id: 68828
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;NULL;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"ProcessCell"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"DBUCP78"};Global variable value;;;true;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 219,220,130,55
              executeAtClientID: No
            END
            CHK_BREXIT_SIG_2_BS:PFCTree.View.Script
              id: 68829
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"BrexitSample"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 1
              bounds: 654,220,130,55
              executeAtClientID: No
            END
            SerialDivergent68830:PFCTree.View.SerialDivergent
              id: 68830
              idEnd: 68848
              bounds: 872,255,275,40
            END
            68828_68832:PFCTree.View.Link
              id: 68863
              fromID: 68828
              toID: 68832
              bounds: 277,275,16,90
            END
            68829_68833:PFCTree.View.Link
              id: 68864
              fromID: 68829
              toID: 68833
              bounds: 712,275,16,90
            END
            68830_68831:PFCTree.View.Link
              id: 68865
              fromID: 68830
              toID: 68831
              bounds: 930,295,16,35
            END
            68830_68834:PFCTree.View.Link
              id: 68866
              fromID: 68830
              toID: 68834
              bounds: 1075,295,16,70
            END
            S_SET_PROFILE_TUBE1_BS:PFCTree.View.Script
              id: 68831
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_PartialProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"DERMS1_PartialProductCount"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 872,330,130,55
              executeAtClientID: No
            END
            SerialDivergent68832:PFCTree.View.SerialDivergent
              id: 68832
              idEnd: 68856
              bounds: 2,365,565,40
            END
            SerialDivergent68833:PFCTree.View.SerialDivergent
              id: 68833
              idEnd: 68852
              bounds: 582,365,275,40
            END
            ParallelDivergent68834:PFCTree.View.ParallelDivergent
              id: 68834
              idEnd: 68842
              bounds: 1017,365,130,40
            END
            68831_68848:PFCTree.View.Link
              id: 68867
              fromID: 68831
              toID: 68848
              bounds: 930,385,16,275
            END
            68832_68835:PFCTree.View.Link
              id: 68868
              fromID: 68832
              toID: 68835
              bounds: 132,405,16,35
            END
            68832_68838:PFCTree.View.Link
              id: 68869
              fromID: 68832
              toID: 68838
              bounds: 422,405,16,70
            END
            68833_68836:PFCTree.View.Link
              id: 68870
              fromID: 68833
              toID: 68836
              bounds: 640,405,16,35
            END
            68833_68839:PFCTree.View.Link
              id: 68871
              fromID: 68833
              toID: 68839
              bounds: 785,405,16,70
            END
            68834_68837:PFCTree.View.Link
              id: 68872
              fromID: 68834
              toID: 68837
              bounds: 1075,405,16,35
            END
            CHK_BREXIT_SIG_1_BS:PFCTree.View.Script
              id: 68835
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"BrexitSample"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 74,440,130,55
              executeAtClientID: No
            END
            S_SET_PROFILE_TUBE2_BS:PFCTree.View.Script
              id: 68836
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_PartialProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"DERMS2_PartialProductCount"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 582,440,130,55
              executeAtClientID: No
            END
            P_SET_PROFILE_TUBE1_BS:PFCTree.View.Script
              id: 68837
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_PartialProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"DERMS1_PartialProductCount"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1017,440,130,55
              executeAtClientID: No
            END
            SerialDivergent68838:PFCTree.View.SerialDivergent
              id: 68838
              idEnd: 68854
              bounds: 292,475,275,40
            END
            ParallelDivergent68839:PFCTree.View.ParallelDivergent
              id: 68839
              idEnd: 68847
              bounds: 727,475,130,40
            END
            68835_68843:PFCTree.View.Link
              id: 68873
              fromID: 68835
              toID: 68843
              bounds: 132,495,16,90
            END
            68836_68852:PFCTree.View.Link
              id: 68874
              fromID: 68836
              toID: 68852
              bounds: 640,495,16,275
            END
            68837_68842:PFCTree.View.Link
              id: 68875
              fromID: 68837
              toID: 68842
              bounds: 1075,495,16,55
            END
            68838_68840:PFCTree.View.Link
              id: 68876
              fromID: 68838
              toID: 68840
              bounds: 350,515,16,35
            END
            68838_68844:PFCTree.View.Link
              id: 68877
              fromID: 68838
              toID: 68844
              bounds: 495,515,16,70
            END
            68839_68841:PFCTree.View.Link
              id: 68878
              fromID: 68839
              toID: 68841
              bounds: 785,515,16,35
            END
            S_SET_PROFILE_PUMP1_BS:PFCTree.View.Script
              id: 68840
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_PartialProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"DERMS1_PartialCountPumps"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 292,550,130,55
              executeAtClientID: No
            END
            P_SET_PROFILE_TUBE2_BS:PFCTree.View.Script
              id: 68841
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_PartialProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"DERMS2_PartialProductCount"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 727,550,130,55
              executeAtClientID: No
            END
            ParallelConvergent68842:PFCTree.View.ParallelConvergent
              id: 68842
              idEnd: 68834
              bounds: 1017,550,130,40
            END
            SerialDivergent68843:PFCTree.View.SerialDivergent
              id: 68843
              idEnd: 68855
              bounds: 2,585,275,40
            END
            ParallelDivergent68844:PFCTree.View.ParallelDivergent
              id: 68844
              idEnd: 68851
              bounds: 437,585,130,40
            END
            68842_68848:PFCTree.View.Link
              id: 68879
              fromID: 68842
              toID: 68848
              bounds: 1075,590,16,70
            END
            68840_68854:PFCTree.View.Link
              id: 68880
              fromID: 68840
              toID: 68854
              bounds: 350,605,16,275
            END
            68841_68847:PFCTree.View.Link
              id: 68881
              fromID: 68841
              toID: 68847
              bounds: 785,605,16,55
            END
            68843_68845:PFCTree.View.Link
              id: 68882
              fromID: 68843
              toID: 68845
              bounds: 60,625,16,35
            END
            68843_68849:PFCTree.View.Link
              id: 68883
              fromID: 68843
              toID: 68849
              bounds: 205,625,16,70
            END
            68844_68846:PFCTree.View.Link
              id: 68884
              fromID: 68844
              toID: 68846
              bounds: 495,625,16,35
            END
            S_SET_PROFILE_PUMP2_BS:PFCTree.View.Script
              id: 68845
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_PartialProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"DERMS2_PartialCountPumps"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,660,130,55
              executeAtClientID: No
            END
            P_SET_PROFILE_PUMP1_BS:PFCTree.View.Script
              id: 68846
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_PartialProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"DERMS1_PartialCountPumps"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 437,660,130,55
              executeAtClientID: No
            END
            ParallelConvergent68847:PFCTree.View.ParallelConvergent
              id: 68847
              idEnd: 68839
              bounds: 727,660,130,40
            END
            SerialConvergent68848:PFCTree.View.SerialConvergent
              id: 68848
              idEnd: 68830
              bounds: 872,660,275,40
            END
            ParallelDivergent68849:PFCTree.View.ParallelDivergent
              id: 68849
              idEnd: 68853
              bounds: 147,695,130,40
            END
            68847_68852:PFCTree.View.Link
              id: 68885
              fromID: 68847
              toID: 68852
              bounds: 785,700,16,70
            END
            68848_68857:PFCTree.View.Link
              id: 68886
              fromID: 68848
              toID: 68857
              bounds: 1002,700,16,510
            END
            68845_68855:PFCTree.View.Link
              id: 68887
              fromID: 68845
              toID: 68855
              bounds: 60,715,16,275
            END
            68846_68851:PFCTree.View.Link
              id: 68888
              fromID: 68846
              toID: 68851
              bounds: 495,715,16,55
            END
            68849_68850:PFCTree.View.Link
              id: 68889
              fromID: 68849
              toID: 68850
              bounds: 205,735,16,35
            END
            P_SET_PROFILE_PUMP2_BS:PFCTree.View.Script
              id: 68850
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_PartialProfile"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"DERMS2_PartialCountPumps"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,770,130,55
              executeAtClientID: No
            END
            ParallelConvergent68851:PFCTree.View.ParallelConvergent
              id: 68851
              idEnd: 68844
              bounds: 437,770,130,40
            END
            SerialConvergent68852:PFCTree.View.SerialConvergent
              id: 68852
              idEnd: 68833
              bounds: 582,770,275,40
            END
            68851_68854:PFCTree.View.Link
              id: 68890
              fromID: 68851
              toID: 68854
              bounds: 495,810,16,70
            END
            68852_68857:PFCTree.View.Link
              id: 68891
              fromID: 68852
              toID: 68857
              bounds: 712,810,16,400
            END
            68850_68853:PFCTree.View.Link
              id: 68892
              fromID: 68850
              toID: 68853
              bounds: 205,825,16,55
            END
            ParallelConvergent68853:PFCTree.View.ParallelConvergent
              id: 68853
              idEnd: 68849
              bounds: 147,880,130,40
            END
            SerialConvergent68854:PFCTree.View.SerialConvergent
              id: 68854
              idEnd: 68838
              bounds: 292,880,275,40
            END
            68853_68855:PFCTree.View.Link
              id: 68893
              fromID: 68853
              toID: 68855
              bounds: 205,920,16,70
            END
            68854_68856:PFCTree.View.Link
              id: 68894
              fromID: 68854
              toID: 68856
              bounds: 422,920,16,180
            END
            SerialConvergent68855:PFCTree.View.SerialConvergent
              id: 68855
              idEnd: 68843
              bounds: 2,990,275,40
            END
            68855_68856:PFCTree.View.Link
              id: 68895
              fromID: 68855
              toID: 68856
              bounds: 132,1030,16,70
            END
            SerialConvergent68856:PFCTree.View.SerialConvergent
              id: 68856
              idEnd: 68832
              bounds: 2,1100,565,40
            END
            68856_68857:PFCTree.View.Link
              id: 68896
              fromID: 68856
              toID: 68857
              bounds: 277,1140,16,70
            END
            SerialConvergent68857:PFCTree.View.SerialConvergent
              id: 68857
              idEnd: 68827
              bounds: 2,1210,1145,40
            END
            68857_68858:PFCTree.View.Link
              id: 68897
              fromID: 68857
              toID: 68858
              bounds: 567,1250,16,86
            END
            EndNode68858:PFCTree.View.EndNode
              id: 68858
              bounds: 509,1336,130,32
            END
          END
          bounds: 727,660,130,83
        END
        R_SAMPLING_BS:PFCTree.View.Script
          id: 68898
          buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
          arguments:
            iReactivateByDefault;1;YES;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
          end
          type: 2
          order: 0
          bounds: 1017,660,130,55
          step: 68595
          executeAtClientID: No
        END
        CHECK_SERIAL_8_BS:PFCTree.View.Script
          id: 68899
          buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
          arguments:
            iOperand;3;"AND";Operator to link conditions;;OR,AND;true;;
            iCheck_VarName;19;{"vs_Serial","DecomChecks"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
            iCheck_VarValue;16;{"Yes","Yes"};Global variable value;;;true;;
            iCheck_Condition;19;{"=","="};Comparison condition;;<,<=,=,>=,>,<>;false;;
            iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
          end
          type: 0
          order: 0
          bounds: 1162,660,130,55
          executeAtClientID: No
        END
        68687_69444:PFCTree.View.Link
          id: 69583
          fromID: 68687
          toID: 69444
          bounds: 60,715,16,495
        END
        68898_69443:PFCTree.View.Link
          id: 69584
          fromID: 68898
          toID: 69443
          bounds: 1075,715,16,385
        END
        68899_68928:PFCTree.View.ControlLink
          id: 69585
          fromID: 68899
          toID: 68928
          bounds: 1220,715,16,55
        END
        68688_68900:PFCTree.View.ControlLink
          id: 69586
          fromID: 68688
          toID: 68900
          bounds: 277,743,16,27
        END
        68720_68901:PFCTree.View.ControlLink
          id: 69587
          fromID: 68720
          toID: 68901
          bounds: 495,743,16,27
        END
        68793_69444:PFCTree.View.Link
          id: 69588
          fromID: 68793
          toID: 69444
          bounds: 640,743,16,467
        END
        68825_68902:PFCTree.View.ControlLink
          id: 69589
          fromID: 68825
          toID: 68902
          bounds: 785,743,16,27
        END
        R_30_MIN:PFCTree.View.Script
          id: 68900
          buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
          arguments:
            iReactivateByDefault;1;YES;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
          end
          type: 2
          order: 0
          bounds: 219,770,130,55
          step: 68688
          executeAtClientID: No
        END
        R_START_SHIFT:PFCTree.View.Script
          id: 68901
          buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
          arguments:
            iReactivateByDefault;1;YES;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
          end
          type: 2
          order: 0
          bounds: 437,770,130,55
          step: 68720
          executeAtClientID: No
        END
        PARTIAL_PALLET_OP:PFCTree.View.Operation
          description: PARTIAL PALLET
          id: 68902
          order: 0
          design:
            BeginNode68903:PFCTree.View.BeginNode
              id: 68903
              bounds: 0,0,200,70
            END
            68903_68904:PFCTree.View.ControlLink
              id: 68915
              fromID: 68903
              toID: 68904
              bounds: 98,70,6,10
            END
            PARTIAL_PALLET_COUNT_BP:PFCTree.View.Phase
              description: Partial Pallet Count
              buildingBlockElementID: YIELDS_AND_RECONCILIATION.CALCULATION
              arguments:
                iSignature_Required;3;"2 signatures";Required signature level;;1 signature,2 signatures,2nd blind signature;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Pallet quantity entered";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;"OPERATOR";RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;"Pallet quantity verified";Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iEquipment_Type;19;{"ResourceArea"};Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iProfile;3;$$vs_PartialProfile <> NULL ? $$vs_PartialProfile : "DERMS2_PartialProductCount";Yields and Reconciliation profile;;=SQL_GET("Select Distinct NAME from YR_PROFILE_CONFIG ORDER BY NAME");false;;
                iLimit1_Low;2;NULL;Lower limit for limit 1 figure. If limit 1 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit1_High;2;NULL;Higher limit for limit 1 figure. If limit 1 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_Low;2;NULL;Lower limit for limit 2 figure. If limit 2 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_High;2;NULL;Higher limit for limit 2 figure. If limit 2 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_Low;2;NULL;Lower limit for limit 3 figure. If limit 3 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_High;2;NULL;Higher limit for limit 3 figure. If limit 3 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iParameter_Name;19;;Parameter names for APRM data source;;=SQL_GET("Select Distinct DETAIL1 from YR_PROFILE_CONFIG where DATA_SOURCE='" + TRANSLATE("YIELDS_AND_RECONCILIATION.L_SourceBatchRecord") + "' ORDER BY DETAIL1");true;;
                iParameter_ValueRPLName;19;;Parameter RPL name for APRM data source;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iParameter_ValuePhaseName;19;;Parameter Phase name for APRM data source;;;true;;
                iParameter_ValueCharPath;19;;Complete path of the APRM characteristic (for APRM data source when it is not related to a BP). If iParameter_ValuePhaseName is informed, then this parameter is ignored;;;true;;
                iParameter_ValueCharName;19;;Parameter Characteristic name for APRM data source;;;true;;
                iValidation_OrderStatus;3;NULL;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;NULL;Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;NULL;Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;NULL;Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 68904
              order: 0
              bounds: 0,80,200,70
            END
            68904_68905:PFCTree.View.Link
              id: 68916
              fromID: 68904
              toID: 68905
              bounds: 98,150,6,10
            END
            ParallelDivergent68905:PFCTree.View.ParallelDivergent
              id: 68905
              idEnd: 68913
              bounds: 0,160,630,7
            END
            68905_68906:PFCTree.View.Link
              id: 68917
              fromID: 68905
              toID: 68906
              bounds: 98,167,6,73
            END
            68905_68907:PFCTree.View.Link
              id: 68918
              fromID: 68905
              toID: 68907
              bounds: 420,167,6,73
            END
            S_DISABLE_ADHOC_BS:PFCTree.View.Script
              id: 68906
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"R_SAMPLING_BS","SAMPLING_PLAN_OP"};Object name;;;false;;
                iObject_Reactivate;17;{NO,NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 0,240,200,7
              executeAtClientID: No
            END
            SerialDivergent68907:PFCTree.View.SerialDivergent
              id: 68907
              idEnd: 68912
              bounds: 215,240,415,7
            END
            68906_68913:PFCTree.View.Link
              id: 68919
              fromID: 68906
              toID: 68913
              bounds: 98,247,6,393
            END
            68907_68908:PFCTree.View.Link
              id: 68920
              fromID: 68907
              toID: 68908
              bounds: 313,247,6,73
            END
            68907_68909:PFCTree.View.Link
              id: 68921
              fromID: 68907
              toID: 68909
              bounds: 528,247,6,73
            END
            S_SET_ALRM_NO_SMPL_BS:PFCTree.View.Script
              id: 68908
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AlrmSmp2"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"No values can be recorded post Partial Pallet signoff - raise an atypical"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,320,200,7
              executeAtClientID: No
            END
            ParallelDivergent68909:PFCTree.View.ParallelDivergent
              id: 68909
              idEnd: 68911
              bounds: 430,320,200,7
            END
            68908_68912:PFCTree.View.Link
              id: 68922
              fromID: 68908
              toID: 68912
              bounds: 313,327,6,233
            END
            68909_68910:PFCTree.View.Link
              id: 68923
              fromID: 68909
              toID: 68910
              bounds: 528,327,6,73
            END
            P_SET_ALRM_NO_SMPL_BS:PFCTree.View.Script
              id: 68910
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AlrmSmp2"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"No values can be recorded post Partial Pallet signoff - raise an atypical"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 430,400,200,7
              executeAtClientID: No
            END
            68910_68911:PFCTree.View.Link
              id: 68924
              fromID: 68910
              toID: 68911
              bounds: 528,407,6,73
            END
            ParallelConvergent68911:PFCTree.View.ParallelConvergent
              id: 68911
              idEnd: 68909
              bounds: 430,480,200,7
            END
            68911_68912:PFCTree.View.Link
              id: 68925
              fromID: 68911
              toID: 68912
              bounds: 528,487,6,73
            END
            SerialConvergent68912:PFCTree.View.SerialConvergent
              id: 68912
              idEnd: 68907
              bounds: 215,560,415,7
            END
            68912_68913:PFCTree.View.Link
              id: 68926
              fromID: 68912
              toID: 68913
              bounds: 420,567,6,73
            END
            ParallelConvergent68913:PFCTree.View.ParallelConvergent
              id: 68913
              idEnd: 68905
              bounds: 0,640,630,7
            END
            68913_68914:PFCTree.View.Link
              id: 68927
              fromID: 68913
              toID: 68914
              bounds: 98,647,6,73
            END
            EndNode68914:PFCTree.View.EndNode
              id: 68914
              bounds: 0,720,200,70
            END
          END
          bounds: 727,770,130,83
        END
        DECOM_MONITOR_OP:PFCTree.View.Operation
          description: SAMPLE DECOMMISSIONING
          id: 68928
          order: 0
          design:
            BeginNode68929:PFCTree.View.BeginNode
              id: 68929
              bounds: 74,16,130,32
            END
            68929_68930:PFCTree.View.Link
              id: 68954
              fromID: 68929
              toID: 68930
              bounds: 132,48,16,97
            END
            SerialDivergent68930:PFCTree.View.SerialDivergent
              id: 68930
              idEnd: 68935
              bounds: 2,145,275,40
            END
            68930_68931:PFCTree.View.Link
              id: 68955
              fromID: 68930
              toID: 68931
              bounds: 60,185,16,35
            END
            68930_68932:PFCTree.View.Link
              id: 68956
              fromID: 68930
              toID: 68932
              bounds: 205,185,16,70
            END
            S_INCREMENT_CNT_BS:PFCTree.View.Script
              id: 68931
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AdhocCnt"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{1 + $$AdhocCnt};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,220,130,55
              executeAtClientID: No
            END
            ParallelDivergent68932:PFCTree.View.ParallelDivergent
              id: 68932
              idEnd: 68934
              bounds: 147,255,130,40
            END
            68931_68935:PFCTree.View.Link
              id: 68957
              fromID: 68931
              toID: 68935
              bounds: 60,275,16,275
            END
            68932_68933:PFCTree.View.Link
              id: 68958
              fromID: 68932
              toID: 68933
              bounds: 205,295,16,35
            END
            P_INCREMENT_CNT_BS:PFCTree.View.Script
              id: 68933
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AdhocCnt"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{1 + $$AdhocCnt};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,330,130,55
              executeAtClientID: No
            END
            68933_68934:PFCTree.View.Link
              id: 68959
              fromID: 68933
              toID: 68934
              bounds: 205,385,16,55
            END
            ParallelConvergent68934:PFCTree.View.ParallelConvergent
              id: 68934
              idEnd: 68932
              bounds: 147,440,130,40
            END
            68934_68935:PFCTree.View.Link
              id: 68960
              fromID: 68934
              toID: 68935
              bounds: 205,480,16,70
            END
            SerialConvergent68935:PFCTree.View.SerialConvergent
              id: 68935
              idEnd: 68930
              bounds: 2,550,275,40
            END
            68935_68936:PFCTree.View.Link
              id: 68961
              fromID: 68935
              toID: 68936
              bounds: 132,590,16,70
            END
            WAIT_SAMPLE_TAKEN_BS:PFCTree.View.Script
              id: 68936
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"SAMPLING_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"SAMPLING[" + $$AdhocCnt + "]\USER_ID_1"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{"Any Text"};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"<>"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 74,660,130,55
              executeAtClientID: No
            END
            68936_68937:PFCTree.View.Link
              id: 68962
              fromID: 68936
              toID: 68937
              bounds: 132,715,16,90
            END
            SerialDivergent68937:PFCTree.View.SerialDivergent
              id: 68937
              idEnd: 68952
              bounds: 2,805,275,40
            END
            68937_68938:PFCTree.View.Link
              id: 68963
              fromID: 68937
              toID: 68938
              bounds: 132,845,16,35
            END
            CHK_EOB_SMPL_BS:PFCTree.View.Script
              id: 68938
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{NULL};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"SAMPLING_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"SAMPLING[" + $$AdhocCnt + "]\USER_ID_1"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{"Any Text"};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"<>"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 74,880,130,55
              executeAtClientID: No
            END
            68938_68939:PFCTree.View.Link
              id: 68964
              fromID: 68938
              toID: 68939
              bounds: 132,935,16,90
            END
            SerialDivergent68939:PFCTree.View.SerialDivergent
              id: 68939
              idEnd: 68944
              bounds: 2,1025,275,40
            END
            68939_68940:PFCTree.View.Link
              id: 68965
              fromID: 68939
              toID: 68940
              bounds: 60,1065,16,35
            END
            68939_68941:PFCTree.View.Link
              id: 68966
              fromID: 68939
              toID: 68941
              bounds: 205,1065,16,70
            END
            P_DECOM_ALARM_BS:PFCTree.View.Script
              id: 68940
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"DecomAlrm"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Decommissioning to be performed on last sample"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,1100,130,55
              executeAtClientID: No
            END
            ParallelDivergent68941:PFCTree.View.ParallelDivergent
              id: 68941
              idEnd: 68943
              bounds: 147,1135,130,40
            END
            68940_68944:PFCTree.View.Link
              id: 68967
              fromID: 68940
              toID: 68944
              bounds: 60,1155,16,275
            END
            68941_68942:PFCTree.View.Link
              id: 68968
              fromID: 68941
              toID: 68942
              bounds: 205,1175,16,35
            END
            S_DECOM_ALARM_BS:PFCTree.View.Script
              id: 68942
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"DecomAlrm"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Decommissioning to be performed on last sample"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,1210,130,55
              executeAtClientID: No
            END
            68942_68943:PFCTree.View.Link
              id: 68969
              fromID: 68942
              toID: 68943
              bounds: 205,1265,16,55
            END
            ParallelConvergent68943:PFCTree.View.ParallelConvergent
              id: 68943
              idEnd: 68941
              bounds: 147,1320,130,40
            END
            68943_68944:PFCTree.View.Link
              id: 68970
              fromID: 68943
              toID: 68944
              bounds: 205,1360,16,70
            END
            SerialConvergent68944:PFCTree.View.SerialConvergent
              id: 68944
              idEnd: 68939
              bounds: 2,1430,275,40
            END
            68944_68945:PFCTree.View.Link
              id: 68971
              fromID: 68944
              toID: 68945
              bounds: 132,1470,16,70
            END
            OVP_SMP_DECOMMISSION_BP:PFCTree.View.Phase
              description: Serialisation De-commissioning
              buildingBlockElementID: GENERIC.CHECKLIST
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"De-commissioning performed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Confirm De-commissioning activities have been completed."};Instructions with a maximum of 3 lines;;;false;;
                iCheckList_Option;19;{$$AdhocCnt <> 1 ? "Ad-Hoc Samples De-Commisioned" : "Retention Samples De-Commisioned"  };Check List lines to follow;;;false;;
                iCheckList_SigReq;19;{NULL};Required signature level for the option;;1 signature,2 signatures;true;;
                iMode;3;"All Check";Selection mode;;={ TRANSLATE("GENERIC.L_CheckListAllCheck"), TRANSLATE("GENERIC.L_CheckListOneCheck") };false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
                iPartial_SignOff;1;NO;Indicates if is not necesary to check all elements at the same time;;;false;;
                iEnforceCheckListSequence;1;NO;Indicates if checking items according to the list sequence is enforced;;;false;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 68945
              order: 0
              bounds: 74,1540,130,83
            END
            68945_68946:PFCTree.View.Link
              id: 68972
              fromID: 68945
              toID: 68946
              bounds: 132,1623,16,62
            END
            SerialDivergent68946:PFCTree.View.SerialDivergent
              id: 68946
              idEnd: 68951
              bounds: 2,1685,275,40
            END
            68946_68947:PFCTree.View.Link
              id: 68973
              fromID: 68946
              toID: 68947
              bounds: 60,1725,16,35
            END
            68946_68948:PFCTree.View.Link
              id: 68974
              fromID: 68946
              toID: 68948
              bounds: 205,1725,16,70
            END
            P_NULL_ALARM_BS:PFCTree.View.Script
              id: 68947
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"DecomAlrm"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,1760,130,55
              executeAtClientID: No
            END
            ParallelDivergent68948:PFCTree.View.ParallelDivergent
              id: 68948
              idEnd: 68950
              bounds: 147,1795,130,40
            END
            68947_68951:PFCTree.View.Link
              id: 68975
              fromID: 68947
              toID: 68951
              bounds: 60,1815,16,275
            END
            68948_68949:PFCTree.View.Link
              id: 68976
              fromID: 68948
              toID: 68949
              bounds: 205,1835,16,35
            END
            S_NULL_ALARM_BS:PFCTree.View.Script
              id: 68949
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"DecomAlrm"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,1870,130,55
              executeAtClientID: No
            END
            68949_68950:PFCTree.View.Link
              id: 68977
              fromID: 68949
              toID: 68950
              bounds: 205,1925,16,55
            END
            ParallelConvergent68950:PFCTree.View.ParallelConvergent
              id: 68950
              idEnd: 68948
              bounds: 147,1980,130,40
            END
            68950_68951:PFCTree.View.Link
              id: 68978
              fromID: 68950
              toID: 68951
              bounds: 205,2020,16,70
            END
            SerialConvergent68951:PFCTree.View.SerialConvergent
              id: 68951
              idEnd: 68946
              bounds: 2,2090,275,40
            END
            68951_68952:PFCTree.View.Link
              id: 68979
              fromID: 68951
              toID: 68952
              bounds: 132,2130,16,70
            END
            SerialConvergent68952:PFCTree.View.SerialConvergent
              id: 68952
              idEnd: 68937
              bounds: 2,2200,275,40
            END
            68952_68953:PFCTree.View.Link
              id: 68980
              fromID: 68952
              toID: 68953
              bounds: 132,2240,16,86
            END
            EndNode68953:PFCTree.View.EndNode
              id: 68953
              bounds: 74,2326,130,32
            END
          END
          bounds: 1162,770,130,83
        END
        68900_69329:PFCTree.View.Link
          id: 69590
          fromID: 68900
          toID: 69329
          bounds: 277,825,16,90
        END
        68901_69444:PFCTree.View.Link
          id: 69591
          fromID: 68901
          toID: 69444
          bounds: 495,825,16,385
        END
        68902_68981:PFCTree.View.ControlLink
          id: 69592
          fromID: 68902
          toID: 68981
          bounds: 785,853,16,27
        END
        68928_69328:PFCTree.View.ControlLink
          id: 69593
          fromID: 68928
          toID: 69328
          bounds: 1220,853,16,27
        END
        USED_LBL_SCRIPTS_OP:PFCTree.View.Operation
          description: USED LABEL SCRIPTS
          id: 68981
          order: 0
          design:
            BeginNode68982:PFCTree.View.BeginNode
              id: 68982
              bounds: 0,0,200,70
            END
            68982_68983:PFCTree.View.Link
              id: 69141
              fromID: 68982
              toID: 68983
              bounds: 98,70,6,10
            END
            SerialDivergent68983:PFCTree.View.SerialDivergent
              id: 68983
              idEnd: 68988
              bounds: 0,80,415,7
            END
            68983_68984:PFCTree.View.Link
              id: 69142
              fromID: 68983
              toID: 68984
              bounds: 98,87,6,73
            END
            68983_68985:PFCTree.View.Link
              id: 69143
              fromID: 68983
              toID: 68985
              bounds: 313,87,6,73
            END
            S_LBL_CNT_1_BS:PFCTree.View.Script
              id: 68984
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"PalletCount"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"GOOD_PRODUCT_COUNT_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CALCULATION\LIMIT_CALCULATED_VALUE[1]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,160,200,7
              executeAtClientID: No
            END
            ParallelDivergent68985:PFCTree.View.ParallelDivergent
              id: 68985
              idEnd: 68987
              bounds: 215,160,200,7
            END
            68984_68988:PFCTree.View.Link
              id: 69144
              fromID: 68984
              toID: 68988
              bounds: 98,167,6,233
            END
            68985_68986:PFCTree.View.Link
              id: 69145
              fromID: 68985
              toID: 68986
              bounds: 313,167,6,73
            END
            P_LBL_CNT_1_BS:PFCTree.View.Script
              id: 68986
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"PalletCount"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"GOOD_PRODUCT_COUNT_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CALCULATION\LIMIT_CALCULATED_VALUE[1]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,240,200,7
              executeAtClientID: No
            END
            68986_68987:PFCTree.View.Link
              id: 69146
              fromID: 68986
              toID: 68987
              bounds: 313,247,6,73
            END
            ParallelConvergent68987:PFCTree.View.ParallelConvergent
              id: 68987
              idEnd: 68985
              bounds: 215,320,200,7
            END
            68987_68988:PFCTree.View.Link
              id: 69147
              fromID: 68987
              toID: 68988
              bounds: 313,327,6,73
            END
            SerialConvergent68988:PFCTree.View.SerialConvergent
              id: 68988
              idEnd: 68983
              bounds: 0,400,415,7
            END
            68988_68989:PFCTree.View.Link
              id: 69148
              fromID: 68988
              toID: 68989
              bounds: 205,407,6,73
            END
            SerialDivergent68989:PFCTree.View.SerialDivergent
              id: 68989
              idEnd: 68994
              bounds: 0,480,415,7
            END
            68989_68990:PFCTree.View.Link
              id: 69149
              fromID: 68989
              toID: 68990
              bounds: 98,487,6,73
            END
            68989_68991:PFCTree.View.Link
              id: 69150
              fromID: 68989
              toID: 68991
              bounds: 313,487,6,73
            END
            S_LBL_CNT_1B_BS:PFCTree.View.Script
              id: 68990
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"PartialCntPULQty","PartialOuterPULQty","BSmp1","BSmp2","BSmp3","BSmp4","BSmp5","BSmp6","BSmp7","BSmp8"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"PARTIAL_PALLET_COUNT_BP","PARTIAL_PALLET_COUNT_BP","PARTIAL_PALLET_COUNT_BP","PARTIAL_PALLET_COUNT_BP","PARTIAL_PALLET_COUNT_BP","PARTIAL_PALLET_COUNT_BP","PARTIAL_PALLET_COUNT_BP","PARTIAL_PALLET_COUNT_BP","PARTIAL_PALLET_COUNT_BP","PARTIAL_PALLET_COUNT_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CALCULATION\RETRIEVED_VALUE[1]","CALCULATION\RETRIEVED_VALUE[2]","CALCULATION\RETRIEVED_VALUE[3]","CALCULATION\RETRIEVED_VALUE[4]","CALCULATION\RETRIEVED_VALUE[6]","CALCULATION\RETRIEVED_VALUE[7]","CALCULATION\RETRIEVED_VALUE[8]","CALCULATION\RETRIEVED_VALUE[9]","CALCULATION\RETRIEVED_VALUE[10]","CALCULATION\RETRIEVED_VALUE[11]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,560,200,7
              executeAtClientID: No
            END
            ParallelDivergent68991:PFCTree.View.ParallelDivergent
              id: 68991
              idEnd: 68993
              bounds: 215,560,200,7
            END
            68990_68994:PFCTree.View.Link
              id: 69151
              fromID: 68990
              toID: 68994
              bounds: 98,567,6,233
            END
            68991_68992:PFCTree.View.Link
              id: 69152
              fromID: 68991
              toID: 68992
              bounds: 313,567,6,73
            END
            P_LBL_CNT_1B_BS:PFCTree.View.Script
              id: 68992
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"PartialCntPULQty","PartialOuterPULQty","BSmp1","BSmp2","BSmp3","BSmp4","BSmp5","BSmp6","BSmp7","BSmp8"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"PARTIAL_PALLET_COUNT_BP","PARTIAL_PALLET_COUNT_BP","PARTIAL_PALLET_COUNT_BP","PARTIAL_PALLET_COUNT_BP","PARTIAL_PALLET_COUNT_BP","PARTIAL_PALLET_COUNT_BP","PARTIAL_PALLET_COUNT_BP","PARTIAL_PALLET_COUNT_BP","PARTIAL_PALLET_COUNT_BP","PARTIAL_PALLET_COUNT_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CALCULATION\RETRIEVED_VALUE[1]","CALCULATION\RETRIEVED_VALUE[2]","CALCULATION\RETRIEVED_VALUE[3]","CALCULATION\RETRIEVED_VALUE[4]","CALCULATION\RETRIEVED_VALUE[6]","CALCULATION\RETRIEVED_VALUE[7]","CALCULATION\RETRIEVED_VALUE[8]","CALCULATION\RETRIEVED_VALUE[9]","CALCULATION\RETRIEVED_VALUE[10]","CALCULATION\RETRIEVED_VALUE[11]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,640,200,7
              executeAtClientID: No
            END
            68992_68993:PFCTree.View.Link
              id: 69153
              fromID: 68992
              toID: 68993
              bounds: 313,647,6,73
            END
            ParallelConvergent68993:PFCTree.View.ParallelConvergent
              id: 68993
              idEnd: 68991
              bounds: 215,720,200,7
            END
            68993_68994:PFCTree.View.Link
              id: 69154
              fromID: 68993
              toID: 68994
              bounds: 313,727,6,73
            END
            SerialConvergent68994:PFCTree.View.SerialConvergent
              id: 68994
              idEnd: 68989
              bounds: 0,800,415,7
            END
            68994_68995:PFCTree.View.Link
              id: 69155
              fromID: 68994
              toID: 68995
              bounds: 205,807,6,73
            END
            SerialDivergent68995:PFCTree.View.SerialDivergent
              id: 68995
              idEnd: 69003
              bounds: 0,880,630,7
            END
            68995_68996:PFCTree.View.Link
              id: 69156
              fromID: 68995
              toID: 68996
              bounds: 98,887,6,73
            END
            68995_68997:PFCTree.View.Link
              id: 69157
              fromID: 68995
              toID: 68997
              bounds: 420,887,6,73
            END
            CHK_PALLET_CNT_BS:PFCTree.View.Script
              id: 68996
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"PalletCount"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{0};Global variable value;;;true;;
                iCheck_Condition;19;{">"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,960,200,7
              executeAtClientID: No
            END
            SerialDivergent68997:PFCTree.View.SerialDivergent
              id: 68997
              idEnd: 69002
              bounds: 215,960,415,7
            END
            68996_69003:PFCTree.View.Link
              id: 69158
              fromID: 68996
              toID: 69003
              bounds: 98,967,6,393
            END
            68997_68998:PFCTree.View.Link
              id: 69159
              fromID: 68997
              toID: 68998
              bounds: 313,967,6,73
            END
            68997_68999:PFCTree.View.Link
              id: 69160
              fromID: 68997
              toID: 68999
              bounds: 528,967,6,73
            END
            S_SET_PALLETS_ZERO_BS:PFCTree.View.Script
              id: 68998
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"PalletCount"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{0};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,1040,200,7
              executeAtClientID: No
            END
            ParallelDivergent68999:PFCTree.View.ParallelDivergent
              id: 68999
              idEnd: 69001
              bounds: 430,1040,200,7
            END
            68998_69002:PFCTree.View.Link
              id: 69161
              fromID: 68998
              toID: 69002
              bounds: 313,1047,6,233
            END
            68999_69000:PFCTree.View.Link
              id: 69162
              fromID: 68999
              toID: 69000
              bounds: 528,1047,6,73
            END
            P_SET_PALLETS_ZERO_BS:PFCTree.View.Script
              id: 69000
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"PalletCount"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{0};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 430,1120,200,7
              executeAtClientID: No
            END
            69000_69001:PFCTree.View.Link
              id: 69163
              fromID: 69000
              toID: 69001
              bounds: 528,1127,6,73
            END
            ParallelConvergent69001:PFCTree.View.ParallelConvergent
              id: 69001
              idEnd: 68999
              bounds: 430,1200,200,7
            END
            69001_69002:PFCTree.View.Link
              id: 69164
              fromID: 69001
              toID: 69002
              bounds: 528,1207,6,73
            END
            SerialConvergent69002:PFCTree.View.SerialConvergent
              id: 69002
              idEnd: 68997
              bounds: 215,1280,415,7
            END
            69002_69003:PFCTree.View.Link
              id: 69165
              fromID: 69002
              toID: 69003
              bounds: 420,1287,6,73
            END
            SerialConvergent69003:PFCTree.View.SerialConvergent
              id: 69003
              idEnd: 68995
              bounds: 0,1360,630,7
            END
            69003_69004:PFCTree.View.Link
              id: 69166
              fromID: 69003
              toID: 69004
              bounds: 205,1367,6,73
            END
            SerialDivergent69004:PFCTree.View.SerialDivergent
              id: 69004
              idEnd: 69009
              bounds: 0,1440,415,7
            END
            69004_69005:PFCTree.View.Link
              id: 69167
              fromID: 69004
              toID: 69005
              bounds: 98,1447,6,73
            END
            69004_69006:PFCTree.View.Link
              id: 69168
              fromID: 69004
              toID: 69006
              bounds: 313,1447,6,73
            END
            S_LBL_CNT_2_BS:PFCTree.View.Script
              id: 69005
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotalPULLblUsed"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$PalletCount * $$OutersPerPallet};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,1520,200,7
              executeAtClientID: No
            END
            ParallelDivergent69006:PFCTree.View.ParallelDivergent
              id: 69006
              idEnd: 69008
              bounds: 215,1520,200,7
            END
            69005_69009:PFCTree.View.Link
              id: 69169
              fromID: 69005
              toID: 69009
              bounds: 98,1527,6,233
            END
            69006_69007:PFCTree.View.Link
              id: 69170
              fromID: 69006
              toID: 69007
              bounds: 313,1527,6,73
            END
            P_LBL_CNT_2_BS:PFCTree.View.Script
              id: 69007
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"TotalPULLblUsed"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$PalletCount * $$OutersPerPallet};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,1600,200,7
              executeAtClientID: No
            END
            69007_69008:PFCTree.View.Link
              id: 69171
              fromID: 69007
              toID: 69008
              bounds: 313,1607,6,73
            END
            ParallelConvergent69008:PFCTree.View.ParallelConvergent
              id: 69008
              idEnd: 69006
              bounds: 215,1680,200,7
            END
            69008_69009:PFCTree.View.Link
              id: 69172
              fromID: 69008
              toID: 69009
              bounds: 313,1687,6,73
            END
            SerialConvergent69009:PFCTree.View.SerialConvergent
              id: 69009
              idEnd: 69004
              bounds: 0,1760,415,7
            END
            69009_69010:PFCTree.View.Link
              id: 69173
              fromID: 69009
              toID: 69010
              bounds: 205,1767,6,73
            END
            SerialDivergent69010:PFCTree.View.SerialDivergent
              id: 69010
              idEnd: 69106
              bounds: 0,1840,845,7
            END
            69010_69011:PFCTree.View.Link
              id: 69174
              fromID: 69010
              toID: 69011
              bounds: 98,1847,6,73
            END
            69010_69012:PFCTree.View.Link
              id: 69175
              fromID: 69010
              toID: 69012
              bounds: 635,1847,6,73
            END
            BREXIT_SMPL_CHK_BS:PFCTree.View.Script
              id: 69011
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"BrexitSample"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"NO"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,1920,200,7
              executeAtClientID: No
            END
            SerialDivergent69012:PFCTree.View.SerialDivergent
              id: 69012
              idEnd: 69022
              bounds: 430,1920,415,7
            END
            69011_69013:PFCTree.View.Link
              id: 69176
              fromID: 69011
              toID: 69013
              bounds: 98,1927,6,73
            END
            69012_69014:PFCTree.View.Link
              id: 69177
              fromID: 69012
              toID: 69014
              bounds: 528,1927,6,73
            END
            69012_69015:PFCTree.View.Link
              id: 69178
              fromID: 69012
              toID: 69015
              bounds: 743,1927,6,73
            END
            SerialDivergent69013:PFCTree.View.SerialDivergent
              id: 69013
              idEnd: 69023
              bounds: 0,2000,415,7
            END
            S_TOTAL_BREXIT_SMP_BS:PFCTree.View.Script
              id: 69014
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vi_BrexitSmp"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$BSmp1 + $$BSmp2 + $$BSmp3 + $$BSmp4 + $$BSmp5 + $$BSmp6 + $$BSmp7 + $$BSmp8};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 430,2000,200,7
              executeAtClientID: No
            END
            ParallelDivergent69015:PFCTree.View.ParallelDivergent
              id: 69015
              idEnd: 69020
              bounds: 645,2000,200,7
            END
            69013_69016:PFCTree.View.Link
              id: 69179
              fromID: 69013
              toID: 69016
              bounds: 98,2007,6,73
            END
            69013_69017:PFCTree.View.Link
              id: 69180
              fromID: 69013
              toID: 69017
              bounds: 313,2007,6,73
            END
            69014_69022:PFCTree.View.Link
              id: 69181
              fromID: 69014
              toID: 69022
              bounds: 528,2007,6,233
            END
            69015_69018:PFCTree.View.Link
              id: 69182
              fromID: 69015
              toID: 69018
              bounds: 743,2007,6,73
            END
            S_SET_BREXIT_SMP_ZERO_BS:PFCTree.View.Script
              id: 69016
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vi_BrexitSmp","vi_BrexitPUL"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{0,0};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,2080,200,7
              executeAtClientID: No
            END
            ParallelDivergent69017:PFCTree.View.ParallelDivergent
              id: 69017
              idEnd: 69021
              bounds: 215,2080,200,7
            END
            P_TOTAL_BREXIT_SMP_BS:PFCTree.View.Script
              id: 69018
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vi_BrexitSmp"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$BSmp1 + $$BSmp2 + $$BSmp3 + $$BSmp4 + $$BSmp5 + $$BSmp6 + $$BSmp7 + $$BSmp8};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 645,2080,200,7
              executeAtClientID: No
            END
            69016_69023:PFCTree.View.Link
              id: 69183
              fromID: 69016
              toID: 69023
              bounds: 98,2087,6,233
            END
            69017_69019:PFCTree.View.Link
              id: 69184
              fromID: 69017
              toID: 69019
              bounds: 313,2087,6,73
            END
            69018_69020:PFCTree.View.Link
              id: 69185
              fromID: 69018
              toID: 69020
              bounds: 743,2087,6,73
            END
            P_SET_BREXIT_SMP_ZERO_BS:PFCTree.View.Script
              id: 69019
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vi_BrexitSmp","vi_BrexitPUL"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{0,0};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,2160,200,7
              executeAtClientID: No
            END
            ParallelConvergent69020:PFCTree.View.ParallelConvergent
              id: 69020
              idEnd: 69015
              bounds: 645,2160,200,7
            END
            69019_69021:PFCTree.View.Link
              id: 69186
              fromID: 69019
              toID: 69021
              bounds: 313,2167,6,73
            END
            69020_69022:PFCTree.View.Link
              id: 69187
              fromID: 69020
              toID: 69022
              bounds: 743,2167,6,73
            END
            ParallelConvergent69021:PFCTree.View.ParallelConvergent
              id: 69021
              idEnd: 69017
              bounds: 215,2240,200,7
            END
            SerialConvergent69022:PFCTree.View.SerialConvergent
              id: 69022
              idEnd: 69012
              bounds: 430,2240,415,7
            END
            69021_69023:PFCTree.View.Link
              id: 69188
              fromID: 69021
              toID: 69023
              bounds: 313,2247,6,73
            END
            69022_69024:PFCTree.View.Link
              id: 69189
              fromID: 69022
              toID: 69024
              bounds: 635,2247,6,73
            END
            SerialConvergent69023:PFCTree.View.SerialConvergent
              id: 69023
              idEnd: 69013
              bounds: 0,2320,415,7
            END
            ParallelDivergent69024:PFCTree.View.ParallelDivergent
              id: 69024
              idEnd: 69061
              bounds: 430,2320,1705,7
            END
            69023_69106:PFCTree.View.Link
              id: 69190
              fromID: 69023
              toID: 69106
              bounds: 205,2327,6,1993
            END
            69024_69025:PFCTree.View.Link
              id: 69191
              fromID: 69024
              toID: 69025
              bounds: 635,2327,6,73
            END
            69024_69026:PFCTree.View.Link
              id: 69192
              fromID: 69024
              toID: 69026
              bounds: 1065,2327,6,73
            END
            69024_69027:PFCTree.View.Link
              id: 69193
              fromID: 69024
              toID: 69027
              bounds: 1495,2327,6,73
            END
            69024_69028:PFCTree.View.Link
              id: 69194
              fromID: 69024
              toID: 69028
              bounds: 1925,2327,6,73
            END
            SerialDivergent69025:PFCTree.View.SerialDivergent
              id: 69025
              idEnd: 69057
              bounds: 430,2400,415,7
            END
            SerialDivergent69026:PFCTree.View.SerialDivergent
              id: 69026
              idEnd: 69058
              bounds: 860,2400,415,7
            END
            SerialDivergent69027:PFCTree.View.SerialDivergent
              id: 69027
              idEnd: 69059
              bounds: 1290,2400,415,7
            END
            SerialDivergent69028:PFCTree.View.SerialDivergent
              id: 69028
              idEnd: 69060
              bounds: 1720,2400,415,7
            END
            69025_69029:PFCTree.View.Link
              id: 69195
              fromID: 69025
              toID: 69029
              bounds: 528,2407,6,73
            END
            69026_69030:PFCTree.View.Link
              id: 69196
              fromID: 69026
              toID: 69030
              bounds: 958,2407,6,73
            END
            69027_69031:PFCTree.View.Link
              id: 69197
              fromID: 69027
              toID: 69031
              bounds: 1388,2407,6,73
            END
            69028_69032:PFCTree.View.Link
              id: 69198
              fromID: 69028
              toID: 69032
              bounds: 1818,2407,6,73
            END
            BREXIT_NOT_ZERO_1_BS:PFCTree.View.Script
              id: 69029
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;NULL;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"BSmp1"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{0};Global variable value;;;true;;
                iCheck_Condition;19;{">"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 430,2480,200,7
              executeAtClientID: No
            END
            BREXIT_NOT_ZERO_2_BS:PFCTree.View.Script
              id: 69030
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;NULL;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"BSmp2"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{0};Global variable value;;;true;;
                iCheck_Condition;19;{">"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 860,2480,200,7
              executeAtClientID: No
            END
            BREXIT_NOT_ZERO_3_BS:PFCTree.View.Script
              id: 69031
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;NULL;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"BSmp3"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{0};Global variable value;;;true;;
                iCheck_Condition;19;{">"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 1290,2480,200,7
              executeAtClientID: No
            END
            BREXIT_NOT_ZERO_4_BS:PFCTree.View.Script
              id: 69032
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;NULL;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"BSmp4"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{0};Global variable value;;;true;;
                iCheck_Condition;19;{">"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 1720,2480,200,7
              executeAtClientID: No
            END
            69029_69033:PFCTree.View.Link
              id: 69199
              fromID: 69029
              toID: 69033
              bounds: 528,2487,6,73
            END
            69030_69034:PFCTree.View.Link
              id: 69200
              fromID: 69030
              toID: 69034
              bounds: 958,2487,6,73
            END
            69031_69035:PFCTree.View.Link
              id: 69201
              fromID: 69031
              toID: 69035
              bounds: 1388,2487,6,73
            END
            69032_69036:PFCTree.View.Link
              id: 69202
              fromID: 69032
              toID: 69036
              bounds: 1818,2487,6,73
            END
            SerialDivergent69033:PFCTree.View.SerialDivergent
              id: 69033
              idEnd: 69053
              bounds: 430,2560,415,7
            END
            SerialDivergent69034:PFCTree.View.SerialDivergent
              id: 69034
              idEnd: 69054
              bounds: 860,2560,415,7
            END
            SerialDivergent69035:PFCTree.View.SerialDivergent
              id: 69035
              idEnd: 69055
              bounds: 1290,2560,415,7
            END
            SerialDivergent69036:PFCTree.View.SerialDivergent
              id: 69036
              idEnd: 69056
              bounds: 1720,2560,415,7
            END
            69033_69037:PFCTree.View.Link
              id: 69203
              fromID: 69033
              toID: 69037
              bounds: 528,2567,6,73
            END
            69033_69038:PFCTree.View.Link
              id: 69204
              fromID: 69033
              toID: 69038
              bounds: 743,2567,6,73
            END
            69034_69039:PFCTree.View.Link
              id: 69205
              fromID: 69034
              toID: 69039
              bounds: 958,2567,6,73
            END
            69034_69040:PFCTree.View.Link
              id: 69206
              fromID: 69034
              toID: 69040
              bounds: 1173,2567,6,73
            END
            69035_69041:PFCTree.View.Link
              id: 69207
              fromID: 69035
              toID: 69041
              bounds: 1388,2567,6,73
            END
            69035_69042:PFCTree.View.Link
              id: 69208
              fromID: 69035
              toID: 69042
              bounds: 1603,2567,6,73
            END
            69036_69043:PFCTree.View.Link
              id: 69209
              fromID: 69036
              toID: 69043
              bounds: 1818,2567,6,73
            END
            69036_69044:PFCTree.View.Link
              id: 69210
              fromID: 69036
              toID: 69044
              bounds: 2033,2567,6,73
            END
            S_CHK_BREXIT_SMP1_BS:PFCTree.View.Script
              id: 69037
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"BSmp1"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$BSmp1 < $$TubesPerOuter ? 1 : MOD($$BSmp1, $$TubesPerOuter) > 0 ? INT( $$BSmp1 / $$TubesPerOuter) + 1 : INT( $$BSmp1 / $$TubesPerOuter)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 430,2640,200,7
              executeAtClientID: No
            END
            ParallelDivergent69038:PFCTree.View.ParallelDivergent
              id: 69038
              idEnd: 69049
              bounds: 645,2640,200,7
            END
            S_CHK_BREXIT_SMP2_BS:PFCTree.View.Script
              id: 69039
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"BSmp2"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$BSmp2 < $$TubesPerOuter ? 1 : MOD($$BSmp2,$$TubesPerOuter) > 0 ? INT( $$BSmp2 / $$TubesPerOuter) + 1 : INT( $$BSmp2 / $$TubesPerOuter)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 860,2640,200,7
              executeAtClientID: No
            END
            ParallelDivergent69040:PFCTree.View.ParallelDivergent
              id: 69040
              idEnd: 69050
              bounds: 1075,2640,200,7
            END
            S_CHK_BREXIT_SMP3_BS:PFCTree.View.Script
              id: 69041
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"BSmp3"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$BSmp3 < $$TubesPerOuter ? 1 : MOD($$BSmp3,$$TubesPerOuter) > 0 ? INT( $$BSmp3 / $$TubesPerOuter) + 1 : INT( $$BSmp3 / $$TubesPerOuter)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1290,2640,200,7
              executeAtClientID: No
            END
            ParallelDivergent69042:PFCTree.View.ParallelDivergent
              id: 69042
              idEnd: 69051
              bounds: 1505,2640,200,7
            END
            S_CHK_BREXIT_SMP4_BS:PFCTree.View.Script
              id: 69043
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"BSmp4"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$BSmp4 < $$TubesPerOuter ? 1 : MOD($$BSmp4,$$TubesPerOuter) > 0 ? INT( $$BSmp4 / $$TubesPerOuter) + 1 : INT( $$BSmp4 / $$TubesPerOuter)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1720,2640,200,7
              executeAtClientID: No
            END
            ParallelDivergent69044:PFCTree.View.ParallelDivergent
              id: 69044
              idEnd: 69052
              bounds: 1935,2640,200,7
            END
            69037_69053:PFCTree.View.Link
              id: 69211
              fromID: 69037
              toID: 69053
              bounds: 528,2647,6,233
            END
            69038_69045:PFCTree.View.Link
              id: 69212
              fromID: 69038
              toID: 69045
              bounds: 743,2647,6,73
            END
            69039_69054:PFCTree.View.Link
              id: 69213
              fromID: 69039
              toID: 69054
              bounds: 958,2647,6,233
            END
            69040_69046:PFCTree.View.Link
              id: 69214
              fromID: 69040
              toID: 69046
              bounds: 1173,2647,6,73
            END
            69041_69055:PFCTree.View.Link
              id: 69215
              fromID: 69041
              toID: 69055
              bounds: 1388,2647,6,233
            END
            69042_69047:PFCTree.View.Link
              id: 69216
              fromID: 69042
              toID: 69047
              bounds: 1603,2647,6,73
            END
            69043_69056:PFCTree.View.Link
              id: 69217
              fromID: 69043
              toID: 69056
              bounds: 1818,2647,6,233
            END
            69044_69048:PFCTree.View.Link
              id: 69218
              fromID: 69044
              toID: 69048
              bounds: 2033,2647,6,73
            END
            P_CHK_BREXIT_SMP1_BS:PFCTree.View.Script
              id: 69045
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"BSmp1"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$BSmp1 < $$TubesPerOuter ? 1 : MOD($$BSmp1, $$TubesPerOuter) > 0 ? INT( $$BSmp1 / $$TubesPerOuter) + 1 : INT( $$BSmp1 / $$TubesPerOuter)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 645,2720,200,7
              executeAtClientID: No
            END
            P_CHK_BREXIT_SMP2_BS:PFCTree.View.Script
              id: 69046
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"BSmp2"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$BSmp2 < $$TubesPerOuter ? 1 : MOD($$BSmp2,$$TubesPerOuter) > 0 ? INT( $$BSmp2 / $$TubesPerOuter) + 1 : INT( $$BSmp2 / $$TubesPerOuter)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1075,2720,200,7
              executeAtClientID: No
            END
            P_CHK_BREXIT_SMP3_BS:PFCTree.View.Script
              id: 69047
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"BSmp3"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$BSmp3 < $$TubesPerOuter ? 1 : MOD($$BSmp3,$$TubesPerOuter) > 0 ? INT( $$BSmp3 / $$TubesPerOuter) + 1 : INT( $$BSmp3 / $$TubesPerOuter)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1505,2720,200,7
              executeAtClientID: No
            END
            P_CHK_BREXIT_SMP4_BS:PFCTree.View.Script
              id: 69048
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"BSmp4"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$BSmp4 < $$TubesPerOuter ? 1 : MOD($$BSmp4,$$TubesPerOuter) > 0 ? INT( $$BSmp4 / $$TubesPerOuter) + 1 : INT( $$BSmp4 / $$TubesPerOuter)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1935,2720,200,7
              executeAtClientID: No
            END
            69045_69049:PFCTree.View.Link
              id: 69219
              fromID: 69045
              toID: 69049
              bounds: 743,2727,6,73
            END
            69046_69050:PFCTree.View.Link
              id: 69220
              fromID: 69046
              toID: 69050
              bounds: 1173,2727,6,73
            END
            69047_69051:PFCTree.View.Link
              id: 69221
              fromID: 69047
              toID: 69051
              bounds: 1603,2727,6,73
            END
            69048_69052:PFCTree.View.Link
              id: 69222
              fromID: 69048
              toID: 69052
              bounds: 2033,2727,6,73
            END
            ParallelConvergent69049:PFCTree.View.ParallelConvergent
              id: 69049
              idEnd: 69038
              bounds: 645,2800,200,7
            END
            ParallelConvergent69050:PFCTree.View.ParallelConvergent
              id: 69050
              idEnd: 69040
              bounds: 1075,2800,200,7
            END
            ParallelConvergent69051:PFCTree.View.ParallelConvergent
              id: 69051
              idEnd: 69042
              bounds: 1505,2800,200,7
            END
            ParallelConvergent69052:PFCTree.View.ParallelConvergent
              id: 69052
              idEnd: 69044
              bounds: 1935,2800,200,7
            END
            69049_69053:PFCTree.View.Link
              id: 69223
              fromID: 69049
              toID: 69053
              bounds: 743,2807,6,73
            END
            69050_69054:PFCTree.View.Link
              id: 69224
              fromID: 69050
              toID: 69054
              bounds: 1173,2807,6,73
            END
            69051_69055:PFCTree.View.Link
              id: 69225
              fromID: 69051
              toID: 69055
              bounds: 1603,2807,6,73
            END
            69052_69056:PFCTree.View.Link
              id: 69226
              fromID: 69052
              toID: 69056
              bounds: 2033,2807,6,73
            END
            SerialConvergent69053:PFCTree.View.SerialConvergent
              id: 69053
              idEnd: 69033
              bounds: 430,2880,415,7
            END
            SerialConvergent69054:PFCTree.View.SerialConvergent
              id: 69054
              idEnd: 69034
              bounds: 860,2880,415,7
            END
            SerialConvergent69055:PFCTree.View.SerialConvergent
              id: 69055
              idEnd: 69035
              bounds: 1290,2880,415,7
            END
            SerialConvergent69056:PFCTree.View.SerialConvergent
              id: 69056
              idEnd: 69036
              bounds: 1720,2880,415,7
            END
            69053_69057:PFCTree.View.Link
              id: 69227
              fromID: 69053
              toID: 69057
              bounds: 635,2887,6,73
            END
            69054_69058:PFCTree.View.Link
              id: 69228
              fromID: 69054
              toID: 69058
              bounds: 1065,2887,6,73
            END
            69055_69059:PFCTree.View.Link
              id: 69229
              fromID: 69055
              toID: 69059
              bounds: 1495,2887,6,73
            END
            69056_69060:PFCTree.View.Link
              id: 69230
              fromID: 69056
              toID: 69060
              bounds: 1925,2887,6,73
            END
            SerialConvergent69057:PFCTree.View.SerialConvergent
              id: 69057
              idEnd: 69025
              bounds: 430,2960,415,7
            END
            SerialConvergent69058:PFCTree.View.SerialConvergent
              id: 69058
              idEnd: 69026
              bounds: 860,2960,415,7
            END
            SerialConvergent69059:PFCTree.View.SerialConvergent
              id: 69059
              idEnd: 69027
              bounds: 1290,2960,415,7
            END
            SerialConvergent69060:PFCTree.View.SerialConvergent
              id: 69060
              idEnd: 69028
              bounds: 1720,2960,415,7
            END
            69057_69061:PFCTree.View.Link
              id: 69231
              fromID: 69057
              toID: 69061
              bounds: 635,2967,6,73
            END
            69058_69061:PFCTree.View.Link
              id: 69232
              fromID: 69058
              toID: 69061
              bounds: 1065,2967,6,73
            END
            69059_69061:PFCTree.View.Link
              id: 69233
              fromID: 69059
              toID: 69061
              bounds: 1495,2967,6,73
            END
            69060_69061:PFCTree.View.Link
              id: 69234
              fromID: 69060
              toID: 69061
              bounds: 1925,2967,6,73
            END
            ParallelConvergent69061:PFCTree.View.ParallelConvergent
              id: 69061
              idEnd: 69024
              bounds: 430,3040,1705,7
            END
            69061_69062:PFCTree.View.Link
              id: 69235
              fromID: 69061
              toID: 69062
              bounds: 1280,3047,6,73
            END
            ParallelDivergent69062:PFCTree.View.ParallelDivergent
              id: 69062
              idEnd: 69099
              bounds: 430,3120,1705,7
            END
            69062_69063:PFCTree.View.Link
              id: 69236
              fromID: 69062
              toID: 69063
              bounds: 635,3127,6,73
            END
            69062_69064:PFCTree.View.Link
              id: 69237
              fromID: 69062
              toID: 69064
              bounds: 1065,3127,6,73
            END
            69062_69065:PFCTree.View.Link
              id: 69238
              fromID: 69062
              toID: 69065
              bounds: 1495,3127,6,73
            END
            69062_69066:PFCTree.View.Link
              id: 69239
              fromID: 69062
              toID: 69066
              bounds: 1925,3127,6,73
            END
            SerialDivergent69063:PFCTree.View.SerialDivergent
              id: 69063
              idEnd: 69095
              bounds: 430,3200,415,7
            END
            SerialDivergent69064:PFCTree.View.SerialDivergent
              id: 69064
              idEnd: 69096
              bounds: 860,3200,415,7
            END
            SerialDivergent69065:PFCTree.View.SerialDivergent
              id: 69065
              idEnd: 69097
              bounds: 1290,3200,415,7
            END
            SerialDivergent69066:PFCTree.View.SerialDivergent
              id: 69066
              idEnd: 69098
              bounds: 1720,3200,415,7
            END
            69063_69067:PFCTree.View.Link
              id: 69240
              fromID: 69063
              toID: 69067
              bounds: 528,3207,6,73
            END
            69064_69068:PFCTree.View.Link
              id: 69241
              fromID: 69064
              toID: 69068
              bounds: 958,3207,6,73
            END
            69065_69069:PFCTree.View.Link
              id: 69242
              fromID: 69065
              toID: 69069
              bounds: 1388,3207,6,73
            END
            69066_69070:PFCTree.View.Link
              id: 69243
              fromID: 69066
              toID: 69070
              bounds: 1818,3207,6,73
            END
            BREXIT_NOT_ZERO_5_BS:PFCTree.View.Script
              id: 69067
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;NULL;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"BSmp5"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{0};Global variable value;;;true;;
                iCheck_Condition;19;{">"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 430,3280,200,7
              executeAtClientID: No
            END
            BREXIT_NOT_ZERO_6_BS:PFCTree.View.Script
              id: 69068
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;NULL;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"BSmp6"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{0};Global variable value;;;true;;
                iCheck_Condition;19;{">"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 860,3280,200,7
              executeAtClientID: No
            END
            BREXIT_NOT_ZERO_7_BS:PFCTree.View.Script
              id: 69069
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;NULL;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"BSmp7"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{0};Global variable value;;;true;;
                iCheck_Condition;19;{">"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 1290,3280,200,7
              executeAtClientID: No
            END
            BREXIT_NOT_ZERO_8_BS:PFCTree.View.Script
              id: 69070
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;NULL;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"BSmp8"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{0};Global variable value;;;true;;
                iCheck_Condition;19;{">"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 1720,3280,200,7
              executeAtClientID: No
            END
            69067_69071:PFCTree.View.Link
              id: 69244
              fromID: 69067
              toID: 69071
              bounds: 528,3287,6,73
            END
            69068_69072:PFCTree.View.Link
              id: 69245
              fromID: 69068
              toID: 69072
              bounds: 958,3287,6,73
            END
            69069_69073:PFCTree.View.Link
              id: 69246
              fromID: 69069
              toID: 69073
              bounds: 1388,3287,6,73
            END
            69070_69074:PFCTree.View.Link
              id: 69247
              fromID: 69070
              toID: 69074
              bounds: 1818,3287,6,73
            END
            SerialDivergent69071:PFCTree.View.SerialDivergent
              id: 69071
              idEnd: 69091
              bounds: 430,3360,415,7
            END
            SerialDivergent69072:PFCTree.View.SerialDivergent
              id: 69072
              idEnd: 69092
              bounds: 860,3360,415,7
            END
            SerialDivergent69073:PFCTree.View.SerialDivergent
              id: 69073
              idEnd: 69093
              bounds: 1290,3360,415,7
            END
            SerialDivergent69074:PFCTree.View.SerialDivergent
              id: 69074
              idEnd: 69094
              bounds: 1720,3360,415,7
            END
            69071_69075:PFCTree.View.Link
              id: 69248
              fromID: 69071
              toID: 69075
              bounds: 528,3367,6,73
            END
            69071_69076:PFCTree.View.Link
              id: 69249
              fromID: 69071
              toID: 69076
              bounds: 743,3367,6,73
            END
            69072_69077:PFCTree.View.Link
              id: 69250
              fromID: 69072
              toID: 69077
              bounds: 958,3367,6,73
            END
            69072_69078:PFCTree.View.Link
              id: 69251
              fromID: 69072
              toID: 69078
              bounds: 1173,3367,6,73
            END
            69073_69079:PFCTree.View.Link
              id: 69252
              fromID: 69073
              toID: 69079
              bounds: 1388,3367,6,73
            END
            69073_69080:PFCTree.View.Link
              id: 69253
              fromID: 69073
              toID: 69080
              bounds: 1603,3367,6,73
            END
            69074_69081:PFCTree.View.Link
              id: 69254
              fromID: 69074
              toID: 69081
              bounds: 1818,3367,6,73
            END
            69074_69082:PFCTree.View.Link
              id: 69255
              fromID: 69074
              toID: 69082
              bounds: 2033,3367,6,73
            END
            S_CHK_BREXIT_SMP5_BS:PFCTree.View.Script
              id: 69075
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"BSmp5"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$BSmp5 < $$TubesPerOuter ? 1 : MOD($$BSmp5,$$TubesPerOuter) > 0 ? INT( $$BSmp5 / $$TubesPerOuter) + 1 : INT( $$BSmp5 / $$TubesPerOuter)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 430,3440,200,7
              executeAtClientID: No
            END
            ParallelDivergent69076:PFCTree.View.ParallelDivergent
              id: 69076
              idEnd: 69087
              bounds: 645,3440,200,7
            END
            S_CHK_BREXIT_SMP6_BS:PFCTree.View.Script
              id: 69077
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"BSmp6"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$BSmp6 < $$TubesPerOuter ? 1 : MOD($$BSmp6,$$TubesPerOuter) > 0 ? INT( $$BSmp6 / $$TubesPerOuter) + 1 : INT( $$BSmp6 / $$TubesPerOuter)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 860,3440,200,7
              executeAtClientID: No
            END
            ParallelDivergent69078:PFCTree.View.ParallelDivergent
              id: 69078
              idEnd: 69088
              bounds: 1075,3440,200,7
            END
            S_CHK_BREXIT_SMP7_BS:PFCTree.View.Script
              id: 69079
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"BSmp7"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$BSmp7 < $$TubesPerOuter ? 1 : MOD($$BSmp7,$$TubesPerOuter) > 0 ? INT( $$BSmp7 / $$TubesPerOuter) + 1 : INT( $$BSmp7 / $$TubesPerOuter)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1290,3440,200,7
              executeAtClientID: No
            END
            ParallelDivergent69080:PFCTree.View.ParallelDivergent
              id: 69080
              idEnd: 69089
              bounds: 1505,3440,200,7
            END
            S_CHK_BREXIT_SMP8_BS:PFCTree.View.Script
              id: 69081
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"BSmp8"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$BSmp8 < $$TubesPerOuter ? 1 : MOD($$BSmp8,$$TubesPerOuter) > 0 ? INT( $$BSmp8 / $$TubesPerOuter) + 1 : INT( $$BSmp8 / $$TubesPerOuter)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1720,3440,200,7
              executeAtClientID: No
            END
            ParallelDivergent69082:PFCTree.View.ParallelDivergent
              id: 69082
              idEnd: 69090
              bounds: 1935,3440,200,7
            END
            69075_69091:PFCTree.View.Link
              id: 69256
              fromID: 69075
              toID: 69091
              bounds: 528,3447,6,233
            END
            69076_69083:PFCTree.View.Link
              id: 69257
              fromID: 69076
              toID: 69083
              bounds: 743,3447,6,73
            END
            69077_69092:PFCTree.View.Link
              id: 69258
              fromID: 69077
              toID: 69092
              bounds: 958,3447,6,233
            END
            69078_69084:PFCTree.View.Link
              id: 69259
              fromID: 69078
              toID: 69084
              bounds: 1173,3447,6,73
            END
            69079_69093:PFCTree.View.Link
              id: 69260
              fromID: 69079
              toID: 69093
              bounds: 1388,3447,6,233
            END
            69080_69085:PFCTree.View.Link
              id: 69261
              fromID: 69080
              toID: 69085
              bounds: 1603,3447,6,73
            END
            69081_69094:PFCTree.View.Link
              id: 69262
              fromID: 69081
              toID: 69094
              bounds: 1818,3447,6,233
            END
            69082_69086:PFCTree.View.Link
              id: 69263
              fromID: 69082
              toID: 69086
              bounds: 2033,3447,6,73
            END
            P_CHK_BREXIT_SMP5_BS:PFCTree.View.Script
              id: 69083
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"BSmp5"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$BSmp5 < $$TubesPerOuter ? 1 : MOD($$BSmp5,$$TubesPerOuter) > 0 ? INT( $$BSmp5 / $$TubesPerOuter) + 1 : INT( $$BSmp5 / $$TubesPerOuter)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 645,3520,200,7
              executeAtClientID: No
            END
            P_CHK_BREXIT_SMP6_BS:PFCTree.View.Script
              id: 69084
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"BSmp6"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$BSmp6 < $$TubesPerOuter ? 1 : MOD($$BSmp6,$$TubesPerOuter) > 0 ? INT( $$BSmp6 / $$TubesPerOuter) + 1 : INT( $$BSmp6 / $$TubesPerOuter)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1075,3520,200,7
              executeAtClientID: No
            END
            P_CHK_BREXIT_SMP7_BS:PFCTree.View.Script
              id: 69085
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"BSmp7"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$BSmp7 < $$TubesPerOuter ? 1 : MOD($$BSmp7,$$TubesPerOuter) > 0 ? INT( $$BSmp7 / $$TubesPerOuter) + 1 : INT( $$BSmp7 / $$TubesPerOuter)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1505,3520,200,7
              executeAtClientID: No
            END
            P_CHK_BREXIT_SMP8_BS:PFCTree.View.Script
              id: 69086
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"BSmp8"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$BSmp8 < $$TubesPerOuter ? 1 : MOD($$BSmp8,$$TubesPerOuter) > 0 ? INT( $$BSmp8 / $$TubesPerOuter) + 1 : INT( $$BSmp8 / $$TubesPerOuter)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 1935,3520,200,7
              executeAtClientID: No
            END
            69083_69087:PFCTree.View.Link
              id: 69264
              fromID: 69083
              toID: 69087
              bounds: 743,3527,6,73
            END
            69084_69088:PFCTree.View.Link
              id: 69265
              fromID: 69084
              toID: 69088
              bounds: 1173,3527,6,73
            END
            69085_69089:PFCTree.View.Link
              id: 69266
              fromID: 69085
              toID: 69089
              bounds: 1603,3527,6,73
            END
            69086_69090:PFCTree.View.Link
              id: 69267
              fromID: 69086
              toID: 69090
              bounds: 2033,3527,6,73
            END
            ParallelConvergent69087:PFCTree.View.ParallelConvergent
              id: 69087
              idEnd: 69076
              bounds: 645,3600,200,7
            END
            ParallelConvergent69088:PFCTree.View.ParallelConvergent
              id: 69088
              idEnd: 69078
              bounds: 1075,3600,200,7
            END
            ParallelConvergent69089:PFCTree.View.ParallelConvergent
              id: 69089
              idEnd: 69080
              bounds: 1505,3600,200,7
            END
            ParallelConvergent69090:PFCTree.View.ParallelConvergent
              id: 69090
              idEnd: 69082
              bounds: 1935,3600,200,7
            END
            69087_69091:PFCTree.View.Link
              id: 69268
              fromID: 69087
              toID: 69091
              bounds: 743,3607,6,73
            END
            69088_69092:PFCTree.View.Link
              id: 69269
              fromID: 69088
              toID: 69092
              bounds: 1173,3607,6,73
            END
            69089_69093:PFCTree.View.Link
              id: 69270
              fromID: 69089
              toID: 69093
              bounds: 1603,3607,6,73
            END
            69090_69094:PFCTree.View.Link
              id: 69271
              fromID: 69090
              toID: 69094
              bounds: 2033,3607,6,73
            END
            SerialConvergent69091:PFCTree.View.SerialConvergent
              id: 69091
              idEnd: 69071
              bounds: 430,3680,415,7
            END
            SerialConvergent69092:PFCTree.View.SerialConvergent
              id: 69092
              idEnd: 69072
              bounds: 860,3680,415,7
            END
            SerialConvergent69093:PFCTree.View.SerialConvergent
              id: 69093
              idEnd: 69073
              bounds: 1290,3680,415,7
            END
            SerialConvergent69094:PFCTree.View.SerialConvergent
              id: 69094
              idEnd: 69074
              bounds: 1720,3680,415,7
            END
            69091_69095:PFCTree.View.Link
              id: 69272
              fromID: 69091
              toID: 69095
              bounds: 635,3687,6,73
            END
            69092_69096:PFCTree.View.Link
              id: 69273
              fromID: 69092
              toID: 69096
              bounds: 1065,3687,6,73
            END
            69093_69097:PFCTree.View.Link
              id: 69274
              fromID: 69093
              toID: 69097
              bounds: 1495,3687,6,73
            END
            69094_69098:PFCTree.View.Link
              id: 69275
              fromID: 69094
              toID: 69098
              bounds: 1925,3687,6,73
            END
            SerialConvergent69095:PFCTree.View.SerialConvergent
              id: 69095
              idEnd: 69063
              bounds: 430,3760,415,7
            END
            SerialConvergent69096:PFCTree.View.SerialConvergent
              id: 69096
              idEnd: 69064
              bounds: 860,3760,415,7
            END
            SerialConvergent69097:PFCTree.View.SerialConvergent
              id: 69097
              idEnd: 69065
              bounds: 1290,3760,415,7
            END
            SerialConvergent69098:PFCTree.View.SerialConvergent
              id: 69098
              idEnd: 69066
              bounds: 1720,3760,415,7
            END
            69095_69099:PFCTree.View.Link
              id: 69276
              fromID: 69095
              toID: 69099
              bounds: 635,3767,6,73
            END
            69096_69099:PFCTree.View.Link
              id: 69277
              fromID: 69096
              toID: 69099
              bounds: 1065,3767,6,73
            END
            69097_69099:PFCTree.View.Link
              id: 69278
              fromID: 69097
              toID: 69099
              bounds: 1495,3767,6,73
            END
            69098_69099:PFCTree.View.Link
              id: 69279
              fromID: 69098
              toID: 69099
              bounds: 1925,3767,6,73
            END
            ParallelConvergent69099:PFCTree.View.ParallelConvergent
              id: 69099
              idEnd: 69062
              bounds: 430,3840,1705,7
            END
            69099_69100:PFCTree.View.Link
              id: 69280
              fromID: 69099
              toID: 69100
              bounds: 635,3847,6,73
            END
            SerialDivergent69100:PFCTree.View.SerialDivergent
              id: 69100
              idEnd: 69105
              bounds: 430,3920,415,7
            END
            69100_69101:PFCTree.View.Link
              id: 69281
              fromID: 69100
              toID: 69101
              bounds: 528,3927,6,73
            END
            69100_69102:PFCTree.View.Link
              id: 69282
              fromID: 69100
              toID: 69102
              bounds: 743,3927,6,73
            END
            S_TOTAL_PUL_BREXIT_SMP_BS:PFCTree.View.Script
              id: 69101
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vi_BrexitPUL"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$BSmp1 + $$BSmp2 + $$BSmp3 + $$BSmp4 + $$BSmp5 + $$BSmp6 + $$BSmp7 + $$BSmp8};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 430,4000,200,7
              executeAtClientID: No
            END
            ParallelDivergent69102:PFCTree.View.ParallelDivergent
              id: 69102
              idEnd: 69104
              bounds: 645,4000,200,7
            END
            69101_69105:PFCTree.View.Link
              id: 69283
              fromID: 69101
              toID: 69105
              bounds: 528,4007,6,233
            END
            69102_69103:PFCTree.View.Link
              id: 69284
              fromID: 69102
              toID: 69103
              bounds: 743,4007,6,73
            END
            P_TOTAL_PUL_BREXIT_SMP_BS:PFCTree.View.Script
              id: 69103
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vi_BrexitPUL"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$BSmp1 + $$BSmp2 + $$BSmp3 + $$BSmp4 + $$BSmp5 + $$BSmp6 + $$BSmp7 + $$BSmp8};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 645,4080,200,7
              executeAtClientID: No
            END
            69103_69104:PFCTree.View.Link
              id: 69285
              fromID: 69103
              toID: 69104
              bounds: 743,4087,6,73
            END
            ParallelConvergent69104:PFCTree.View.ParallelConvergent
              id: 69104
              idEnd: 69102
              bounds: 645,4160,200,7
            END
            69104_69105:PFCTree.View.Link
              id: 69286
              fromID: 69104
              toID: 69105
              bounds: 743,4167,6,73
            END
            SerialConvergent69105:PFCTree.View.SerialConvergent
              id: 69105
              idEnd: 69100
              bounds: 430,4240,415,7
            END
            69105_69106:PFCTree.View.Link
              id: 69287
              fromID: 69105
              toID: 69106
              bounds: 635,4247,6,73
            END
            SerialConvergent69106:PFCTree.View.SerialConvergent
              id: 69106
              idEnd: 69010
              bounds: 0,4320,845,7
            END
            69106_69107:PFCTree.View.Link
              id: 69288
              fromID: 69106
              toID: 69107
              bounds: 420,4327,6,73
            END
            SerialDivergent69107:PFCTree.View.SerialDivergent
              id: 69107
              idEnd: 69121
              bounds: 0,4400,845,7
            END
            69107_69108:PFCTree.View.Link
              id: 69289
              fromID: 69107
              toID: 69108
              bounds: 98,4407,6,73
            END
            69107_69109:PFCTree.View.Link
              id: 69290
              fromID: 69107
              toID: 69109
              bounds: 635,4407,6,73
            END
            IS_PARTIAL_ZERO_BS:PFCTree.View.Script
              id: 69108
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"PartialOuterPULQty"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{0};Global variable value;;;true;;
                iCheck_Condition;19;{">"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,4480,200,7
              executeAtClientID: No
            END
            SerialDivergent69109:PFCTree.View.SerialDivergent
              id: 69109
              idEnd: 69119
              bounds: 430,4480,415,7
            END
            69108_69110:PFCTree.View.Link
              id: 69291
              fromID: 69108
              toID: 69110
              bounds: 98,4487,6,73
            END
            69109_69111:PFCTree.View.Link
              id: 69292
              fromID: 69109
              toID: 69111
              bounds: 528,4487,6,73
            END
            69109_69112:PFCTree.View.Link
              id: 69293
              fromID: 69109
              toID: 69112
              bounds: 743,4487,6,73
            END
            SerialDivergent69110:PFCTree.View.SerialDivergent
              id: 69110
              idEnd: 69120
              bounds: 0,4560,415,7
            END
            S_LBL_CNT_7_BS:PFCTree.View.Script
              id: 69111
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vi_TotalLblPULUsed"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$TotalPULLblUsed + $$PartialCntPULQty + $$vi_BrexitPUL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 430,4560,200,7
              executeAtClientID: No
            END
            ParallelDivergent69112:PFCTree.View.ParallelDivergent
              id: 69112
              idEnd: 69117
              bounds: 645,4560,200,7
            END
            69110_69113:PFCTree.View.Link
              id: 69294
              fromID: 69110
              toID: 69113
              bounds: 98,4567,6,73
            END
            69110_69114:PFCTree.View.Link
              id: 69295
              fromID: 69110
              toID: 69114
              bounds: 313,4567,6,73
            END
            69111_69119:PFCTree.View.Link
              id: 69296
              fromID: 69111
              toID: 69119
              bounds: 528,4567,6,233
            END
            69112_69115:PFCTree.View.Link
              id: 69297
              fromID: 69112
              toID: 69115
              bounds: 743,4567,6,73
            END
            S_LBL_CNT_6_BS:PFCTree.View.Script
              id: 69113
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vi_TotalLblPULUsed"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{1 + $$TotalPULLblUsed + $$PartialCntPULQty + $$vi_BrexitPUL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,4640,200,7
              executeAtClientID: No
            END
            ParallelDivergent69114:PFCTree.View.ParallelDivergent
              id: 69114
              idEnd: 69118
              bounds: 215,4640,200,7
            END
            P_LBL_CNT_7_BS:PFCTree.View.Script
              id: 69115
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vi_TotalLblPULUsed"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$TotalPULLblUsed + $$PartialCntPULQty + $$vi_BrexitPUL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 645,4640,200,7
              executeAtClientID: No
            END
            69113_69120:PFCTree.View.Link
              id: 69298
              fromID: 69113
              toID: 69120
              bounds: 98,4647,6,233
            END
            69114_69116:PFCTree.View.Link
              id: 69299
              fromID: 69114
              toID: 69116
              bounds: 313,4647,6,73
            END
            69115_69117:PFCTree.View.Link
              id: 69300
              fromID: 69115
              toID: 69117
              bounds: 743,4647,6,73
            END
            P_LBL_CNT_6_BS:PFCTree.View.Script
              id: 69116
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vi_TotalLblPULUsed"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{1 + $$TotalPULLblUsed + $$PartialCntPULQty + $$vi_BrexitPUL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,4720,200,7
              executeAtClientID: No
            END
            ParallelConvergent69117:PFCTree.View.ParallelConvergent
              id: 69117
              idEnd: 69112
              bounds: 645,4720,200,7
            END
            69116_69118:PFCTree.View.Link
              id: 69301
              fromID: 69116
              toID: 69118
              bounds: 313,4727,6,73
            END
            69117_69119:PFCTree.View.Link
              id: 69302
              fromID: 69117
              toID: 69119
              bounds: 743,4727,6,73
            END
            ParallelConvergent69118:PFCTree.View.ParallelConvergent
              id: 69118
              idEnd: 69114
              bounds: 215,4800,200,7
            END
            SerialConvergent69119:PFCTree.View.SerialConvergent
              id: 69119
              idEnd: 69109
              bounds: 430,4800,415,7
            END
            69118_69120:PFCTree.View.Link
              id: 69303
              fromID: 69118
              toID: 69120
              bounds: 313,4807,6,73
            END
            69119_69121:PFCTree.View.Link
              id: 69304
              fromID: 69119
              toID: 69121
              bounds: 635,4807,6,153
            END
            SerialConvergent69120:PFCTree.View.SerialConvergent
              id: 69120
              idEnd: 69110
              bounds: 0,4880,415,7
            END
            69120_69121:PFCTree.View.Link
              id: 69305
              fromID: 69120
              toID: 69121
              bounds: 205,4887,6,73
            END
            SerialConvergent69121:PFCTree.View.SerialConvergent
              id: 69121
              idEnd: 69107
              bounds: 0,4960,845,7
            END
            69121_69122:PFCTree.View.Link
              id: 69306
              fromID: 69121
              toID: 69122
              bounds: 420,4967,6,73
            END
            SerialDivergent69122:PFCTree.View.SerialDivergent
              id: 69122
              idEnd: 69139
              bounds: 0,5040,845,7
            END
            69122_69123:PFCTree.View.Link
              id: 69307
              fromID: 69122
              toID: 69123
              bounds: 98,5047,6,73
            END
            CHK_FOR_BUNDLES_BS:PFCTree.View.Script
              id: 69123
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"BUNDLES"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,5120,200,7
              executeAtClientID: No
            END
            69123_69124:PFCTree.View.Link
              id: 69308
              fromID: 69123
              toID: 69124
              bounds: 98,5127,6,73
            END
            SerialDivergent69124:PFCTree.View.SerialDivergent
              id: 69124
              idEnd: 69138
              bounds: 0,5200,845,7
            END
            69124_69125:PFCTree.View.Link
              id: 69309
              fromID: 69124
              toID: 69125
              bounds: 98,5207,6,73
            END
            69124_69126:PFCTree.View.Link
              id: 69310
              fromID: 69124
              toID: 69126
              bounds: 635,5207,6,73
            END
            CHK_BULS_ONLY_BS:PFCTree.View.Script
              id: 69125
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"BULsOnly"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"Yes"};Global variable value;;;true;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,5280,200,7
              executeAtClientID: No
            END
            SerialDivergent69126:PFCTree.View.SerialDivergent
              id: 69126
              idEnd: 69136
              bounds: 430,5280,415,7
            END
            69125_69127:PFCTree.View.Link
              id: 69311
              fromID: 69125
              toID: 69127
              bounds: 98,5287,6,73
            END
            69126_69128:PFCTree.View.Link
              id: 69312
              fromID: 69126
              toID: 69128
              bounds: 528,5287,6,73
            END
            69126_69129:PFCTree.View.Link
              id: 69313
              fromID: 69126
              toID: 69129
              bounds: 743,5287,6,73
            END
            SerialDivergent69127:PFCTree.View.SerialDivergent
              id: 69127
              idEnd: 69137
              bounds: 0,5360,415,7
            END
            S_BULS_CALC_BS:PFCTree.View.Script
              id: 69128
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vi_TotalLblBULUsed"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{(INT((($$TotalPULLblUsed * $$TubesPerOuter) + ($$PartialCntPULQty * $$TubesPerOuter)) / $$BULPackQty)) + INT($$PartialOuterPULQty / $$BULPackQty)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 430,5360,200,7
              executeAtClientID: No
            END
            ParallelDivergent69129:PFCTree.View.ParallelDivergent
              id: 69129
              idEnd: 69134
              bounds: 645,5360,200,7
            END
            69127_69130:PFCTree.View.Link
              id: 69314
              fromID: 69127
              toID: 69130
              bounds: 98,5367,6,73
            END
            69127_69131:PFCTree.View.Link
              id: 69315
              fromID: 69127
              toID: 69131
              bounds: 313,5367,6,73
            END
            69128_69136:PFCTree.View.Link
              id: 69316
              fromID: 69128
              toID: 69136
              bounds: 528,5367,6,233
            END
            69129_69132:PFCTree.View.Link
              id: 69317
              fromID: 69129
              toID: 69132
              bounds: 743,5367,6,73
            END
            S_BULS_ONLY_CALC_BS:PFCTree.View.Script
              id: 69130
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vi_TotalLblBULUsed"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$vi_TotalLblPULUsed};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,5440,200,7
              executeAtClientID: No
            END
            ParallelDivergent69131:PFCTree.View.ParallelDivergent
              id: 69131
              idEnd: 69135
              bounds: 215,5440,200,7
            END
            P_BULS_CALC_BS:PFCTree.View.Script
              id: 69132
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vi_TotalLblBULUsed"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{(INT((($$TotalPULLblUsed * $$TubesPerOuter) + ($$PartialCntPULQty * $$TubesPerOuter)) / $$BULPackQty)) + INT($$PartialOuterPULQty / $$BULPackQty)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 645,5440,200,7
              executeAtClientID: No
            END
            69130_69137:PFCTree.View.Link
              id: 69318
              fromID: 69130
              toID: 69137
              bounds: 98,5447,6,233
            END
            69131_69133:PFCTree.View.Link
              id: 69319
              fromID: 69131
              toID: 69133
              bounds: 313,5447,6,73
            END
            69132_69134:PFCTree.View.Link
              id: 69320
              fromID: 69132
              toID: 69134
              bounds: 743,5447,6,73
            END
            P_BULS_ONLY_CALC_BS:PFCTree.View.Script
              id: 69133
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vi_TotalLblBULUsed"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$vi_TotalLblPULUsed};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,5520,200,7
              executeAtClientID: No
            END
            ParallelConvergent69134:PFCTree.View.ParallelConvergent
              id: 69134
              idEnd: 69129
              bounds: 645,5520,200,7
            END
            69133_69135:PFCTree.View.Link
              id: 69321
              fromID: 69133
              toID: 69135
              bounds: 313,5527,6,73
            END
            69134_69136:PFCTree.View.Link
              id: 69322
              fromID: 69134
              toID: 69136
              bounds: 743,5527,6,73
            END
            ParallelConvergent69135:PFCTree.View.ParallelConvergent
              id: 69135
              idEnd: 69131
              bounds: 215,5600,200,7
            END
            SerialConvergent69136:PFCTree.View.SerialConvergent
              id: 69136
              idEnd: 69126
              bounds: 430,5600,415,7
            END
            69135_69137:PFCTree.View.Link
              id: 69323
              fromID: 69135
              toID: 69137
              bounds: 313,5607,6,73
            END
            69136_69138:PFCTree.View.Link
              id: 69324
              fromID: 69136
              toID: 69138
              bounds: 635,5607,6,153
            END
            SerialConvergent69137:PFCTree.View.SerialConvergent
              id: 69137
              idEnd: 69127
              bounds: 0,5680,415,7
            END
            69137_69138:PFCTree.View.Link
              id: 69325
              fromID: 69137
              toID: 69138
              bounds: 205,5687,6,73
            END
            SerialConvergent69138:PFCTree.View.SerialConvergent
              id: 69138
              idEnd: 69124
              bounds: 0,5760,845,7
            END
            69138_69139:PFCTree.View.Link
              id: 69326
              fromID: 69138
              toID: 69139
              bounds: 420,5767,6,73
            END
            SerialConvergent69139:PFCTree.View.SerialConvergent
              id: 69139
              idEnd: 69122
              bounds: 0,5840,845,7
            END
            69139_69140:PFCTree.View.Link
              id: 69327
              fromID: 69139
              toID: 69140
              bounds: 98,5847,6,73
            END
            EndNode69140:PFCTree.View.EndNode
              id: 69140
              bounds: 0,5920,200,70
            END
          END
          bounds: 727,880,130,83
        END
        R_DECOMMISION_BS:PFCTree.View.Script
          id: 69328
          buildingBlockElementID: ORDER_MANAGEMENT.REACTIVATE
          arguments:
            iReactivateByDefault;1;YES;Defines if the block is reactivated or not when the reactivation flag is NULL;;;false;;
          end
          type: 2
          order: 0
          bounds: 1162,880,130,55
          step: 68928
          executeAtClientID: No
        END
        ParallelDivergent69329:PFCTree.View.ParallelDivergent
          id: 69329
          idEnd: 69442
          bounds: 147,915,275,40
        END
        69328_69441:PFCTree.View.Link
          id: 69594
          fromID: 69328
          toID: 69441
          bounds: 1220,935,16,55
        END
        69329_69330:PFCTree.View.Link
          id: 69595
          fromID: 69329
          toID: 69330
          bounds: 205,955,16,35
        END
        69329_69336:PFCTree.View.Link
          id: 69596
          fromID: 69329
          toID: 69336
          bounds: 350,955,16,35
        END
        68981_69398:PFCTree.View.ControlLink
          id: 69597
          fromID: 68981
          toID: 69398
          bounds: 785,963,16,27
        END
        EOB_IPC_OP:PFCTree.View.Operation
          description: End of Batch IPC
          id: 69330
          order: 0
          design:
            BeginNode69331:PFCTree.View.BeginNode
              id: 69331
              bounds: 2,16,130,32
            END
            69331_69333:PFCTree.View.ControlLink
              id: 69618
              fromID: 69331
              toID: 69333
              bounds: 60,48,16,78
            END
            EndNode69333:PFCTree.View.EndNode
              id: 69333
              bounds: 2,126,130,32
            END
          END
          bounds: 147,990,130,83
        END
        CLOCK_REASON_2_OP:PFCTree.View.Operation
          description: End of Batch Reason
          id: 69336
          order: 1
          design:
            BeginNode69337:PFCTree.View.BeginNode
              id: 69337
              bounds: 74,16,130,32
            END
            69337_69338:PFCTree.View.Link
              id: 69366
              fromID: 69337
              toID: 69338
              bounds: 132,48,16,97
            END
            SerialDivergent69338:PFCTree.View.SerialDivergent
              id: 69338
              idEnd: 69364
              bounds: 2,145,275,40
            END
            69338_69339:PFCTree.View.Link
              id: 69367
              fromID: 69338
              toID: 69339
              bounds: 132,185,16,70
            END
            SerialDivergent69339:PFCTree.View.SerialDivergent
              id: 69339
              idEnd: 69344
              bounds: 2,255,275,40
            END
            69339_69340:PFCTree.View.Link
              id: 69368
              fromID: 69339
              toID: 69340
              bounds: 60,295,16,35
            END
            69339_69341:PFCTree.View.Link
              id: 69369
              fromID: 69339
              toID: 69341
              bounds: 205,295,16,70
            END
            S_CHK_HOLD_CHALL2_BS:PFCTree.View.Script
              id: 69340
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 2,330,130,55
              executeAtClientID: No
            END
            ParallelDivergent69341:PFCTree.View.ParallelDivergent
              id: 69341
              idEnd: 69343
              bounds: 147,365,130,40
            END
            69340_69344:PFCTree.View.Link
              id: 69370
              fromID: 69340
              toID: 69344
              bounds: 60,385,16,275
            END
            69341_69342:PFCTree.View.Link
              id: 69371
              fromID: 69341
              toID: 69342
              bounds: 205,405,16,35
            END
            P_CHK_HOLD_CHALL2_BS:PFCTree.View.Script
              id: 69342
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 147,440,130,55
              executeAtClientID: No
            END
            69342_69343:PFCTree.View.Link
              id: 69372
              fromID: 69342
              toID: 69343
              bounds: 205,495,16,55
            END
            ParallelConvergent69343:PFCTree.View.ParallelConvergent
              id: 69343
              idEnd: 69341
              bounds: 147,550,130,40
            END
            69343_69344:PFCTree.View.Link
              id: 69373
              fromID: 69343
              toID: 69344
              bounds: 205,590,16,70
            END
            SerialConvergent69344:PFCTree.View.SerialConvergent
              id: 69344
              idEnd: 69339
              bounds: 2,660,275,40
            END
            69344_69345:PFCTree.View.Link
              id: 69374
              fromID: 69344
              toID: 69345
              bounds: 132,700,16,105
            END
            SerialDivergent69345:PFCTree.View.SerialDivergent
              id: 69345
              idEnd: 69350
              bounds: 2,805,275,40
            END
            69345_69346:PFCTree.View.Link
              id: 69375
              fromID: 69345
              toID: 69346
              bounds: 60,845,16,35
            END
            69345_69347:PFCTree.View.Link
              id: 69376
              fromID: 69345
              toID: 69347
              bounds: 205,845,16,70
            END
            EOB_CHALLENGES_BS:PFCTree.View.Script
              id: 69346
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"EOB"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 2,880,130,55
              executeAtClientID: No
            END
            ParallelDivergent69347:PFCTree.View.ParallelDivergent
              id: 69347
              idEnd: 69349
              bounds: 147,915,130,40
            END
            69346_69350:PFCTree.View.Link
              id: 69377
              fromID: 69346
              toID: 69350
              bounds: 60,935,16,275
            END
            69347_69348:PFCTree.View.Link
              id: 69378
              fromID: 69347
              toID: 69348
              bounds: 205,955,16,35
            END
            P_EOB_CHALLENGES_BS:PFCTree.View.Script
              id: 69348
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Challenge1"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"EOB"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 147,990,130,55
              executeAtClientID: No
            END
            69348_69349:PFCTree.View.Link
              id: 69379
              fromID: 69348
              toID: 69349
              bounds: 205,1045,16,55
            END
            ParallelConvergent69349:PFCTree.View.ParallelConvergent
              id: 69349
              idEnd: 69347
              bounds: 147,1100,130,40
            END
            69349_69350:PFCTree.View.Link
              id: 69380
              fromID: 69349
              toID: 69350
              bounds: 205,1140,16,70
            END
            SerialConvergent69350:PFCTree.View.SerialConvergent
              id: 69350
              idEnd: 69345
              bounds: 2,1210,275,40
            END
            69350_69351:PFCTree.View.Link
              id: 69381
              fromID: 69350
              toID: 69351
              bounds: 132,1250,16,105
            END
            SerialDivergent69351:PFCTree.View.SerialDivergent
              id: 69351
              idEnd: 69356
              bounds: 2,1355,275,40
            END
            69351_69352:PFCTree.View.Link
              id: 69382
              fromID: 69351
              toID: 69352
              bounds: 60,1395,16,35
            END
            69351_69353:PFCTree.View.Link
              id: 69383
              fromID: 69351
              toID: 69353
              bounds: 205,1395,16,70
            END
            S_DISABLE_CHALL_PHASE_4_BS:PFCTree.View.Script
              id: 69352
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"DISABLE_CHALLENGE_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,1430,130,55
              executeAtClientID: No
            END
            ParallelDivergent69353:PFCTree.View.ParallelDivergent
              id: 69353
              idEnd: 69355
              bounds: 147,1465,130,40
            END
            69352_69356:PFCTree.View.Link
              id: 69384
              fromID: 69352
              toID: 69356
              bounds: 60,1485,16,275
            END
            69353_69354:PFCTree.View.Link
              id: 69385
              fromID: 69353
              toID: 69354
              bounds: 205,1505,16,35
            END
            P_DISABLE_CHALL_PHASE_4_BS:PFCTree.View.Script
              id: 69354
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"DISABLE_CHALLENGE_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 147,1540,130,55
              executeAtClientID: No
            END
            69354_69355:PFCTree.View.Link
              id: 69386
              fromID: 69354
              toID: 69355
              bounds: 205,1595,16,55
            END
            ParallelConvergent69355:PFCTree.View.ParallelConvergent
              id: 69355
              idEnd: 69353
              bounds: 147,1650,130,40
            END
            69355_69356:PFCTree.View.Link
              id: 69387
              fromID: 69355
              toID: 69356
              bounds: 205,1690,16,70
            END
            SerialConvergent69356:PFCTree.View.SerialConvergent
              id: 69356
              idEnd: 69351
              bounds: 2,1760,275,40
            END
            69356_69357:PFCTree.View.Link
              id: 69388
              fromID: 69356
              toID: 69357
              bounds: 132,1800,16,70
            END
            HOLD_CHALL_FOUR_BP:PFCTree.View.Phase
              description: DISABLE BP
              buildingBlockElementID: GENERIC.INSTRUCTION
              arguments:
                iSignature_Required;3;"Ok button";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;NULL;RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;NULL;Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_Print;1;NO;Print button visible;;;false;;
                iButton_Report;19;;Reports available for report button. If Null, report button is not visible;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iEquipment_Type;3;;Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;3;;Equipment Allocation Phase;;;true;;
                iStepAutoComplete;18;;PLC step that signals the completion of the automatic process;;;true;;
                iInstruction;19;{"THIS WILL BE DISABLED BY WORKFLOW"};Default Instructions;;;false;;
                iStep_Instruction;19;;Instructions for step;;;true;;
                iStep_Start;18;;Step range start;;;true;;
                iStep_End;18;;Step range end;;;true;;
                iForceViewPEL;1;NO;If Yes, PEL report must have been called to allow phase validation;;;false;;
                iEnforcedReportName;19;;The Report selected must be viewed by the user before sign off the Phase;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iLabelTemplate;3;;Label template to be printed;;=TRANSLATE ( "OVERALL.L_" + PARSE_LIST ( GET_CONFIG ( "<OVERALL.CONFIG_KEYS>LabelTemplateSpecialList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Disable
              autoStart: No
              usePhaseRet: Yes
              Converge: No
              id: 69357
              order: 0
              bounds: 74,1870,130,83
            END
            69357_69358:PFCTree.View.Link
              id: 69389
              fromID: 69357
              toID: 69358
              bounds: 132,1953,16,62
            END
            SerialDivergent69358:PFCTree.View.SerialDivergent
              id: 69358
              idEnd: 69363
              bounds: 2,2015,275,40
            END
            69358_69359:PFCTree.View.Link
              id: 69390
              fromID: 69358
              toID: 69359
              bounds: 60,2055,16,35
            END
            69358_69360:PFCTree.View.Link
              id: 69391
              fromID: 69358
              toID: 69360
              bounds: 205,2055,16,70
            END
            S_SET_LC4_NO_BS:PFCTree.View.Script
              id: 69359
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"L4"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{No};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,2090,130,55
              executeAtClientID: No
            END
            ParallelDivergent69360:PFCTree.View.ParallelDivergent
              id: 69360
              idEnd: 69362
              bounds: 147,2125,130,40
            END
            69359_69363:PFCTree.View.Link
              id: 69392
              fromID: 69359
              toID: 69363
              bounds: 60,2145,16,275
            END
            69360_69361:PFCTree.View.Link
              id: 69393
              fromID: 69360
              toID: 69361
              bounds: 205,2165,16,35
            END
            P_SET_LC4_NO_BS:PFCTree.View.Script
              id: 69361
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"L4"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{No};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,2200,130,55
              executeAtClientID: No
            END
            69361_69362:PFCTree.View.Link
              id: 69394
              fromID: 69361
              toID: 69362
              bounds: 205,2255,16,55
            END
            ParallelConvergent69362:PFCTree.View.ParallelConvergent
              id: 69362
              idEnd: 69360
              bounds: 147,2310,130,40
            END
            69362_69363:PFCTree.View.Link
              id: 69395
              fromID: 69362
              toID: 69363
              bounds: 205,2350,16,70
            END
            SerialConvergent69363:PFCTree.View.SerialConvergent
              id: 69363
              idEnd: 69358
              bounds: 2,2420,275,40
            END
            69363_69364:PFCTree.View.Link
              id: 69396
              fromID: 69363
              toID: 69364
              bounds: 132,2460,16,70
            END
            SerialConvergent69364:PFCTree.View.SerialConvergent
              id: 69364
              idEnd: 69338
              bounds: 2,2530,275,40
            END
            69364_69365:PFCTree.View.Link
              id: 69397
              fromID: 69364
              toID: 69365
              bounds: 132,2570,16,86
            END
            EndNode69365:PFCTree.View.EndNode
              id: 69365
              bounds: 74,2656,130,32
            END
          END
          bounds: 292,990,130,83
        END
        GOOD_PRODUCT_SCRIPTS_OP:PFCTree.View.Operation
          description: GOOD PRODUCT SCRIPTS
          id: 69398
          order: 0
          design:
            BeginNode69399:PFCTree.View.BeginNode
              id: 69399
              bounds: 0,0,200,70
            END
            69399_69400:PFCTree.View.Link
              id: 69419
              fromID: 69399
              toID: 69400
              bounds: 98,70,6,10
            END
            SerialDivergent69400:PFCTree.View.SerialDivergent
              id: 69400
              idEnd: 69405
              bounds: 0,80,415,7
            END
            69400_69401:PFCTree.View.Link
              id: 69420
              fromID: 69400
              toID: 69401
              bounds: 98,87,6,73
            END
            69400_69402:PFCTree.View.Link
              id: 69421
              fromID: 69400
              toID: 69402
              bounds: 313,87,6,73
            END
            S_GOOD_PRODUCT_COUNT_BS:PFCTree.View.Script
              id: 69401
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_GPCount","vs_GPPartial"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL,NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"GOOD_PRODUCT_COUNT_BP","PARTIAL_PALLET_COUNT_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CALCULATION\LIMIT_CALCULATED_VALUE[2]","CALCULATION\LIMIT_CALCULATED_VALUE"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,160,200,7
              executeAtClientID: No
            END
            ParallelDivergent69402:PFCTree.View.ParallelDivergent
              id: 69402
              idEnd: 69404
              bounds: 215,160,200,7
            END
            69401_69405:PFCTree.View.Link
              id: 69422
              fromID: 69401
              toID: 69405
              bounds: 98,167,6,233
            END
            69402_69403:PFCTree.View.Link
              id: 69423
              fromID: 69402
              toID: 69403
              bounds: 313,167,6,73
            END
            P_GOOD_PRODUCT_COUNT_BS:PFCTree.View.Script
              id: 69403
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_GPCount","vs_GPPartial"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL,NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"GOOD_PRODUCT_COUNT_BP","PARTIAL_PALLET_COUNT_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CALCULATION\LIMIT_CALCULATED_VALUE[2]","CALCULATION\LIMIT_CALCULATED_VALUE"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,240,200,7
              executeAtClientID: No
            END
            69403_69404:PFCTree.View.Link
              id: 69424
              fromID: 69403
              toID: 69404
              bounds: 313,247,6,73
            END
            ParallelConvergent69404:PFCTree.View.ParallelConvergent
              id: 69404
              idEnd: 69402
              bounds: 215,320,200,7
            END
            69404_69405:PFCTree.View.Link
              id: 69425
              fromID: 69404
              toID: 69405
              bounds: 313,327,6,73
            END
            SerialConvergent69405:PFCTree.View.SerialConvergent
              id: 69405
              idEnd: 69400
              bounds: 0,400,415,7
            END
            69405_69406:PFCTree.View.Link
              id: 69426
              fromID: 69405
              toID: 69406
              bounds: 205,407,6,73
            END
            SerialDivergent69406:PFCTree.View.SerialDivergent
              id: 69406
              idEnd: 69411
              bounds: 0,480,415,7
            END
            69406_69407:PFCTree.View.Link
              id: 69427
              fromID: 69406
              toID: 69407
              bounds: 98,487,6,73
            END
            69406_69408:PFCTree.View.Link
              id: 69428
              fromID: 69406
              toID: 69408
              bounds: 313,487,6,73
            END
            S_CHK_FOR_NULLS_BS:PFCTree.View.Script
              id: 69407
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_GPCount","vs_GPPartial"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$vs_GPCount <> NULL ? $$vs_GPCount : 0,$$vs_GPPartial <> NULL ? $$vs_GPPartial : 0};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,560,200,7
              executeAtClientID: No
            END
            ParallelDivergent69408:PFCTree.View.ParallelDivergent
              id: 69408
              idEnd: 69410
              bounds: 215,560,200,7
            END
            69407_69411:PFCTree.View.Link
              id: 69429
              fromID: 69407
              toID: 69411
              bounds: 98,567,6,233
            END
            69408_69409:PFCTree.View.Link
              id: 69430
              fromID: 69408
              toID: 69409
              bounds: 313,567,6,73
            END
            P_CHK_FOR_NULLS_BS:PFCTree.View.Script
              id: 69409
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_GPCount","vs_GPPartial"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$vs_GPCount <> NULL ? $$vs_GPCount : 0,$$vs_GPPartial <> NULL ? $$vs_GPPartial : 0};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,640,200,7
              executeAtClientID: No
            END
            69409_69410:PFCTree.View.Link
              id: 69431
              fromID: 69409
              toID: 69410
              bounds: 313,647,6,73
            END
            ParallelConvergent69410:PFCTree.View.ParallelConvergent
              id: 69410
              idEnd: 69408
              bounds: 215,720,200,7
            END
            69410_69411:PFCTree.View.Link
              id: 69432
              fromID: 69410
              toID: 69411
              bounds: 313,727,6,73
            END
            SerialConvergent69411:PFCTree.View.SerialConvergent
              id: 69411
              idEnd: 69406
              bounds: 0,800,415,7
            END
            69411_69412:PFCTree.View.Link
              id: 69433
              fromID: 69411
              toID: 69412
              bounds: 205,807,6,73
            END
            SerialDivergent69412:PFCTree.View.SerialDivergent
              id: 69412
              idEnd: 69417
              bounds: 0,880,415,7
            END
            69412_69413:PFCTree.View.Link
              id: 69434
              fromID: 69412
              toID: 69413
              bounds: 98,887,6,73
            END
            69412_69414:PFCTree.View.Link
              id: 69435
              fromID: 69412
              toID: 69414
              bounds: 313,887,6,73
            END
            S_SUM_GOOD_PRODUCT_BS:PFCTree.View.Script
              id: 69413
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_GPTotal"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$vs_GPCount + $$vs_GPPartial};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,960,200,7
              executeAtClientID: No
            END
            ParallelDivergent69414:PFCTree.View.ParallelDivergent
              id: 69414
              idEnd: 69416
              bounds: 215,960,200,7
            END
            69413_69417:PFCTree.View.Link
              id: 69436
              fromID: 69413
              toID: 69417
              bounds: 98,967,6,233
            END
            69414_69415:PFCTree.View.Link
              id: 69437
              fromID: 69414
              toID: 69415
              bounds: 313,967,6,73
            END
            P_SUM_GOOD_PRODUCT_BS:PFCTree.View.Script
              id: 69415
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vs_GPTotal"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$vs_GPCount + $$vs_GPPartial};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,1040,200,7
              executeAtClientID: No
            END
            69415_69416:PFCTree.View.Link
              id: 69438
              fromID: 69415
              toID: 69416
              bounds: 313,1047,6,73
            END
            ParallelConvergent69416:PFCTree.View.ParallelConvergent
              id: 69416
              idEnd: 69414
              bounds: 215,1120,200,7
            END
            69416_69417:PFCTree.View.Link
              id: 69439
              fromID: 69416
              toID: 69417
              bounds: 313,1127,6,73
            END
            SerialConvergent69417:PFCTree.View.SerialConvergent
              id: 69417
              idEnd: 69412
              bounds: 0,1200,415,7
            END
            69417_69418:PFCTree.View.Link
              id: 69440
              fromID: 69417
              toID: 69418
              bounds: 98,1207,6,73
            END
            EndNode69418:PFCTree.View.EndNode
              id: 69418
              bounds: 0,1280,200,70
            END
          END
          bounds: 727,990,130,83
        END
        SerialConvergent69441:PFCTree.View.SerialConvergent
          id: 69441
          idEnd: 68686
          bounds: 1162,990,130,40
        END
        69441_69443:PFCTree.View.Link
          id: 69598
          fromID: 69441
          toID: 69443
          bounds: 1220,1030,16,70
        END
        69330_69442:PFCTree.View.Link
          id: 69599
          fromID: 69330
          toID: 69442
          bounds: 205,1073,16,27
        END
        69336_69442:PFCTree.View.Link
          id: 69600
          fromID: 69336
          toID: 69442
          bounds: 350,1073,16,27
        END
        69398_69462:PFCTree.View.Link
          id: 69601
          fromID: 69398
          toID: 69462
          bounds: 785,1073,16,247
        END
        ParallelConvergent69442:PFCTree.View.ParallelConvergent
          id: 69442
          idEnd: 69329
          bounds: 147,1100,275,40
        END
        ParallelConvergent69443:PFCTree.View.ParallelConvergent
          id: 69443
          idEnd: 68510
          bounds: 872,1100,420,40
        END
        69442_69444:PFCTree.View.Link
          id: 69602
          fromID: 69442
          toID: 69444
          bounds: 277,1140,16,70
        END
        69443_69445:PFCTree.View.Link
          id: 69603
          fromID: 69443
          toID: 69445
          bounds: 1075,1140,16,70
        END
        ParallelConvergent69444:PFCTree.View.ParallelConvergent
          id: 69444
          idEnd: 68685
          bounds: 2,1210,710,40
        END
        SAMPLE_TOTALS_OP:PFCTree.View.Operation
          description: SAMPLING
          id: 69445
          order: 0
          design:
            BeginNode69446:PFCTree.View.BeginNode
              id: 69446
              bounds: 74,16,130,32
            END
            69446_69447:PFCTree.View.Link
              id: 69454
              fromID: 69446
              toID: 69447
              bounds: 132,48,16,97
            END
            SerialDivergent69447:PFCTree.View.SerialDivergent
              id: 69447
              idEnd: 69452
              bounds: 2,145,275,40
            END
            69447_69448:PFCTree.View.Link
              id: 69455
              fromID: 69447
              toID: 69448
              bounds: 60,185,16,35
            END
            69447_69449:PFCTree.View.Link
              id: 69456
              fromID: 69447
              toID: 69449
              bounds: 205,185,16,70
            END
            S_FINAL_SAMPLE_STR_BS:PFCTree.View.Script
              id: 69448
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"SmplPlanStr"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Total samples taken " + $$SmplPlanTot + $$SmplPlanStr};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,220,130,55
              executeAtClientID: No
            END
            ParallelDivergent69449:PFCTree.View.ParallelDivergent
              id: 69449
              idEnd: 69451
              bounds: 147,255,130,40
            END
            69448_69452:PFCTree.View.Link
              id: 69457
              fromID: 69448
              toID: 69452
              bounds: 60,275,16,275
            END
            69449_69450:PFCTree.View.Link
              id: 69458
              fromID: 69449
              toID: 69450
              bounds: 205,295,16,35
            END
            P_FINAL_SAMPLE_STR_BS:PFCTree.View.Script
              id: 69450
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"SmplPlanStr"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"Total samples taken " + $$SmplPlanTot + $$SmplPlanStr};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,330,130,55
              executeAtClientID: No
            END
            69450_69451:PFCTree.View.Link
              id: 69459
              fromID: 69450
              toID: 69451
              bounds: 205,385,16,55
            END
            ParallelConvergent69451:PFCTree.View.ParallelConvergent
              id: 69451
              idEnd: 69449
              bounds: 147,440,130,40
            END
            69451_69452:PFCTree.View.Link
              id: 69460
              fromID: 69451
              toID: 69452
              bounds: 205,480,16,70
            END
            SerialConvergent69452:PFCTree.View.SerialConvergent
              id: 69452
              idEnd: 69447
              bounds: 2,550,275,40
            END
            69452_69453:PFCTree.View.Link
              id: 69461
              fromID: 69452
              toID: 69453
              bounds: 132,590,16,86
            END
            EndNode69453:PFCTree.View.EndNode
              id: 69453
              bounds: 74,676,130,32
            END
          END
          bounds: 1017,1210,130,83
        END
        69444_69462:PFCTree.View.Link
          id: 69604
          fromID: 69444
          toID: 69462
          bounds: 350,1250,16,70
        END
        69445_69462:PFCTree.View.Link
          id: 69605
          fromID: 69445
          toID: 69462
          bounds: 1075,1293,16,27
        END
        ParallelConvergent69462:PFCTree.View.ParallelConvergent
          id: 69462
          idEnd: 68497
          bounds: 2,1320,1290,40
        END
        69462_69463:PFCTree.View.Link
          id: 69606
          fromID: 69462
          toID: 69463
          bounds: 640,1360,16,105
        END
        ParallelDivergent69463:PFCTree.View.ParallelDivergent
          id: 69463
          idEnd: 69561
          bounds: 437,1465,420,40
        END
        69463_69464:PFCTree.View.Link
          id: 69607
          fromID: 69463
          toID: 69464
          bounds: 495,1505,16,35
        END
        69463_69534:PFCTree.View.Link
          id: 69608
          fromID: 69463
          toID: 69534
          bounds: 640,1505,16,35
        END
        69463_69540:PFCTree.View.Link
          id: 69609
          fromID: 69463
          toID: 69540
          bounds: 785,1505,16,35
        END
        AVG_FILL_WEIGHT_OP:PFCTree.View.Operation
          description: AVG FILL WEIGHT
          id: 69464
          order: 0
          design:
            BeginNode69465:PFCTree.View.BeginNode
              id: 69465
              bounds: 292,16,130,32
            END
            69465_69466:PFCTree.View.Link
              id: 69497
              fromID: 69465
              toID: 69466
              bounds: 350,48,16,97
            END
            ParallelDivergent69466:PFCTree.View.ParallelDivergent
              id: 69466
              idEnd: 69495
              bounds: 2,145,710,40
            END
            69466_69467:PFCTree.View.Link
              id: 69498
              fromID: 69466
              toID: 69467
              bounds: 132,185,16,70
            END
            69466_69468:PFCTree.View.Link
              id: 69499
              fromID: 69466
              toID: 69468
              bounds: 495,185,16,70
            END
            SerialDivergent69467:PFCTree.View.SerialDivergent
              id: 69467
              idEnd: 69478
              bounds: 2,255,275,40
            END
            SerialDivergent69468:PFCTree.View.SerialDivergent
              id: 69468
              idEnd: 69494
              bounds: 292,255,420,40
            END
            69467_69469:PFCTree.View.Link
              id: 69500
              fromID: 69467
              toID: 69469
              bounds: 60,295,16,35
            END
            69467_69471:PFCTree.View.Link
              id: 69501
              fromID: 69467
              toID: 69471
              bounds: 205,295,16,70
            END
            69468_69470:PFCTree.View.Link
              id: 69502
              fromID: 69468
              toID: 69470
              bounds: 350,295,16,35
            END
            69468_69472:PFCTree.View.Link
              id: 69503
              fromID: 69468
              toID: 69472
              bounds: 567,295,16,70
            END
            QUERY_BULK_FILL_BS:PFCTree.View.Script
              id: 69469
              buildingBlockElementID: GENERIC.SET_GLOBAL_VARIABLE_FROM_UT
              arguments:
                iParameter_Name;19;NULL;Names for the local variables that will be used by the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>LocalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iParameter_Value;18;NULL;Numeric values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueStr;19;NULL;String values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueBool;17;NULL;Boolean values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueDate;20;NULL;Date values for the local variables that will be used by the query.;;;true;;
                iParameter_GlobalVariable;19;NULL;Global variables for the local variables that will be used by the query.;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iVariable_Source;19;{"Bulk Total","Current Bulk"};List of queries to be executed defined in QueryList configuration key.;;=TRANSLATE("GENERIC.L_"+PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>QueryList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iVariable_Query;19;{NULL,NULL};List of queries to be executed defined manually.;;;true;;
                iVariable_QueryResultType;19;{NULL,NULL};Type list of global variables to be set with the result of the query.;;={ TRANSLATE("GENERIC.L_Scalar"), TRANSLATE("GENERIC.L_Array") };true;;
                iVariable_Name;19;{"$$TotalBulk","$$Bulk"};List of global variables to be set with the result of the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>GlobalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iExecuteDefaultQueries;1;YES;Specify if execute or not default queries defined in DataSource configuration key.;;;false;;
              end
              type: 0
              order: 0
              bounds: 2,330,130,55
              executeAtClientID: No
            END
            CHK_PROCESSCELL2_BS:PFCTree.View.Script
              id: 69470
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;"OR";Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"ProcessCell","ProcessCell"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"DBUCP71","DBUCP79"};Global variable value;;;true;;
                iCheck_Condition;19;{"=","="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 292,330,130,55
              executeAtClientID: No
            END
            ParallelDivergent69471:PFCTree.View.ParallelDivergent
              id: 69471
              idEnd: 69476
              bounds: 147,365,130,40
            END
            SerialDivergent69472:PFCTree.View.SerialDivergent
              id: 69472
              idEnd: 69480
              bounds: 437,365,275,40
            END
            69469_69478:PFCTree.View.Link
              id: 69504
              fromID: 69469
              toID: 69478
              bounds: 60,385,16,275
            END
            69470_69494:PFCTree.View.Link
              id: 69505
              fromID: 69470
              toID: 69494
              bounds: 350,385,16,1155
            END
            69471_69473:PFCTree.View.Link
              id: 69506
              fromID: 69471
              toID: 69473
              bounds: 205,405,16,35
            END
            69472_69474:PFCTree.View.Link
              id: 69507
              fromID: 69472
              toID: 69474
              bounds: 495,405,16,35
            END
            69472_69475:PFCTree.View.Link
              id: 69508
              fromID: 69472
              toID: 69475
              bounds: 640,405,16,70
            END
            M_QUERY_BULK_FILL_BS:PFCTree.View.Script
              id: 69473
              buildingBlockElementID: GENERIC.SET_GLOBAL_VARIABLE_FROM_UT
              arguments:
                iParameter_Name;19;NULL;Names for the local variables that will be used by the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>LocalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iParameter_Value;18;NULL;Numeric values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueStr;19;NULL;String values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueBool;17;NULL;Boolean values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueDate;20;NULL;Date values for the local variables that will be used by the query.;;;true;;
                iParameter_GlobalVariable;19;NULL;Global variables for the local variables that will be used by the query.;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iVariable_Source;19;{"Bulk Total","Current Bulk"};List of queries to be executed defined in QueryList configuration key.;;=TRANSLATE("GENERIC.L_"+PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>QueryList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iVariable_Query;19;{NULL,NULL};List of queries to be executed defined manually.;;;true;;
                iVariable_QueryResultType;19;{NULL,NULL};Type list of global variables to be set with the result of the query.;;={ TRANSLATE("GENERIC.L_Scalar"), TRANSLATE("GENERIC.L_Array") };true;;
                iVariable_Name;19;{"$$TotalBulk","$$Bulk"};List of global variables to be set with the result of the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>GlobalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iExecuteDefaultQueries;1;YES;Specify if execute or not default queries defined in DataSource configuration key.;;;false;;
              end
              type: 0
              order: 0
              bounds: 147,440,130,55
              executeAtClientID: No
            END
            S_FILL_WEIGHTS_BS:PFCTree.View.Script
              id: 69474
              buildingBlockElementID: GENERIC.SET_GLOBAL_VARIABLE_FROM_UT
              arguments:
                iParameter_Name;19;NULL;Names for the local variables that will be used by the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>LocalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iParameter_Value;18;NULL;Numeric values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueStr;19;NULL;String values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueBool;17;NULL;Boolean values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueDate;20;NULL;Date values for the local variables that will be used by the query.;;;true;;
                iParameter_GlobalVariable;19;NULL;Global variables for the local variables that will be used by the query.;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iVariable_Source;19;{"Minimum Weight","Target Weight","Maximum Weight"};List of queries to be executed defined in QueryList configuration key.;;=TRANSLATE("GENERIC.L_"+PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>QueryList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iVariable_Query;19;{NULL,NULL,NULL};List of queries to be executed defined manually.;;;true;;
                iVariable_QueryResultType;19;{NULL,NULL,NULL};Type list of global variables to be set with the result of the query.;;={ TRANSLATE("GENERIC.L_Scalar"), TRANSLATE("GENERIC.L_Array") };true;;
                iVariable_Name;19;{"$$LowWeight","$$TargetWeight","$$HighWeight"};List of global variables to be set with the result of the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>GlobalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iExecuteDefaultQueries;1;YES;Specify if execute or not default queries defined in DataSource configuration key.;;;false;;
              end
              type: 0
              order: 0
              bounds: 437,440,130,55
              executeAtClientID: No
            END
            ParallelDivergent69475:PFCTree.View.ParallelDivergent
              id: 69475
              idEnd: 69479
              bounds: 582,475,130,40
            END
            69473_69476:PFCTree.View.Link
              id: 69509
              fromID: 69473
              toID: 69476
              bounds: 205,495,16,55
            END
            69474_69480:PFCTree.View.Link
              id: 69510
              fromID: 69474
              toID: 69480
              bounds: 495,495,16,275
            END
            69475_69477:PFCTree.View.Link
              id: 69511
              fromID: 69475
              toID: 69477
              bounds: 640,515,16,35
            END
            ParallelConvergent69476:PFCTree.View.ParallelConvergent
              id: 69476
              idEnd: 69471
              bounds: 147,550,130,40
            END
            P_FILL_WEIGHTS_BS:PFCTree.View.Script
              id: 69477
              buildingBlockElementID: GENERIC.SET_GLOBAL_VARIABLE_FROM_UT
              arguments:
                iParameter_Name;19;NULL;Names for the local variables that will be used by the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>LocalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iParameter_Value;18;NULL;Numeric values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueStr;19;NULL;String values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueBool;17;NULL;Boolean values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueDate;20;NULL;Date values for the local variables that will be used by the query.;;;true;;
                iParameter_GlobalVariable;19;NULL;Global variables for the local variables that will be used by the query.;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iVariable_Source;19;{"Minimum Weight","Target Weight","Maximum Weight"};List of queries to be executed defined in QueryList configuration key.;;=TRANSLATE("GENERIC.L_"+PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>QueryList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iVariable_Query;19;{NULL,NULL,NULL};List of queries to be executed defined manually.;;;true;;
                iVariable_QueryResultType;19;{NULL,NULL,NULL};Type list of global variables to be set with the result of the query.;;={ TRANSLATE("GENERIC.L_Scalar"), TRANSLATE("GENERIC.L_Array") };true;;
                iVariable_Name;19;{"$$LowWeight","$$TargetWeight","$$HighWeight"};List of global variables to be set with the result of the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>GlobalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iExecuteDefaultQueries;1;YES;Specify if execute or not default queries defined in DataSource configuration key.;;;false;;
              end
              type: 0
              order: 0
              bounds: 582,550,130,55
              executeAtClientID: No
            END
            69476_69478:PFCTree.View.Link
              id: 69512
              fromID: 69476
              toID: 69478
              bounds: 205,590,16,70
            END
            69477_69479:PFCTree.View.Link
              id: 69513
              fromID: 69477
              toID: 69479
              bounds: 640,605,16,55
            END
            SerialConvergent69478:PFCTree.View.SerialConvergent
              id: 69478
              idEnd: 69467
              bounds: 2,660,275,40
            END
            ParallelConvergent69479:PFCTree.View.ParallelConvergent
              id: 69479
              idEnd: 69475
              bounds: 582,660,130,40
            END
            69478_69481:PFCTree.View.Link
              id: 69514
              fromID: 69478
              toID: 69481
              bounds: 132,700,16,105
            END
            69479_69480:PFCTree.View.Link
              id: 69515
              fromID: 69479
              toID: 69480
              bounds: 640,700,16,70
            END
            SerialConvergent69480:PFCTree.View.SerialConvergent
              id: 69480
              idEnd: 69472
              bounds: 437,770,275,40
            END
            SerialDivergent69481:PFCTree.View.SerialDivergent
              id: 69481
              idEnd: 69490
              bounds: 2,805,275,40
            END
            69480_69483:PFCTree.View.Link
              id: 69516
              fromID: 69480
              toID: 69483
              bounds: 567,810,16,70
            END
            69481_69482:PFCTree.View.Link
              id: 69517
              fromID: 69481
              toID: 69482
              bounds: 60,845,16,35
            END
            69481_69484:PFCTree.View.Link
              id: 69518
              fromID: 69481
              toID: 69484
              bounds: 205,845,16,70
            END
            CAST_2_NUM_BS:PFCTree.View.Script
              id: 69482
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vr_TotalBulk","NewBulk"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{STR2NUM($$TotalBulk),STR2NUM($$Bulk)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 2,880,130,55
              executeAtClientID: No
            END
            AVG_FILL_WEIGHT_BP:PFCTree.View.Phase
              description: Average Fill Weight
              buildingBlockElementID: GENERIC.MEASUREMENT_ENTRY
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures,2nd blind signature;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Average fill weight entered";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_Permission2ndLevelOverwrite;3;NULL;Required RUDO for second level signature at Measurement Overwrite screen;;=GET_UDOS();true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Enter the average fill weight"};Instructions with a maximum of 3 lines;;;false;;
                iMeasurement1_Type;3;"NetWeight";Measurement type1;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));false;;
                iMeasurement1_Minimum;2;STR2NUM($$LowWeight);Minimum warning value1;;;true;;
                iMeasurement1_Target;2;STR2NUM($$TargetWeight);Target value1;;;true;;
                iMeasurement1_Maximum;2;STR2NUM($$HighWeight);Maximum warning value1;;;true;;
                iMeasurement1_EquipmentType;3;"ResourceArea";Equipment Type1;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");false;;
                iMeasurement1_RPLName;3;;RPL name1. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement1_EquipmentAllocationPhase;3;"EQUIPMENT_ALLOCATION_BP";Equipment Allocation Phase1;;;false;;
                iMeasurement1_CreateAtypEventOnOverwrite;1;YES;Indicates if creates or not an atypical event when overwrites value;;;false;;
                iMeasurement1_IP21Timeout;1;NO;Indicates if IP21 timeout is controlled for this measurement;;;false;;
                iMeasurement1_ForceManual;1;NO;Indicates if the measurement is considered as manual;;;false;;
                iMeasurement2_Type;3;NULL;Measurement type2;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement2_Minimum;2;;Minimum warning value2;;;true;;
                iMeasurement2_Target;2;;Target value2;;;true;;
                iMeasurement2_Maximum;2;;Maximum warning value2;;;true;;
                iMeasurement2_EquipmentType;3;;Equipment Type2;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement2_RPLName;3;;RPL name2. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement2_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement2_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement2_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement2_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement3_Type;3;;Measurement type3;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement3_Minimum;2;;Minimum warning value3;;;true;;
                iMeasurement3_Target;2;;Target value3;;;true;;
                iMeasurement3_Maximum;2;;Maximum warning value3;;;true;;
                iMeasurement3_EquipmentType;3;;Equipment Type3;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement3_RPLName;3;;RPL name3. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement3_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement3_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement3_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement3_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement4_Type;3;;Measurement type4;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement4_Minimum;2;;Minimum warning value4;;;true;;
                iMeasurement4_Target;2;;Target value4;;;true;;
                iMeasurement4_Maximum;2;;Maximum warning value4;;;true;;
                iMeasurement4_EquipmentType;3;;Equipment Type4;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement4_RPLName;3;;RPL name4. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement4_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement4_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement4_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement4_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement5_Type;3;;Measurement type5;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement5_Minimum;2;;Minimum warning value5;;;true;;
                iMeasurement5_Target;2;;Target value5;;;true;;
                iMeasurement5_Maximum;2;;Maximum warning value5;;;true;;
                iMeasurement5_EquipmentType;3;;Equipment Type4;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement5_RPLName;3;;RPL name5. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement5_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement5_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement5_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement5_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement6_Type;3;;Measurement type6;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement6_Minimum;2;;Minimum warning value6;;;true;;
                iMeasurement6_Target;2;;Target value6;;;true;;
                iMeasurement6_Maximum;2;;Maximum warning value6;;;true;;
                iMeasurement6_EquipmentType;3;;Equipment Type6;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement6_RPLName;3;;RPL name6. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement6_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement6_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement6_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement6_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iMeasurement7_Type;3;;Measurement type7;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
                iMeasurement7_Minimum;2;;Minimum warning value7;;;true;;
                iMeasurement7_Target;2;;Target value7;;;true;;
                iMeasurement7_Maximum;2;;Maximum warning value7;;;true;;
                iMeasurement7_EquipmentType;3;;Equipment Type7;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iMeasurement7_RPLName;3;;RPL name7. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iMeasurement7_EquipmentAllocationPhase;3;;Equipment Allocation Phase1;;;true;;
                iMeasurement7_CreateAtypEventOnOverwrite;1;;Indicates if creates or not an atypical event when overwrites value;;;true;;
                iMeasurement7_IP21Timeout;1;;Indicates if IP21 timeout is controlled for this measurement;;;true;;
                iMeasurement7_ForceManual;1;;Indicates if the measurement is considered as manual;;;true;;
                iAutoAtypEvent;1;YES;If YES, atypical event is raised in case of out of limits entry;;;false;;
                iIP21Timeout_Flag;3;"Global";Indicates which value is used for IP21 timeout. Environmental global variable or local BP argument;;Global,Local;false;;
                iIP21Timeout_Value;2;;Indicates the IP.21 timeout in minutes (NULL doesn't expire);;;true;;
                iSilentModeEnable;1;NO;If all the measurement are automatic and all of them has a good value, then the phase is closed automatically;;;false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 69483
              order: 0
              bounds: 509,880,130,83
            END
            ParallelDivergent69484:PFCTree.View.ParallelDivergent
              id: 69484
              idEnd: 69487
              bounds: 147,915,130,40
            END
            69482_69490:PFCTree.View.Link
              id: 69519
              fromID: 69482
              toID: 69490
              bounds: 60,935,16,275
            END
            69484_69485:PFCTree.View.Link
              id: 69520
              fromID: 69484
              toID: 69485
              bounds: 205,955,16,35
            END
            69483_69486:PFCTree.View.Link
              id: 69521
              fromID: 69483
              toID: 69486
              bounds: 567,963,16,62
            END
            M_CAST_2_NUM_BS:PFCTree.View.Script
              id: 69485
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vr_TotalBulk","NewBulk"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{STR2NUM($$TotalBulk),STR2NUM($$Bulk)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 147,990,130,55
              executeAtClientID: No
            END
            SerialDivergent69486:PFCTree.View.SerialDivergent
              id: 69486
              idEnd: 69493
              bounds: 437,1025,275,40
            END
            69485_69487:PFCTree.View.Link
              id: 69522
              fromID: 69485
              toID: 69487
              bounds: 205,1045,16,55
            END
            69486_69488:PFCTree.View.Link
              id: 69523
              fromID: 69486
              toID: 69488
              bounds: 495,1065,16,35
            END
            69486_69489:PFCTree.View.Link
              id: 69524
              fromID: 69486
              toID: 69489
              bounds: 640,1065,16,70
            END
            ParallelConvergent69487:PFCTree.View.ParallelConvergent
              id: 69487
              idEnd: 69484
              bounds: 147,1100,130,40
            END
            S_GET_FILL2_WEIGHT_BS:PFCTree.View.Script
              id: 69488
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AvgFillWeight"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"AVG_FILL_WEIGHT_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"MEASUREMENT_ENTRY\ACTUAL1"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 437,1100,130,55
              executeAtClientID: No
            END
            ParallelDivergent69489:PFCTree.View.ParallelDivergent
              id: 69489
              idEnd: 69492
              bounds: 582,1135,130,40
            END
            69487_69490:PFCTree.View.Link
              id: 69525
              fromID: 69487
              toID: 69490
              bounds: 205,1140,16,70
            END
            69488_69493:PFCTree.View.Link
              id: 69526
              fromID: 69488
              toID: 69493
              bounds: 495,1155,16,275
            END
            69489_69491:PFCTree.View.Link
              id: 69527
              fromID: 69489
              toID: 69491
              bounds: 640,1175,16,35
            END
            SerialConvergent69490:PFCTree.View.SerialConvergent
              id: 69490
              idEnd: 69481
              bounds: 2,1210,275,40
            END
            P_GET_FILL2_WEIGHT_BS:PFCTree.View.Script
              id: 69491
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AvgFillWeight"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"AVG_FILL_WEIGHT_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"MEASUREMENT_ENTRY\ACTUAL1"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 582,1210,130,55
              executeAtClientID: No
            END
            69490_69495:PFCTree.View.Link
              id: 69528
              fromID: 69490
              toID: 69495
              bounds: 132,1250,16,400
            END
            69491_69492:PFCTree.View.Link
              id: 69529
              fromID: 69491
              toID: 69492
              bounds: 640,1265,16,55
            END
            ParallelConvergent69492:PFCTree.View.ParallelConvergent
              id: 69492
              idEnd: 69489
              bounds: 582,1320,130,40
            END
            69492_69493:PFCTree.View.Link
              id: 69530
              fromID: 69492
              toID: 69493
              bounds: 640,1360,16,70
            END
            SerialConvergent69493:PFCTree.View.SerialConvergent
              id: 69493
              idEnd: 69486
              bounds: 437,1430,275,40
            END
            69493_69494:PFCTree.View.Link
              id: 69531
              fromID: 69493
              toID: 69494
              bounds: 567,1470,16,70
            END
            SerialConvergent69494:PFCTree.View.SerialConvergent
              id: 69494
              idEnd: 69468
              bounds: 292,1540,420,40
            END
            69494_69495:PFCTree.View.Link
              id: 69532
              fromID: 69494
              toID: 69495
              bounds: 495,1580,16,70
            END
            ParallelConvergent69495:PFCTree.View.ParallelConvergent
              id: 69495
              idEnd: 69466
              bounds: 2,1650,710,40
            END
            69495_69496:PFCTree.View.Link
              id: 69533
              fromID: 69495
              toID: 69496
              bounds: 350,1690,16,86
            END
            EndNode69496:PFCTree.View.EndNode
              id: 69496
              bounds: 292,1776,130,32
            END
          END
          bounds: 437,1540,130,83
        END
        MATERIAL_CHECKS_OP:PFCTree.View.Operation
          description: MATERIAL CHECKS
          id: 69534
          order: 1
          design:
            BeginNode69535:PFCTree.View.BeginNode
              id: 69535
              bounds: 0,0,200,70
            END
            69535_69536:PFCTree.View.ControlLink
              id: 69538
              fromID: 69535
              toID: 69536
              bounds: 98,70,6,10
            END
            END_BATCH_MATERIAL_CHECKS_BP:PFCTree.View.Phase
              description: Material checks end of batch
              buildingBlockElementID: GENERIC.CHECKLIST
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Material checks have been completed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Perform the following material checks/activities"};Instructions with a maximum of 3 lines;;;false;;
                iCheckList_Option;19;{"Printed item code matches batch header"};Check List lines to follow;;;false;;
                iCheckList_SigReq;19;{NULL};Required signature level for the option;;1 signature,2 signatures;true;;
                iMode;3;"All Check";Selection mode;;={ TRANSLATE("GENERIC.L_CheckListAllCheck"), TRANSLATE("GENERIC.L_CheckListOneCheck") };false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
                iPartial_SignOff;1;NO;Indicates if is not necesary to check all elements at the same time;;;false;;
                iEnforceCheckListSequence;1;NO;Indicates if checking items according to the list sequence is enforced;;;false;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 69536
              order: 0
              bounds: 0,80,200,70
            END
            69536_69537:PFCTree.View.ControlLink
              id: 69539
              fromID: 69536
              toID: 69537
              bounds: 98,150,6,10
            END
            EndNode69537:PFCTree.View.EndNode
              id: 69537
              bounds: 0,160,200,70
            END
          END
          bounds: 582,1540,130,83
        END
        SERIALISATION_OP:PFCTree.View.Operation
          description: SERIALISATION
          id: 69540
          order: 2
          design:
            BeginNode69541:PFCTree.View.BeginNode
              id: 69541
              bounds: 0,0,200,70
            END
            69541_69542:PFCTree.View.Link
              id: 69551
              fromID: 69541
              toID: 69542
              bounds: 98,70,6,10
            END
            SerialDivergent69542:PFCTree.View.SerialDivergent
              id: 69542
              idEnd: 69549
              bounds: 0,80,415,7
            END
            69542_69543:PFCTree.View.Link
              id: 69552
              fromID: 69542
              toID: 69543
              bounds: 98,87,6,73
            END
            CHECK_SERIAL_2_BS:PFCTree.View.Script
              id: 69543
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"vs_Serial"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"Yes"};Global variable value;;;true;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,160,200,7
              executeAtClientID: No
            END
            69543_69544:PFCTree.View.ControlLink
              id: 69553
              fromID: 69543
              toID: 69544
              bounds: 98,167,6,73
            END
            END_BATCH_2D_BP:PFCTree.View.Phase
              description: Serialisation
              buildingBlockElementID: GENERIC.TABULAR_CHECK
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"All activities confirmed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Serialised Carton Count: " + ($$vs_GPTotal - $$vi_BrexitSmp),"Serialised Case Count: " + ($$vi_TotalLblPULUsed - $$vi_BrexitPUL),"Confirm the serialisation checklist activity below"};Instruction List to be implemented by User;;;false;;
                iPassLabel;3;"Yes";Label for Pass Checkbox;;;false;;
                iFailLabel;3;"No";Label for Fail Checkbox;;;false;;
                iChecklist;19;{"Total number of serialised packs is less than or equal to the quantity of good serialised packs produced."};List of Checks to be completed;;;false;;
                iAutoAtypEvent;1;YES;Enable/Disable Auto Event on a failed check;;;false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_2
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 69544
              order: 0
              bounds: 0,240,200,70
            END
            69544_69545:PFCTree.View.Link
              id: 69554
              fromID: 69544
              toID: 69545
              bounds: 98,310,6,10
            END
            SerialDivergent69545:PFCTree.View.SerialDivergent
              id: 69545
              idEnd: 69548
              bounds: 0,320,415,7
            END
            69545_69546:PFCTree.View.Link
              id: 69555
              fromID: 69545
              toID: 69546
              bounds: 98,327,6,73
            END
            69545_69547:PFCTree.View.Link
              id: 69556
              fromID: 69545
              toID: 69547
              bounds: 313,327,6,73
            END
            CHK_IF_BXVAR_BS:PFCTree.View.Script
              id: 69546
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"SerialisedType"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"BXVAR"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,400,200,7
              executeAtClientID: No
            END
            END_COMM_CODE_BP:PFCTree.View.Phase
              description: Commisioned Code Quantity
              buildingBlockElementID: GENERIC.TABULAR_CHECK
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Serialisation reconciliation performed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Serialised Carton Count: " + ($$vs_GPTotal - $$vi_BrexitSmp),"Serialised Case Count: " + ($$vi_TotalLblPULUsed - $$vi_BrexitPUL),"Using the PIMMS report carry out the appropriate serialisation reconciliation."};Instruction List to be implemented by User;;;false;;
                iPassLabel;3;"Yes";Label for Pass Checkbox;;;false;;
                iFailLabel;3;"No";Label for Fail Checkbox;;;false;;
                iChecklist;19;{"Serialisation reconciliation correct and complete"};List of Checks to be completed;;;false;;
                iAutoAtypEvent;1;YES;Enable/Disable Auto Event on a failed check;;;false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_2
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 69547
              order: 1
              bounds: 215,400,200,70
            END
            69546_69548:PFCTree.View.Link
              id: 69557
              fromID: 69546
              toID: 69548
              bounds: 98,407,6,73
            END
            69547_69548:PFCTree.View.Link
              id: 69558
              fromID: 69547
              toID: 69548
              bounds: 313,470,6,10
            END
            SerialConvergent69548:PFCTree.View.SerialConvergent
              id: 69548
              idEnd: 69545
              bounds: 0,480,415,7
            END
            69548_69549:PFCTree.View.Link
              id: 69559
              fromID: 69548
              toID: 69549
              bounds: 205,487,6,73
            END
            SerialConvergent69549:PFCTree.View.SerialConvergent
              id: 69549
              idEnd: 69542
              bounds: 0,560,415,7
            END
            69549_69550:PFCTree.View.Link
              id: 69560
              fromID: 69549
              toID: 69550
              bounds: 98,567,6,73
            END
            EndNode69550:PFCTree.View.EndNode
              id: 69550
              bounds: 0,640,200,70
            END
          END
          bounds: 727,1540,130,83
        END
        69464_69561:PFCTree.View.Link
          id: 69610
          fromID: 69464
          toID: 69561
          bounds: 495,1623,16,27
        END
        69534_69561:PFCTree.View.Link
          id: 69611
          fromID: 69534
          toID: 69561
          bounds: 640,1623,16,27
        END
        69540_69561:PFCTree.View.Link
          id: 69612
          fromID: 69540
          toID: 69561
          bounds: 785,1623,16,27
        END
        ParallelConvergent69561:PFCTree.View.ParallelConvergent
          id: 69561
          idEnd: 69463
          bounds: 437,1650,420,40
        END
        69561_69562:PFCTree.View.Link
          id: 69613
          fromID: 69561
          toID: 69562
          bounds: 640,1690,16,70
        END
        ParallelConvergent69562:PFCTree.View.ParallelConvergent
          id: 69562
          idEnd: 68412
          bounds: 2,1760,1290,40
        END
        69562_69563:PFCTree.View.Link
          id: 69614
          fromID: 69562
          toID: 69563
          bounds: 640,1800,16,86
        END
        EndNode69563:PFCTree.View.EndNode
          id: 69563
          bounds: 582,1886,130,32
        END
      END
      bounds: 147,770,130,83
    END
    68410_58606:PFCTree.View.ControlLink
      id: 69617
      fromID: 68410
      toID: 58606
      bounds: 205,853,16,27
    END
    P_FINALISATION_UP:PFCTree.View.UnitProcedure
      description: SERIALISATION
      id: 58606
      order: 0
      design:
        BeginNode58607:PFCTree.View.BeginNode
          id: 58607
          bounds: 2,16,130,32
        END
        58607_58608:PFCTree.View.ControlLink
          id: 58737
          fromID: 58607
          toID: 58608
          bounds: 60,48,16,62
        END
        FINALISATION_SCRIPTS_OP:PFCTree.View.Operation
          description: Finalisation Scripts
          id: 58608
          order: 0
          design:
            BeginNode58609:PFCTree.View.BeginNode
              id: 58609
              bounds: 289,16,130,32
            END
            58609_58610:PFCTree.View.Link
              id: 58668
              fromID: 58609
              toID: 58610
              bounds: 347,48,16,97
            END
            SerialDivergent58610:PFCTree.View.SerialDivergent
              id: 58610
              idEnd: 58615
              bounds: 217,145,275,40
            END
            58610_58611:PFCTree.View.Link
              id: 58669
              fromID: 58610
              toID: 58611
              bounds: 275,185,16,35
            END
            58610_58612:PFCTree.View.Link
              id: 58670
              fromID: 58610
              toID: 58612
              bounds: 420,185,16,70
            END
            S_CHK_LC_NO_BS:PFCTree.View.Script
              id: 58611
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LineClearance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"NO"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 217,220,130,55
              executeAtClientID: No
            END
            ParallelDivergent58612:PFCTree.View.ParallelDivergent
              id: 58612
              idEnd: 58614
              bounds: 362,255,130,40
            END
            58611_58615:PFCTree.View.Link
              id: 58671
              fromID: 58611
              toID: 58615
              bounds: 275,275,16,275
            END
            58612_58613:PFCTree.View.Link
              id: 58672
              fromID: 58612
              toID: 58613
              bounds: 420,295,16,35
            END
            P_CHK_LC_NO_BS:PFCTree.View.Script
              id: 58613
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LineClearance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"NO"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 362,330,130,55
              executeAtClientID: No
            END
            58613_58614:PFCTree.View.Link
              id: 58673
              fromID: 58613
              toID: 58614
              bounds: 420,385,16,55
            END
            ParallelConvergent58614:PFCTree.View.ParallelConvergent
              id: 58614
              idEnd: 58612
              bounds: 362,440,130,40
            END
            58614_58615:PFCTree.View.Link
              id: 58674
              fromID: 58614
              toID: 58615
              bounds: 420,480,16,70
            END
            SerialConvergent58615:PFCTree.View.SerialConvergent
              id: 58615
              idEnd: 58610
              bounds: 217,550,275,40
            END
            58615_58616:PFCTree.View.Link
              id: 58675
              fromID: 58615
              toID: 58616
              bounds: 347,590,16,105
            END
            SerialDivergent58616:PFCTree.View.SerialDivergent
              id: 58616
              idEnd: 58621
              bounds: 217,695,275,40
            END
            58616_58617:PFCTree.View.Link
              id: 58676
              fromID: 58616
              toID: 58617
              bounds: 275,735,16,35
            END
            58616_58618:PFCTree.View.Link
              id: 58677
              fromID: 58616
              toID: 58618
              bounds: 420,735,16,70
            END
            GET_PEL_CYCLE_BS:PFCTree.View.Script
              id: 58617
              buildingBlockElementID: GENERIC.SET_GLOBAL_VARIABLE_FROM_UT
              arguments:
                iParameter_Name;19;NULL;Names for the local variables that will be used by the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>LocalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iParameter_Value;18;NULL;Numeric values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueStr;19;NULL;String values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueBool;17;NULL;Boolean values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueDate;20;NULL;Date values for the local variables that will be used by the query.;;;true;;
                iParameter_GlobalVariable;19;NULL;Global variables for the local variables that will be used by the query.;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iVariable_Source;19;{"Get Eq Cycle for Process Cell"};List of queries to be executed defined in QueryList configuration key.;;=TRANSLATE("GENERIC.L_"+PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>QueryList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iVariable_Query;19;{NULL};List of queries to be executed defined manually.;;;true;;
                iVariable_QueryResultType;19;{NULL};Type list of global variables to be set with the result of the query.;;={ TRANSLATE("GENERIC.L_Scalar"), TRANSLATE("GENERIC.L_Array") };true;;
                iVariable_Name;19;{"$$EQCycle"};List of global variables to be set with the result of the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>GlobalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iExecuteDefaultQueries;1;YES;Specify if execute or not default queries defined in DataSource configuration key.;;;false;;
              end
              type: 0
              order: 0
              bounds: 217,770,130,55
              executeAtClientID: No
            END
            ParallelDivergent58618:PFCTree.View.ParallelDivergent
              id: 58618
              idEnd: 58620
              bounds: 362,805,130,40
            END
            58617_58621:PFCTree.View.Link
              id: 58678
              fromID: 58617
              toID: 58621
              bounds: 275,825,16,275
            END
            58618_58619:PFCTree.View.Link
              id: 58679
              fromID: 58618
              toID: 58619
              bounds: 420,845,16,35
            END
            GET_PEL_CYCLE_BS_1:PFCTree.View.Script
              id: 58619
              buildingBlockElementID: GENERIC.SET_GLOBAL_VARIABLE_FROM_UT
              arguments:
                iParameter_Name;19;NULL;Names for the local variables that will be used by the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>LocalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iParameter_Value;18;NULL;Numeric values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueStr;19;NULL;String values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueBool;17;NULL;Boolean values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueDate;20;NULL;Date values for the local variables that will be used by the query.;;;true;;
                iParameter_GlobalVariable;19;NULL;Global variables for the local variables that will be used by the query.;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iVariable_Source;19;{"Get Eq Cycle for Process Cell"};List of queries to be executed defined in QueryList configuration key.;;=TRANSLATE("GENERIC.L_"+PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>QueryList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iVariable_Query;19;{NULL};List of queries to be executed defined manually.;;;true;;
                iVariable_QueryResultType;19;{NULL};Type list of global variables to be set with the result of the query.;;={ TRANSLATE("GENERIC.L_Scalar"), TRANSLATE("GENERIC.L_Array") };true;;
                iVariable_Name;19;{"$$EQCycle"};List of global variables to be set with the result of the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>GlobalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iExecuteDefaultQueries;1;YES;Specify if execute or not default queries defined in DataSource configuration key.;;;false;;
              end
              type: 0
              order: 0
              bounds: 362,880,130,55
              executeAtClientID: No
            END
            58619_58620:PFCTree.View.Link
              id: 58680
              fromID: 58619
              toID: 58620
              bounds: 420,935,16,55
            END
            ParallelConvergent58620:PFCTree.View.ParallelConvergent
              id: 58620
              idEnd: 58618
              bounds: 362,990,130,40
            END
            58620_58621:PFCTree.View.Link
              id: 58681
              fromID: 58620
              toID: 58621
              bounds: 420,1030,16,70
            END
            SerialConvergent58621:PFCTree.View.SerialConvergent
              id: 58621
              idEnd: 58616
              bounds: 217,1100,275,40
            END
            58621_58622:PFCTree.View.Link
              id: 58682
              fromID: 58621
              toID: 58622
              bounds: 347,1140,16,105
            END
            SerialDivergent58622:PFCTree.View.SerialDivergent
              id: 58622
              idEnd: 58627
              bounds: 217,1245,275,40
            END
            58622_58623:PFCTree.View.Link
              id: 67546
              fromID: 58622
              toID: 58623
              bounds: 275,1285,16,35
            END
            58622_58624:PFCTree.View.Link
              id: 58684
              fromID: 58622
              toID: 58624
              bounds: 420,1285,16,70
            END
            S_CYCLE_PEL_OPEN_BS:PFCTree.View.Script
              id: 58623
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.CREATE_CLOSE_EVENT
              arguments:
                iMode;3;"Open";Script mode: Open, close or sign-off event;;Open,Close,Sign-off;false;;
                iEquipment_Type;19;NULL;Equipment types;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));true;;
                iEquipment_AllocationPhase;19;NULL;EquipmentsAllocation Phases;;;true;;
                iEquipment_Id;19;;Equipment IDs to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iDescription;3;"PEL Cycle";Description of event. Required for open mode. Should it blank in close mode;;;true;;
                iComment;19;;Comments for the event. Should it blank in open mode. Optional for close mode.;;;true;;
                iSubType_Monitoring;3;;Subtype for Monitoring event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMonitoring" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_AdditionalProdActivities;3;;Subtype for AdditionalProdActivities event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventAdditionalProdActivities" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineClearance;3;"New PEL Cycle";Subtype for LineClearance event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineClearance" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Engineering;3;NULL;Subtype for Engineering event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEngineering" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Cleaning;3;;Subtype for Cleaning event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventCleaning" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_NonCommProd;3;;Subtype for NonCommProd event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventNonCommProd" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Training;3;;Subtype for Training event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventTraining" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Equipment;3;;Subtype for Equipment event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEquipment" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Movement;3;;Subtype for Movement event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMovement" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Status;3;;Subtype for Status event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventStatus" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Production;3;NULL;Subtype for Production event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventProduction" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineChange;3;;Subtype for LineChange event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineChange" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Intervention;3;;Subtype for Intervention event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventIntervention" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iReset_LCType;1;NO;When value is YES, line clearance global variables are set to NULL;;;false;;
                iMerpsRef;3;;Merps ref field;;;true;;
                iChangeControlRef;3;;Change control ref field;;;true;;
                iUserId;3;;If it is defined uses this user for creating/closing the event;;;true;;
                iOpenEvent_RPLName;3;;RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iOpenEvent_Script;3;;Only used at Close mode. If it is defined, then it closes the event opened by the script indicated in this argument.;;;true;;
                iCreateEventOnlyInProcessCell;1;NO;Only used at Open mode and if event is created for the entire process cell. If it is YES, event isn't created in the Mobile Equipment log books;;;false;;
                iApprovalReq;1;;Only used at Close mode. When value is not NULL (YES or NO), then it overrides the approval configuration for that event type;;;true;;
              end
              type: 0
              order: 0
              bounds: 217,1320,130,55
              executeAtClientID: No
            END
            ParallelDivergent58624:PFCTree.View.ParallelDivergent
              id: 58624
              idEnd: 58626
              bounds: 362,1355,130,40
            END
            58623_58627:PFCTree.View.Link
              id: 58685
              fromID: 58623
              toID: 58627
              bounds: 275,1375,16,275
            END
            58624_58625:PFCTree.View.Link
              id: 58686
              fromID: 58624
              toID: 58625
              bounds: 420,1395,16,35
            END
            P_CYCLE_PEL_OPEN_BS:PFCTree.View.Script
              id: 58625
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.CREATE_CLOSE_EVENT
              arguments:
                iMode;3;"Open";Script mode: Open, close or sign-off event;;Open,Close,Sign-off;false;;
                iEquipment_Type;19;NULL;Equipment types;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));true;;
                iEquipment_AllocationPhase;19;NULL;EquipmentsAllocation Phases;;;true;;
                iEquipment_Id;19;;Equipment IDs to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iDescription;3;"PEL Cycle";Description of event. Required for open mode. Should it blank in close mode;;;true;;
                iComment;19;;Comments for the event. Should it blank in open mode. Optional for close mode.;;;true;;
                iSubType_Monitoring;3;;Subtype for Monitoring event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMonitoring" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_AdditionalProdActivities;3;;Subtype for AdditionalProdActivities event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventAdditionalProdActivities" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineClearance;3;"New PEL Cycle";Subtype for LineClearance event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineClearance" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Engineering;3;NULL;Subtype for Engineering event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEngineering" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Cleaning;3;;Subtype for Cleaning event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventCleaning" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_NonCommProd;3;;Subtype for NonCommProd event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventNonCommProd" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Training;3;;Subtype for Training event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventTraining" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Equipment;3;;Subtype for Equipment event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEquipment" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Movement;3;;Subtype for Movement event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMovement" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Status;3;;Subtype for Status event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventStatus" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Production;3;NULL;Subtype for Production event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventProduction" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineChange;3;;Subtype for LineChange event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineChange" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Intervention;3;;Subtype for Intervention event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventIntervention" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iReset_LCType;1;NO;When value is YES, line clearance global variables are set to NULL;;;false;;
                iMerpsRef;3;;Merps ref field;;;true;;
                iChangeControlRef;3;;Change control ref field;;;true;;
                iUserId;3;;If it is defined uses this user for creating/closing the event;;;true;;
                iOpenEvent_RPLName;3;;RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iOpenEvent_Script;3;;Only used at Close mode. If it is defined, then it closes the event opened by the script indicated in this argument.;;;true;;
                iCreateEventOnlyInProcessCell;1;NO;Only used at Open mode and if event is created for the entire process cell. If it is YES, event isn't created in the Mobile Equipment log books;;;false;;
                iApprovalReq;1;;Only used at Close mode. When value is not NULL (YES or NO), then it overrides the approval configuration for that event type;;;true;;
              end
              type: 0
              order: 0
              bounds: 362,1430,130,55
              executeAtClientID: No
            END
            58625_58626:PFCTree.View.Link
              id: 58687
              fromID: 58625
              toID: 58626
              bounds: 420,1485,16,55
            END
            ParallelConvergent58626:PFCTree.View.ParallelConvergent
              id: 58626
              idEnd: 58624
              bounds: 362,1540,130,40
            END
            58626_58627:PFCTree.View.Link
              id: 58688
              fromID: 58626
              toID: 58627
              bounds: 420,1580,16,70
            END
            SerialConvergent58627:PFCTree.View.SerialConvergent
              id: 58627
              idEnd: 58622
              bounds: 217,1650,275,40
            END
            58627_58628:PFCTree.View.Link
              id: 58689
              fromID: 58627
              toID: 58628
              bounds: 347,1690,16,105
            END
            SerialDivergent58628:PFCTree.View.SerialDivergent
              id: 58628
              idEnd: 58633
              bounds: 217,1795,275,40
            END
            58628_58629:PFCTree.View.Link
              id: 58690
              fromID: 58628
              toID: 58629
              bounds: 275,1835,16,35
            END
            58628_58630:PFCTree.View.Link
              id: 58691
              fromID: 58628
              toID: 58630
              bounds: 420,1835,16,70
            END
            S_CLOSE_PEL_CYCLE_BS:PFCTree.View.Script
              id: 58629
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.CREATE_CLOSE_EVENT
              arguments:
                iMode;3;"Close";Script mode: Open, close or sign-off event;;Open,Close,Sign-off;false;;
                iEquipment_Type;19;NULL;Equipment types;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));true;;
                iEquipment_AllocationPhase;19;;EquipmentsAllocation Phases;;;true;;
                iEquipment_Id;19;;Equipment IDs to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iDescription;3;;Description of event. Required for open mode. Should it blank in close mode;;;true;;
                iComment;19;;Comments for the event. Should it blank in open mode. Optional for close mode.;;;true;;
                iSubType_Monitoring;3;;Subtype for Monitoring event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMonitoring" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_AdditionalProdActivities;3;;Subtype for AdditionalProdActivities event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventAdditionalProdActivities" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineClearance;3;"New PEL Cycle";Subtype for LineClearance event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineClearance" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Engineering;3;;Subtype for Engineering event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEngineering" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Cleaning;3;;Subtype for Cleaning event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventCleaning" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_NonCommProd;3;;Subtype for NonCommProd event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventNonCommProd" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Training;3;;Subtype for Training event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventTraining" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Equipment;3;;Subtype for Equipment event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEquipment" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Movement;3;;Subtype for Movement event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMovement" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Status;3;;Subtype for Status event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventStatus" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Production;3;NULL;Subtype for Production event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventProduction" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineChange;3;;Subtype for LineChange event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineChange" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Intervention;3;;Subtype for Intervention event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventIntervention" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iReset_LCType;1;YES;When value is YES, line clearance global variables are set to NULL;;;false;;
                iMerpsRef;3;;Merps ref field;;;true;;
                iChangeControlRef;3;;Change control ref field;;;true;;
                iUserId;3;;If it is defined uses this user for creating/closing the event;;;true;;
                iOpenEvent_RPLName;3;;RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iOpenEvent_Script;3;;Only used at Close mode. If it is defined, then it closes the event opened by the script indicated in this argument.;;;true;;
                iCreateEventOnlyInProcessCell;1;NO;Only used at Open mode and if event is created for the entire process cell. If it is YES, event isn't created in the Mobile Equipment log books;;;false;;
                iApprovalReq;1;;Only used at Close mode. When value is not NULL (YES or NO), then it overrides the approval configuration for that event type;;;true;;
              end
              type: 0
              order: 0
              bounds: 217,1870,130,55
              executeAtClientID: No
            END
            ParallelDivergent58630:PFCTree.View.ParallelDivergent
              id: 58630
              idEnd: 58632
              bounds: 362,1905,130,40
            END
            58629_58633:PFCTree.View.Link
              id: 58692
              fromID: 58629
              toID: 58633
              bounds: 275,1925,16,275
            END
            58630_58631:PFCTree.View.Link
              id: 58693
              fromID: 58630
              toID: 58631
              bounds: 420,1945,16,35
            END
            P_CLOSE_PEL_CYCLE_BS:PFCTree.View.Script
              id: 58631
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.CREATE_CLOSE_EVENT
              arguments:
                iMode;3;"Close";Script mode: Open, close or sign-off event;;Open,Close,Sign-off;false;;
                iEquipment_Type;19;NULL;Equipment types;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));true;;
                iEquipment_AllocationPhase;19;;EquipmentsAllocation Phases;;;true;;
                iEquipment_Id;19;;Equipment IDs to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iDescription;3;;Description of event. Required for open mode. Should it blank in close mode;;;true;;
                iComment;19;;Comments for the event. Should it blank in open mode. Optional for close mode.;;;true;;
                iSubType_Monitoring;3;;Subtype for Monitoring event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMonitoring" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_AdditionalProdActivities;3;;Subtype for AdditionalProdActivities event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventAdditionalProdActivities" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineClearance;3;"New PEL Cycle";Subtype for LineClearance event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineClearance" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Engineering;3;;Subtype for Engineering event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEngineering" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Cleaning;3;;Subtype for Cleaning event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventCleaning" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_NonCommProd;3;;Subtype for NonCommProd event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventNonCommProd" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Training;3;;Subtype for Training event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventTraining" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Equipment;3;;Subtype for Equipment event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventEquipment" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Movement;3;;Subtype for Movement event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventMovement" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Status;3;;Subtype for Status event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventStatus" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Production;3;NULL;Subtype for Production event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventProduction" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_LineChange;3;;Subtype for LineChange event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventLineChange" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSubType_Intervention;3;;Subtype for Intervention event type. Only one subtype should be informed at same time;;=PARSE_LIST ( TRANSLATE( "LOG_BOOK.L_SubEventIntervention" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iReset_LCType;1;YES;When value is YES, line clearance global variables are set to NULL;;;false;;
                iMerpsRef;3;;Merps ref field;;;true;;
                iChangeControlRef;3;;Change control ref field;;;true;;
                iUserId;3;;If it is defined uses this user for creating/closing the event;;;true;;
                iOpenEvent_RPLName;3;;RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iOpenEvent_Script;3;;Only used at Close mode. If it is defined, then it closes the event opened by the script indicated in this argument.;;;true;;
                iCreateEventOnlyInProcessCell;1;NO;Only used at Open mode and if event is created for the entire process cell. If it is YES, event isn't created in the Mobile Equipment log books;;;false;;
                iApprovalReq;1;;Only used at Close mode. When value is not NULL (YES or NO), then it overrides the approval configuration for that event type;;;true;;
              end
              type: 0
              order: 0
              bounds: 362,1980,130,55
              executeAtClientID: No
            END
            58631_58632:PFCTree.View.Link
              id: 58694
              fromID: 58631
              toID: 58632
              bounds: 420,2035,16,55
            END
            ParallelConvergent58632:PFCTree.View.ParallelConvergent
              id: 58632
              idEnd: 58630
              bounds: 362,2090,130,40
            END
            58632_58633:PFCTree.View.Link
              id: 58695
              fromID: 58632
              toID: 58633
              bounds: 420,2130,16,70
            END
            SerialConvergent58633:PFCTree.View.SerialConvergent
              id: 58633
              idEnd: 58628
              bounds: 217,2200,275,40
            END
            58633_58634:PFCTree.View.Link
              id: 58696
              fromID: 58633
              toID: 58634
              bounds: 347,2240,16,105
            END
            SerialDivergent58634:PFCTree.View.SerialDivergent
              id: 58634
              idEnd: 58639
              bounds: 217,2345,275,40
            END
            58634_58635:PFCTree.View.Link
              id: 58697
              fromID: 58634
              toID: 58635
              bounds: 275,2385,16,35
            END
            58634_58636:PFCTree.View.Link
              id: 58698
              fromID: 58634
              toID: 58636
              bounds: 420,2385,16,70
            END
            SET_EOB_LC_VAR_BS:PFCTree.View.Script
              id: 58635
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"varLCType"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"EOB"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 217,2420,130,55
              executeAtClientID: No
            END
            ParallelDivergent58636:PFCTree.View.ParallelDivergent
              id: 58636
              idEnd: 58638
              bounds: 362,2455,130,40
            END
            58635_58639:PFCTree.View.Link
              id: 58699
              fromID: 58635
              toID: 58639
              bounds: 275,2475,16,275
            END
            58636_58637:PFCTree.View.Link
              id: 58700
              fromID: 58636
              toID: 58637
              bounds: 420,2495,16,35
            END
            SET_EOB_LC_VAR_BS_1:PFCTree.View.Script
              id: 58637
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"varLCType"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"EOB"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 362,2530,130,55
              executeAtClientID: No
            END
            58637_58638:PFCTree.View.Link
              id: 58701
              fromID: 58637
              toID: 58638
              bounds: 420,2585,16,55
            END
            ParallelConvergent58638:PFCTree.View.ParallelConvergent
              id: 58638
              idEnd: 58636
              bounds: 362,2640,130,40
            END
            58638_58639:PFCTree.View.Link
              id: 58702
              fromID: 58638
              toID: 58639
              bounds: 420,2680,16,70
            END
            SerialConvergent58639:PFCTree.View.SerialConvergent
              id: 58639
              idEnd: 58634
              bounds: 217,2750,275,40
            END
            58639_58640:PFCTree.View.Link
              id: 58703
              fromID: 58639
              toID: 58640
              bounds: 347,2790,16,105
            END
            ParallelDivergent58640:PFCTree.View.ParallelDivergent
              id: 58640
              idEnd: 58666
              bounds: 72,2895,565,40
            END
            58640_58641:PFCTree.View.Link
              id: 58704
              fromID: 58640
              toID: 58641
              bounds: 202,2935,16,70
            END
            58640_58642:PFCTree.View.Link
              id: 58705
              fromID: 58640
              toID: 58642
              bounds: 492,2935,16,70
            END
            SerialDivergent58641:PFCTree.View.SerialDivergent
              id: 58641
              idEnd: 58651
              bounds: 72,3005,275,40
            END
            SerialDivergent58642:PFCTree.View.SerialDivergent
              id: 58642
              idEnd: 58652
              bounds: 362,3005,275,40
            END
            58641_58643:PFCTree.View.Link
              id: 58706
              fromID: 58641
              toID: 58643
              bounds: 130,3045,16,35
            END
            58641_58644:PFCTree.View.Link
              id: 58707
              fromID: 58641
              toID: 58644
              bounds: 275,3045,16,70
            END
            58642_58645:PFCTree.View.Link
              id: 58708
              fromID: 58642
              toID: 58645
              bounds: 420,3045,16,35
            END
            58642_58646:PFCTree.View.Link
              id: 58709
              fromID: 58642
              toID: 58646
              bounds: 565,3045,16,70
            END
            S_LC_THREE_BS:PFCTree.View.Script
              id: 58643
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LineClearance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Three"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 72,3080,130,55
              executeAtClientID: No
            END
            S_CHK_REPRINT_COMP_BS:PFCTree.View.Script
              id: 58645
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Reprints"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 362,3080,130,55
              executeAtClientID: No
            END
            ParallelDivergent58644:PFCTree.View.ParallelDivergent
              id: 58644
              idEnd: 58649
              bounds: 217,3115,130,40
            END
            ParallelDivergent58646:PFCTree.View.ParallelDivergent
              id: 58646
              idEnd: 58650
              bounds: 507,3115,130,40
            END
            58643_58651:PFCTree.View.Link
              id: 58710
              fromID: 58643
              toID: 58651
              bounds: 130,3135,16,275
            END
            58645_58652:PFCTree.View.Link
              id: 58712
              fromID: 58645
              toID: 58652
              bounds: 420,3135,16,275
            END
            58644_58647:PFCTree.View.Link
              id: 58711
              fromID: 58644
              toID: 58647
              bounds: 275,3155,16,35
            END
            58646_58648:PFCTree.View.Link
              id: 58713
              fromID: 58646
              toID: 58648
              bounds: 565,3155,16,35
            END
            P_LC_THREE_BS:PFCTree.View.Script
              id: 58647
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"LineClearance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Three"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 217,3190,130,55
              executeAtClientID: No
            END
            P_CHK_REPRINT_COMP_BS:PFCTree.View.Script
              id: 58648
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Reprints"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 507,3190,130,55
              executeAtClientID: No
            END
            58647_58649:PFCTree.View.Link
              id: 58714
              fromID: 58647
              toID: 58649
              bounds: 275,3245,16,55
            END
            58648_58650:PFCTree.View.Link
              id: 58715
              fromID: 58648
              toID: 58650
              bounds: 565,3245,16,55
            END
            ParallelConvergent58649:PFCTree.View.ParallelConvergent
              id: 58649
              idEnd: 58644
              bounds: 217,3300,130,40
            END
            ParallelConvergent58650:PFCTree.View.ParallelConvergent
              id: 58650
              idEnd: 58646
              bounds: 507,3300,130,40
            END
            58649_58651:PFCTree.View.Link
              id: 58716
              fromID: 58649
              toID: 58651
              bounds: 275,3340,16,70
            END
            58650_58652:PFCTree.View.Link
              id: 58717
              fromID: 58650
              toID: 58652
              bounds: 565,3340,16,70
            END
            SerialConvergent58651:PFCTree.View.SerialConvergent
              id: 58651
              idEnd: 58641
              bounds: 72,3410,275,40
            END
            SerialConvergent58652:PFCTree.View.SerialConvergent
              id: 58652
              idEnd: 58642
              bounds: 362,3410,275,40
            END
            58651_58653:PFCTree.View.Link
              id: 58718
              fromID: 58651
              toID: 58653
              bounds: 202,3450,16,105
            END
            58652_58654:PFCTree.View.Link
              id: 58719
              fromID: 58652
              toID: 58654
              bounds: 492,3450,16,105
            END
            SerialDivergent58653:PFCTree.View.SerialDivergent
              id: 58653
              idEnd: 58663
              bounds: 72,3555,275,40
            END
            SerialDivergent58654:PFCTree.View.SerialDivergent
              id: 58654
              idEnd: 58664
              bounds: 362,3555,275,40
            END
            58653_58655:PFCTree.View.Link
              id: 58720
              fromID: 58653
              toID: 58655
              bounds: 130,3595,16,35
            END
            58653_58656:PFCTree.View.Link
              id: 58721
              fromID: 58653
              toID: 58656
              bounds: 275,3595,16,70
            END
            58654_58657:PFCTree.View.Link
              id: 58722
              fromID: 58654
              toID: 58657
              bounds: 420,3595,16,35
            END
            58654_58658:PFCTree.View.Link
              id: 58723
              fromID: 58654
              toID: 58658
              bounds: 565,3595,16,70
            END
            S_DISABLE_LC_PHASE_3_BS:PFCTree.View.Script
              id: 58655
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"DISABLE_LC_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 72,3630,130,55
              executeAtClientID: No
            END
            S_OFFLINE_COMPLETE_BS:PFCTree.View.Script
              id: 58657
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"RunPhase"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 362,3630,130,55
              executeAtClientID: No
            END
            ParallelDivergent58656:PFCTree.View.ParallelDivergent
              id: 58656
              idEnd: 58661
              bounds: 217,3665,130,40
            END
            ParallelDivergent58658:PFCTree.View.ParallelDivergent
              id: 58658
              idEnd: 58662
              bounds: 507,3665,130,40
            END
            58655_58663:PFCTree.View.Link
              id: 58724
              fromID: 58655
              toID: 58663
              bounds: 130,3685,16,275
            END
            58657_58664:PFCTree.View.Link
              id: 58726
              fromID: 58657
              toID: 58664
              bounds: 420,3685,16,275
            END
            58656_58659:PFCTree.View.Link
              id: 58725
              fromID: 58656
              toID: 58659
              bounds: 275,3705,16,35
            END
            58658_58660:PFCTree.View.Link
              id: 58727
              fromID: 58658
              toID: 58660
              bounds: 565,3705,16,35
            END
            P_DISABLE_LC_PHASE_3_BS:PFCTree.View.Script
              id: 58659
              buildingBlockElementID: ORDER_MANAGEMENT.DISABLE
              arguments:
                iObject_Name;19;{"DISABLE_LC_BP"};Object name;;;false;;
                iObject_Reactivate;17;{NO};Indicates if object is reactivated or not;;;false;;
              end
              type: 0
              order: 0
              bounds: 217,3740,130,55
              executeAtClientID: No
            END
            P_OFFLINE_COMPLETE_BS:PFCTree.View.Script
              id: 58660
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"RunPhase"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 507,3740,130,55
              executeAtClientID: No
            END
            58659_58661:PFCTree.View.Link
              id: 58728
              fromID: 58659
              toID: 58661
              bounds: 275,3795,16,55
            END
            58660_58662:PFCTree.View.Link
              id: 58729
              fromID: 58660
              toID: 58662
              bounds: 565,3795,16,55
            END
            ParallelConvergent58661:PFCTree.View.ParallelConvergent
              id: 58661
              idEnd: 58656
              bounds: 217,3850,130,40
            END
            ParallelConvergent58662:PFCTree.View.ParallelConvergent
              id: 58662
              idEnd: 58658
              bounds: 507,3850,130,40
            END
            58661_58663:PFCTree.View.Link
              id: 58730
              fromID: 58661
              toID: 58663
              bounds: 275,3890,16,70
            END
            58662_58664:PFCTree.View.Link
              id: 58731
              fromID: 58662
              toID: 58664
              bounds: 565,3890,16,70
            END
            SerialConvergent58663:PFCTree.View.SerialConvergent
              id: 58663
              idEnd: 58653
              bounds: 72,3960,275,40
            END
            SerialConvergent58664:PFCTree.View.SerialConvergent
              id: 58664
              idEnd: 58654
              bounds: 362,3960,275,40
            END
            58663_58665:PFCTree.View.Link
              id: 58732
              fromID: 58663
              toID: 58665
              bounds: 202,4000,16,70
            END
            58664_58666:PFCTree.View.Link
              id: 58733
              fromID: 58664
              toID: 58666
              bounds: 492,4000,16,180
            END
            REACTIVATE_THREE_LC_BP:PFCTree.View.Phase
              description: DISABLE BP
              buildingBlockElementID: GENERIC.INSTRUCTION
              arguments:
                iSignature_Required;3;"Ok button";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;NULL;RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;NULL;Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_Print;1;NO;Print button visible;;;false;;
                iButton_Report;19;;Reports available for report button. If Null, report button is not visible;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iEquipment_Type;3;;Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;3;;Equipment Allocation Phase;;;true;;
                iStepAutoComplete;18;;PLC step that signals the completion of the automatic process;;;true;;
                iInstruction;19;{"THIS WILL BE DISABLED BY WORKFLOW"};Default Instructions;;;false;;
                iStep_Instruction;19;;Instructions for step;;;true;;
                iStep_Start;18;;Step range start;;;true;;
                iStep_End;18;;Step range end;;;true;;
                iForceViewPEL;1;NO;If Yes, PEL report must have been called to allow phase validation;;;false;;
                iEnforcedReportName;19;;The Report selected must be viewed by the user before sign off the Phase;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iLabelTemplate;3;;Label template to be printed;;=TRANSLATE ( "OVERALL.L_" + PARSE_LIST ( GET_CONFIG ( "<OVERALL.CONFIG_KEYS>LabelTemplateSpecialList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Disable
              autoStart: No
              usePhaseRet: Yes
              Converge: No
              id: 58665
              order: 0
              bounds: 144,4070,130,83
            END
            58665_58666:PFCTree.View.Link
              id: 58734
              fromID: 58665
              toID: 58666
              bounds: 202,4153,16,27
            END
            ParallelConvergent58666:PFCTree.View.ParallelConvergent
              id: 58666
              idEnd: 58640
              bounds: 72,4180,565,40
            END
            58666_58667:PFCTree.View.Link
              id: 58735
              fromID: 58666
              toID: 58667
              bounds: 347,4220,16,86
            END
            EndNode58667:PFCTree.View.EndNode
              id: 58667
              bounds: 289,4306,130,32
            END
          END
          bounds: 2,110,130,83
        END
        58608_58736:PFCTree.View.ControlLink
          id: 58738
          fromID: 58608
          toID: 58736
          bounds: 60,193,16,43
        END
        EndNode58736:PFCTree.View.EndNode
          id: 58736
          bounds: 2,236,130,32
        END
      END
      bounds: 147,880,130,83
    END
    58606_3369:PFCTree.View.Link
      id: 58740
      fromID: 58606
      toID: 3369
      bounds: 205,963,16,27
    END
    EndParallelDivergent3368:PFCTree.View.ParallelConvergent
      id: 3369
      idEnd: 3368
      bounds: 147,990,855,40
    END
    3369_30943:PFCTree.View.Link
      id: 31155
      fromID: 3369
      toID: 30943
      bounds: 567,1030,16,70
    END
    P_RECONCILIATION_UP:PFCTree.View.UnitProcedure
      description: RECONCILIATION
      id: 30943
      order: 0
      design:
        BeginNode30944:PFCTree.View.BeginNode
          id: 30944
          bounds: 0,0,200,70
        END
        30944_30945:PFCTree.View.ControlLink
          id: 31147
          fromID: 30944
          toID: 30945
          bounds: 98,70,6,10
        END
        SIGNAL_RETRIEVAL_OP:PFCTree.View.Operation
          description: SIGNAL_RETRIEVAL_OP
          id: 30945
          order: 0
          design:
            BeginNode30946:PFCTree.View.BeginNode
              id: 30946
              bounds: 0,0,200,70
            END
            30946_50933:PFCTree.View.Link
              id: 50938
              fromID: 30946
              toID: 50933
              bounds: 98,70,6,10
            END
            SerialDivergent50933:PFCTree.View.SerialDivergent
              id: 50933
              idEnd: 50934
              bounds: 0,80,415,7
            END
            50933_50939:PFCTree.View.Link
              id: 50940
              fromID: 50933
              toID: 50939
              bounds: 98,87,6,73
            END
            50933_50942:PFCTree.View.Link
              id: 50945
              fromID: 50933
              toID: 50942
              bounds: 313,87,6,73
            END
            S_WAIT_FILL_WASTE_BS:PFCTree.View.Script
              id: 50939
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"Any";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"FILLING","FILLING"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL,NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed","ProdReview"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,160,200,7
              executeAtClientID: No
            END
            ParallelDivergent50942:PFCTree.View.ParallelDivergent
              id: 50942
              idEnd: 50943
              bounds: 215,160,200,7
            END
            50939_50934:PFCTree.View.Link
              id: 50941
              fromID: 50939
              toID: 50934
              bounds: 98,167,6,233
            END
            50942_50947:PFCTree.View.Link
              id: 50948
              fromID: 50942
              toID: 50947
              bounds: 313,167,6,73
            END
            P_WAIT_FILL_WASTE_BS:PFCTree.View.Script
              id: 50947
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"Any";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"FILLING","FILLING"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL,NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed","ProdReview"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 215,240,200,7
              executeAtClientID: No
            END
            50947_50943:PFCTree.View.Link
              id: 50949
              fromID: 50947
              toID: 50943
              bounds: 313,247,6,73
            END
            EndParallelDivergent50942:PFCTree.View.ParallelConvergent
              id: 50943
              idEnd: 50942
              bounds: 215,320,200,7
            END
            50943_50934:PFCTree.View.Link
              id: 50946
              fromID: 50943
              toID: 50934
              bounds: 313,327,6,73
            END
            EndSerialDivergent50933:PFCTree.View.SerialConvergent
              id: 50934
              idEnd: 50933
              bounds: 0,400,415,7
            END
            50934_67547:PFCTree.View.Link
              id: 67550
              fromID: 50934
              toID: 67547
              bounds: 205,407,6,73
            END
            SerialDivergent67547:PFCTree.View.SerialDivergent
              id: 67547
              idEnd: 67548
              bounds: 0,480,415,7
            END
            67547_67553:PFCTree.View.Link
              id: 67554
              fromID: 67547
              toID: 67553
              bounds: 98,487,6,73
            END
            67547_67556:PFCTree.View.Link
              id: 67559
              fromID: 67547
              toID: 67556
              bounds: 313,487,6,73
            END
            WAIT_REPRINT_END_BS:PFCTree.View.Script
              id: 67553
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"OFFLINE"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"ProdReview"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,560,200,7
              executeAtClientID: No
            END
            ParallelDivergent67556:PFCTree.View.ParallelDivergent
              id: 67556
              idEnd: 67557
              bounds: 215,560,200,7
            END
            67553_67548:PFCTree.View.Link
              id: 67555
              fromID: 67553
              toID: 67548
              bounds: 98,567,6,233
            END
            67556_67561:PFCTree.View.Link
              id: 67562
              fromID: 67556
              toID: 67561
              bounds: 313,567,6,73
            END
            WAIT_REPRINT_END_BS_1:PFCTree.View.Script
              id: 67561
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"OFFLINE"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"ProdReview"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 215,640,200,7
              executeAtClientID: No
            END
            67561_67557:PFCTree.View.Link
              id: 67563
              fromID: 67561
              toID: 67557
              bounds: 313,647,6,73
            END
            EndParallelDivergent67556:PFCTree.View.ParallelConvergent
              id: 67557
              idEnd: 67556
              bounds: 215,720,200,7
            END
            67557_67548:PFCTree.View.Link
              id: 67560
              fromID: 67557
              toID: 67548
              bounds: 313,727,6,73
            END
            EndSerialDivergent67547:PFCTree.View.SerialConvergent
              id: 67548
              idEnd: 67547
              bounds: 0,800,415,7
            END
            67548_43457:PFCTree.View.Link
              id: 67552
              fromID: 67548
              toID: 43457
              bounds: 205,807,6,73
            END
            SerialDivergent43457:PFCTree.View.SerialDivergent
              id: 43457
              idEnd: 43458
              bounds: 0,880,415,7
            END
            43457_43462:PFCTree.View.Link
              id: 43463
              fromID: 43457
              toID: 43462
              bounds: 98,887,6,73
            END
            CHK_PROCESSCELL_3_BS:PFCTree.View.Script
              id: 43462
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;"OR";Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"ProcessCell","ProcessCell"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"DBUCP71","DBUCP79"};Global variable value;;;true;;
                iCheck_Condition;19;{"=","="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,960,200,7
              executeAtClientID: No
            END
            43462_43465:PFCTree.View.Link
              id: 43468
              fromID: 43462
              toID: 43465
              bounds: 98,967,6,73
            END
            SerialDivergent43465:PFCTree.View.SerialDivergent
              id: 43465
              idEnd: 43466
              bounds: 0,1040,415,7
            END
            43465_43478:PFCTree.View.Link
              id: 43479
              fromID: 43465
              toID: 43478
              bounds: 98,1047,6,73
            END
            43465_43470:PFCTree.View.Link
              id: 43473
              fromID: 43465
              toID: 43470
              bounds: 313,1047,6,73
            END
            S_GET_FILL1_WEIGHT_BS:PFCTree.View.Script
              id: 43478
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AvgFillWeight"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{"RPL_DERMS_FILL01_02"};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"AVG_FILL_WEIGHT_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"MEASUREMENT_ENTRY\ACTUAL1"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,1120,200,7
              executeAtClientID: No
            END
            ParallelDivergent43470:PFCTree.View.ParallelDivergent
              id: 43470
              idEnd: 43471
              bounds: 215,1120,200,7
            END
            43478_43466:PFCTree.View.Link
              id: 43480
              fromID: 43478
              toID: 43466
              bounds: 98,1127,6,233
            END
            43470_43481:PFCTree.View.Link
              id: 43482
              fromID: 43470
              toID: 43481
              bounds: 313,1127,6,73
            END
            P_GET_FILL1_WEIGHT_BS:PFCTree.View.Script
              id: 43481
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"AvgFillWeight"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{"RPL_DERMS_FILL01_02"};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"AVG_FILL_WEIGHT_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"MEASUREMENT_ENTRY\ACTUAL1"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,1200,200,7
              executeAtClientID: No
            END
            43481_43471:PFCTree.View.Link
              id: 43483
              fromID: 43481
              toID: 43471
              bounds: 313,1207,6,73
            END
            EndParallelDivergent43470:PFCTree.View.ParallelConvergent
              id: 43471
              idEnd: 43470
              bounds: 215,1280,200,7
            END
            43471_43466:PFCTree.View.Link
              id: 43474
              fromID: 43471
              toID: 43466
              bounds: 313,1287,6,73
            END
            EndSerialDivergent43465:PFCTree.View.SerialConvergent
              id: 43466
              idEnd: 43465
              bounds: 0,1360,415,7
            END
            43466_43458:PFCTree.View.Link
              id: 43469
              fromID: 43466
              toID: 43458
              bounds: 205,1367,6,73
            END
            EndSerialDivergent43457:PFCTree.View.SerialConvergent
              id: 43458
              idEnd: 43457
              bounds: 0,1440,415,7
            END
            43458_30948:PFCTree.View.Link
              id: 43461
              fromID: 43458
              toID: 30948
              bounds: 205,1447,6,73
            END
            ParallelDivergent30948:PFCTree.View.ParallelDivergent
              id: 30948
              idEnd: 30967
              bounds: 0,1520,415,7
            END
            30948_30949:PFCTree.View.Link
              id: 30971
              fromID: 30948
              toID: 30949
              bounds: 205,1527,6,73
            END
            SerialDivergent30949:PFCTree.View.SerialDivergent
              id: 30949
              idEnd: 30954
              bounds: 0,1600,415,7
            END
            30949_30950:PFCTree.View.Link
              id: 30972
              fromID: 30949
              toID: 30950
              bounds: 98,1607,6,73
            END
            30949_30951:PFCTree.View.Link
              id: 30973
              fromID: 30949
              toID: 30951
              bounds: 313,1607,6,73
            END
            S_SET_VARS_FROM_UT_BS:PFCTree.View.Script
              id: 30950
              buildingBlockElementID: GENERIC.SET_GLOBAL_VARIABLE_FROM_UT
              arguments:
                iParameter_Name;19;NULL;Names for the local variables that will be used by the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>LocalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iParameter_Value;18;NULL;Numeric values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueStr;19;NULL;String values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueBool;17;NULL;Boolean values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueDate;20;NULL;Date values for the local variables that will be used by the query.;;;true;;
                iParameter_GlobalVariable;19;NULL;Global variables for the local variables that will be used by the query.;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iVariable_Source;19;{"Packed Total","Waste Total","Returned Total","Sampled Total","Carry Fwd Total","Bulk Total Packing","Bulk Total","Total Printed PUL Labels","Total Scrapped PUL Labels","Total Printed BUL Labels","Total Scrapped BUL Labels"};List of queries to be executed defined in QueryList configuration key.;;=TRANSLATE("GENERIC.L_"+PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>QueryList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iVariable_Query;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};List of queries to be executed defined manually.;;;true;;
                iVariable_QueryResultType;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Type list of global variables to be set with the result of the query.;;={ TRANSLATE("GENERIC.L_Scalar"), TRANSLATE("GENERIC.L_Array") };true;;
                iVariable_Name;19;{"$$TotalPacked","$$TotalWaste","$$TotalReturned","$$TotalSampled","$$TotalCF","$$TotalPackBulk","$$TotalBulk","$$OffLblPULPrn","$$OffLblPULScr","$$OffLblBULPrn","$$OffLblBULScr"};List of global variables to be set with the result of the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>GlobalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iExecuteDefaultQueries;1;YES;Specify if execute or not default queries defined in DataSource configuration key.;;;false;;
              end
              type: 0
              order: 0
              bounds: 0,1680,200,7
              executeAtClientID: No
            END
            ParallelDivergent30951:PFCTree.View.ParallelDivergent
              id: 30951
              idEnd: 30953
              bounds: 215,1680,200,7
            END
            30950_30954:PFCTree.View.Link
              id: 30974
              fromID: 30950
              toID: 30954
              bounds: 98,1687,6,233
            END
            30951_30952:PFCTree.View.Link
              id: 30975
              fromID: 30951
              toID: 30952
              bounds: 313,1687,6,73
            END
            P_SET_VARS_FROM_UT_BS:PFCTree.View.Script
              id: 30952
              buildingBlockElementID: GENERIC.SET_GLOBAL_VARIABLE_FROM_UT
              arguments:
                iParameter_Name;19;NULL;Names for the local variables that will be used by the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>LocalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iParameter_Value;18;NULL;Numeric values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueStr;19;NULL;String values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueBool;17;NULL;Boolean values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueDate;20;NULL;Date values for the local variables that will be used by the query.;;;true;;
                iParameter_GlobalVariable;19;NULL;Global variables for the local variables that will be used by the query.;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iVariable_Source;19;{"Packed Total","Waste Total","Returned Total","Sampled Total","Carry Fwd Total","Bulk Total Packing","Bulk Total","Total Printed PUL Labels","Total Scrapped PUL Labels","Total Printed BUL Labels","Total Scrapped BUL Labels"};List of queries to be executed defined in QueryList configuration key.;;=TRANSLATE("GENERIC.L_"+PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>QueryList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iVariable_Query;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};List of queries to be executed defined manually.;;;true;;
                iVariable_QueryResultType;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Type list of global variables to be set with the result of the query.;;={ TRANSLATE("GENERIC.L_Scalar"), TRANSLATE("GENERIC.L_Array") };true;;
                iVariable_Name;19;{"$$TotalPacked","$$TotalWaste","$$TotalReturned","$$TotalSampled","$$TotalCF","$$TotalPackBulk","$$TotalBulk","$$OffLblPULPrn","$$OffLblPULScr","$$OffLblBULPrn","$$OffLblBULScr"};List of global variables to be set with the result of the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>GlobalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iExecuteDefaultQueries;1;YES;Specify if execute or not default queries defined in DataSource configuration key.;;;false;;
              end
              type: 0
              order: 0
              bounds: 215,1760,200,7
              executeAtClientID: No
            END
            30952_30953:PFCTree.View.Link
              id: 30976
              fromID: 30952
              toID: 30953
              bounds: 313,1767,6,73
            END
            ParallelConvergent30953:PFCTree.View.ParallelConvergent
              id: 30953
              idEnd: 30951
              bounds: 215,1840,200,7
            END
            30953_30954:PFCTree.View.Link
              id: 30977
              fromID: 30953
              toID: 30954
              bounds: 313,1847,6,73
            END
            SerialConvergent30954:PFCTree.View.SerialConvergent
              id: 30954
              idEnd: 30949
              bounds: 0,1920,415,7
            END
            30954_30955:PFCTree.View.Link
              id: 30978
              fromID: 30954
              toID: 30955
              bounds: 205,1927,6,73
            END
            SerialDivergent30955:PFCTree.View.SerialDivergent
              id: 30955
              idEnd: 30960
              bounds: 0,2000,415,7
            END
            30955_30956:PFCTree.View.Link
              id: 30979
              fromID: 30955
              toID: 30956
              bounds: 98,2007,6,73
            END
            30955_30957:PFCTree.View.Link
              id: 30980
              fromID: 30955
              toID: 30957
              bounds: 313,2007,6,73
            END
            S_VAR_TOTALS_BS:PFCTree.View.Script
              id: 30956
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vr_TotalPacked","vr_TotalWaste","vr_TotalSampled","vr_TotalReturned","vr_TotalCF","vr_TotalPackBulk","vr_TotalBulk","vi_TotalLblPULPrn","vi_TotalLblPULScr","vi_TotalLblBULPrn","vi_TotalLblBULScr"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{STR2NUM($$TotalPacked),STR2NUM($$TotalWaste),STR2NUM($$TotalSampled),STR2NUM($$TotalReturned),STR2NUM($$TotalCF),STR2NUM($$TotalPackBulk),STR2NUM($$TotalBulk),STR2NUM($$OffLblPULPrn),STR2NUM($$OffLblPULScr),STR2NUM($$OffLblBULPrn),STR2NUM($$OffLblBULScr)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,2080,200,7
              executeAtClientID: No
            END
            ParallelDivergent30957:PFCTree.View.ParallelDivergent
              id: 30957
              idEnd: 30959
              bounds: 215,2080,200,7
            END
            30956_30960:PFCTree.View.Link
              id: 30981
              fromID: 30956
              toID: 30960
              bounds: 98,2087,6,233
            END
            30957_30958:PFCTree.View.Link
              id: 30982
              fromID: 30957
              toID: 30958
              bounds: 313,2087,6,73
            END
            P_VAR_TOTALS_BS:PFCTree.View.Script
              id: 30958
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vr_TotalPacked","vr_TotalWaste","vr_TotalSampled","vr_TotalReturned","vr_TotalCF","vr_TotalPackBulk","vr_TotalBulk","vi_TotalLblPULPrn","vi_TotalLblPULScr","vi_TotalLblBULPrn","vi_TotalLblBULScr"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{STR2NUM($$TotalPacked),STR2NUM($$TotalWaste),STR2NUM($$TotalSampled),STR2NUM($$TotalReturned),STR2NUM($$TotalCF),STR2NUM($$TotalPackBulk),STR2NUM($$TotalBulk),STR2NUM($$OffLblPULPrn),STR2NUM($$OffLblPULScr),STR2NUM($$OffLblBULPrn),STR2NUM($$OffLblBULScr)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,2160,200,7
              executeAtClientID: No
            END
            30958_30959:PFCTree.View.Link
              id: 30983
              fromID: 30958
              toID: 30959
              bounds: 313,2167,6,73
            END
            ParallelConvergent30959:PFCTree.View.ParallelConvergent
              id: 30959
              idEnd: 30957
              bounds: 215,2240,200,7
            END
            30959_30960:PFCTree.View.Link
              id: 30984
              fromID: 30959
              toID: 30960
              bounds: 313,2247,6,73
            END
            SerialConvergent30960:PFCTree.View.SerialConvergent
              id: 30960
              idEnd: 30955
              bounds: 0,2320,415,7
            END
            30960_30961:PFCTree.View.Link
              id: 30985
              fromID: 30960
              toID: 30961
              bounds: 205,2327,6,73
            END
            SerialDivergent30961:PFCTree.View.SerialDivergent
              id: 30961
              idEnd: 30966
              bounds: 0,2400,415,7
            END
            30961_30962:PFCTree.View.Link
              id: 30986
              fromID: 30961
              toID: 30962
              bounds: 98,2407,6,73
            END
            30961_30963:PFCTree.View.Link
              id: 30987
              fromID: 30961
              toID: 30963
              bounds: 313,2407,6,73
            END
            S_TOT_LBL_VARS_BS:PFCTree.View.Script
              id: 30962
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vi_TotalLblPULPrn","vi_TotalLblPULScr","vi_TotalLblPULDes","vi_TotalLblBULPrn","vi_TotalLblBULScr","vi_TotalLblBULDes"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$TotLblPULPrn + $$vi_TotalLblPULPrn,$$TotLblPULScr + $$vi_TotalLblPULScr,$$TotLblPULDes,$$TotLblBULPrn + $$vi_TotalLblBULPrn,$$TotLblBULScr + $$vi_TotalLblBULScr,$$TotLblBULDes};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL,NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL,NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,2480,200,7
              executeAtClientID: No
            END
            ParallelDivergent30963:PFCTree.View.ParallelDivergent
              id: 30963
              idEnd: 30965
              bounds: 215,2480,200,7
            END
            30962_30966:PFCTree.View.Link
              id: 30988
              fromID: 30962
              toID: 30966
              bounds: 98,2487,6,233
            END
            30963_30964:PFCTree.View.Link
              id: 30989
              fromID: 30963
              toID: 30964
              bounds: 313,2487,6,73
            END
            P_TOT_LBL_VARS_BS:PFCTree.View.Script
              id: 30964
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vi_TotalLblPULPrn","vi_TotalLblPULScr","vi_TotalLblPULDes","vi_TotalLblBULPrn","vi_TotalLblBULScr","vi_TotalLblBULDes"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$TotLblPULPrn + $$vi_TotalLblPULPrn,$$TotLblPULScr + $$vi_TotalLblPULScr,$$TotLblPULDes,$$TotLblBULPrn + $$vi_TotalLblBULPrn,$$TotLblBULScr + $$vi_TotalLblBULScr,$$TotLblBULDes};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL,NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL,NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,2560,200,7
              executeAtClientID: No
            END
            30964_30965:PFCTree.View.Link
              id: 30990
              fromID: 30964
              toID: 30965
              bounds: 313,2567,6,73
            END
            ParallelConvergent30965:PFCTree.View.ParallelConvergent
              id: 30965
              idEnd: 30963
              bounds: 215,2640,200,7
            END
            30965_30966:PFCTree.View.Link
              id: 30991
              fromID: 30965
              toID: 30966
              bounds: 313,2647,6,73
            END
            SerialConvergent30966:PFCTree.View.SerialConvergent
              id: 30966
              idEnd: 30961
              bounds: 0,2720,415,7
            END
            30966_30967:PFCTree.View.Link
              id: 30992
              fromID: 30966
              toID: 30967
              bounds: 205,2727,6,73
            END
            ParallelConvergent30967:PFCTree.View.ParallelConvergent
              id: 30967
              idEnd: 30948
              bounds: 0,2800,415,7
            END
            30967_30968:PFCTree.View.Link
              id: 30993
              fromID: 30967
              toID: 30968
              bounds: 98,2807,6,73
            END
            EndNode30968:PFCTree.View.EndNode
              id: 30968
              bounds: 0,2880,200,70
            END
          END
          bounds: 0,80,200,70
        END
        30945_30994:PFCTree.View.Link
          id: 31148
          fromID: 30945
          toID: 30994
          bounds: 98,150,6,10
        END
        ParallelDivergent30994:PFCTree.View.ParallelDivergent
          id: 30994
          idEnd: 31145
          bounds: 0,160,415,7
        END
        30994_31013:PFCTree.View.Link
          id: 33563
          fromID: 30994
          toID: 31013
          bounds: 98,167,6,73
        END
        30994_31001:PFCTree.View.Link
          id: 31150
          fromID: 30994
          toID: 31001
          bounds: 313,167,6,73
        END
        RECONCILIATION_OP:PFCTree.View.Operation
          description: RECONCILIATION
          id: 31013
          order: 0
          design:
            BeginNode31014:PFCTree.View.BeginNode
              id: 31014
              bounds: 0,0,200,70
            END
            31014_31015:PFCTree.View.Link
              id: 31075
              fromID: 31014
              toID: 31015
              bounds: 98,70,6,10
            END
            SerialDivergent31015:PFCTree.View.SerialDivergent
              id: 31015
              idEnd: 31067
              bounds: 0,80,1060,7
            END
            31015_31016:PFCTree.View.Link
              id: 31076
              fromID: 31015
              toID: 31016
              bounds: 98,87,6,73
            END
            31015_31017:PFCTree.View.Link
              id: 31077
              fromID: 31015
              toID: 31017
              bounds: 528,87,6,73
            END
            CHK_FOR_CF_BS:PFCTree.View.Script
              id: 31016
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{"RPL_DERMS_FILL01_02"};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"IS_BATCH_CF_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[1]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,160,200,7
              executeAtClientID: No
            END
            CHK_FOR_CF1_BS:PFCTree.View.Script
              id: 31017
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{"RPL_DERMS_FILL01_02"};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"IS_BATCH_CF_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[2]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 1
              bounds: 430,160,200,7
              executeAtClientID: No
            END
            31016_31018:PFCTree.View.ControlLink
              id: 31078
              fromID: 31016
              toID: 31018
              bounds: 98,167,6,73
            END
            31017_31019:PFCTree.View.Link
              id: 31079
              fromID: 31017
              toID: 31019
              bounds: 528,167,6,73
            END
            RECON_PROFILE1_BP:PFCTree.View.Phase
              description: Carry Forward Calculation
              buildingBlockElementID: YIELDS_AND_RECONCILIATION.CALCULATION
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures,2nd blind signature;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Reconciliation fields populated";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iEquipment_Type;19;{"ResourceArea"};Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iProfile;3;"DERMS2_SecReconProfile1";Yields and Reconciliation profile;;=SQL_GET("Select Distinct NAME from YR_PROFILE_CONFIG ORDER BY NAME");false;;
                iLimit1_Low;2;0;Lower limit for limit 1 figure. If limit 1 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit1_High;2;NULL;Higher limit for limit 1 figure. If limit 1 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_Low;2;NULL;Lower limit for limit 2 figure. If limit 2 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_High;2;NULL;Higher limit for limit 2 figure. If limit 2 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_Low;2;NULL;Lower limit for limit 3 figure. If limit 3 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_High;2;NULL;Higher limit for limit 3 figure. If limit 3 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iParameter_Name;19;{"QTY_RETURNED","QTY_BULKWASTE","QTY_FULLPALLET","QTY_PARTIALPALLET","QTY_PACKINGWASTE","QTY_FILLINGWASTE"};Parameter names for APRM data source;;=SQL_GET("Select Distinct DETAIL1 from YR_PROFILE_CONFIG where DATA_SOURCE='" + TRANSLATE("YIELDS_AND_RECONCILIATION.L_SourceBatchRecord") + "' ORDER BY DETAIL1");true;;
                iParameter_ValueRPLName;19;{"RPL_DERMS_FILL01_02","RPL_DERMS_FILL01_02",NULL,NULL,NULL,"RPL_DERMS_FILL01_02"};Parameter RPL name for APRM data source;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iParameter_ValuePhaseName;19;{"WASTE_BP","WASTE_BP","GOOD_PRODUCT_COUNT_BP","PARTIAL_PALLET_COUNT_BP","PRODUCT_WASTE_BP","WASTE_BP"};Parameter Phase name for APRM data source;;;true;;
                iParameter_ValueCharPath;19;;Complete path of the APRM characteristic (for APRM data source when it is not related to a BP). If iParameter_ValuePhaseName is informed, then this parameter is ignored;;;true;;
                iParameter_ValueCharName;19;{"CALCULATION\LIMIT_CALCULATED_VALUE[2]","CALCULATION\LIMIT_CALCULATED_VALUE[1]","CALCULATION\LIMIT_CALCULATED_VALUE","CALCULATION\LIMIT_CALCULATED_VALUE","CALCULATION\LIMIT_CALCULATED_VALUE","CALCULATION\LIMIT_CALCULATED_VALUE[3]"};Parameter Characteristic name for APRM data source;;;true;;
                iValidation_OrderStatus;3;NULL;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;NULL;Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;NULL;Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;NULL;Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 31018
              order: 0
              bounds: 0,240,200,70
            END
            SerialDivergent31019:PFCTree.View.SerialDivergent
              id: 31019
              idEnd: 31052
              bounds: 430,240,630,7
            END
            31019_31021:PFCTree.View.Link
              id: 31080
              fromID: 31019
              toID: 31021
              bounds: 528,247,6,73
            END
            31019_31022:PFCTree.View.Link
              id: 31081
              fromID: 31019
              toID: 31022
              bounds: 743,247,6,73
            END
            31018_31020:PFCTree.View.Link
              id: 31082
              fromID: 31018
              toID: 31020
              bounds: 98,310,6,10
            END
            SerialDivergent31020:PFCTree.View.SerialDivergent
              id: 31020
              idEnd: 31032
              bounds: 0,320,415,7
            END
            CHK_RECON_BS:PFCTree.View.Script
              id: 31021
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"vr_TotalPacked"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{0};Global variable value;;;true;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 430,320,200,7
              executeAtClientID: No
            END
            RECON_PROFILE2_BP:PFCTree.View.Phase
              description: Batch Reconciliation Data Summary
              buildingBlockElementID: YIELDS_AND_RECONCILIATION.CALCULATION
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures,2nd blind signature;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Reconciliation fields populated";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iEquipment_Type;19;{"ResourceArea"};Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iProfile;3;"DERMS2_SecReconProfile2A";Yields and Reconciliation profile;;=SQL_GET("Select Distinct NAME from YR_PROFILE_CONFIG ORDER BY NAME");false;;
                iLimit1_Low;2;NULL;Lower limit for limit 1 figure. If limit 1 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit1_High;2;NULL;Higher limit for limit 1 figure. If limit 1 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_Low;2;NULL;Lower limit for limit 2 figure. If limit 2 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_High;2;NULL;Higher limit for limit 2 figure. If limit 2 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_Low;2;NULL;Lower limit for limit 3 figure. If limit 3 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_High;2;NULL;Higher limit for limit 3 figure. If limit 3 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iParameter_Name;19;{"QTY_RETURNED","QTY_BULKWASTE","QTY_FULLPALLET","QTY_PARTIALPALLET","QTY_PACKINGWASTE","QTY_FILLINGWASTE"};Parameter names for APRM data source;;=SQL_GET("Select Distinct DETAIL1 from YR_PROFILE_CONFIG where DATA_SOURCE='" + TRANSLATE("YIELDS_AND_RECONCILIATION.L_SourceBatchRecord") + "' ORDER BY DETAIL1");true;;
                iParameter_ValueRPLName;19;{"RPL_DERMS_FILL01_02","RPL_DERMS_FILL01_02",NULL,NULL,NULL,"RPL_DERMS_FILL01_02"};Parameter RPL name for APRM data source;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iParameter_ValuePhaseName;19;{"WASTE_BP","WASTE_BP","GOOD_PRODUCT_COUNT_BP","PARTIAL_PALLET_COUNT_BP","PRODUCT_WASTE_BP","WASTE_BP"};Parameter Phase name for APRM data source;;;true;;
                iParameter_ValueCharPath;19;;Complete path of the APRM characteristic (for APRM data source when it is not related to a BP). If iParameter_ValuePhaseName is informed, then this parameter is ignored;;;true;;
                iParameter_ValueCharName;19;{"CALCULATION\LIMIT_CALCULATED_VALUE[2]","CALCULATION\LIMIT_CALCULATED_VALUE[1]","CALCULATION\LIMIT_CALCULATED_VALUE","CALCULATION\LIMIT_CALCULATED_VALUE","CALCULATION\LIMIT_CALCULATED_VALUE","CALCULATION\LIMIT_CALCULATED_VALUE[3]"};Parameter Characteristic name for APRM data source;;;true;;
                iValidation_OrderStatus;3;NULL;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;NULL;Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;NULL;Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;NULL;Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 31022
              order: 1
              bounds: 645,320,200,70
            END
            31020_31023:PFCTree.View.Link
              id: 31083
              fromID: 31020
              toID: 31023
              bounds: 98,327,6,73
            END
            31020_31024:PFCTree.View.Link
              id: 31084
              fromID: 31020
              toID: 31024
              bounds: 313,327,6,73
            END
            31021_31025:PFCTree.View.ControlLink
              id: 31085
              fromID: 31021
              toID: 31025
              bounds: 528,327,6,73
            END
            31022_31026:PFCTree.View.Link
              id: 31086
              fromID: 31022
              toID: 31026
              bounds: 743,390,6,10
            END
            S_RECON_VALUES1_BS:PFCTree.View.Script
              id: 31023
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"NewCF","NewSampled","NewPacked","NewWaste","NewBulk","NewReturned"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL,NULL,NULL,NULL,NULL,NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"RECON_PROFILE1_BP","RECON_PROFILE1_BP","RECON_PROFILE1_BP","RECON_PROFILE1_BP","RECON_PROFILE1_BP","RECON_PROFILE1_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CALCULATION\LIMIT_CALCULATED_VALUE_STR[1]","CALCULATION\CALCULATED_VALUE_STR[5]","CALCULATION\CALCULATED_VALUE_STR[3]","CALCULATION\CALCULATED_VALUE_STR[2]","CALCULATION\RETRIEVED_VALUE_STR[6]","CALCULATION\RETRIEVED_VALUE_STR[7]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,400,200,7
              executeAtClientID: No
            END
            ParallelDivergent31024:PFCTree.View.ParallelDivergent
              id: 31024
              idEnd: 31030
              bounds: 215,400,200,7
            END
            RECON_PROFILE3_BP:PFCTree.View.Phase
              description: Reconciliation
              buildingBlockElementID: YIELDS_AND_RECONCILIATION.CALCULATION
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures,2nd blind signature;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Reconciliation fields populated";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iEquipment_Type;19;{"ResourceArea"};Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iProfile;3;"DERMS2_SecReconProfile2B";Yields and Reconciliation profile;;=SQL_GET("Select Distinct NAME from YR_PROFILE_CONFIG ORDER BY NAME");false;;
                iLimit1_Low;2;-2.01;Lower limit for limit 1 figure. If limit 1 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit1_High;2;2.01;Higher limit for limit 1 figure. If limit 1 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_Low;2;NULL;Lower limit for limit 2 figure. If limit 2 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_High;2;NULL;Higher limit for limit 2 figure. If limit 2 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_Low;2;NULL;Lower limit for limit 3 figure. If limit 3 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_High;2;NULL;Higher limit for limit 3 figure. If limit 3 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iParameter_Name;19;{"QTY_RETURNED","QTY_BULKWASTE","QTY_FULLPALLET","QTY_PARTIALPALLET","QTY_PACKINGWASTE","QTY_FILLINGWASTE"};Parameter names for APRM data source;;=SQL_GET("Select Distinct DETAIL1 from YR_PROFILE_CONFIG where DATA_SOURCE='" + TRANSLATE("YIELDS_AND_RECONCILIATION.L_SourceBatchRecord") + "' ORDER BY DETAIL1");true;;
                iParameter_ValueRPLName;19;{"RPL_DERMS_FILL01_02","RPL_DERMS_FILL01_02",NULL,NULL,NULL,"RPL_DERMS_FILL01_02"};Parameter RPL name for APRM data source;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iParameter_ValuePhaseName;19;{"WASTE_BP","WASTE_BP","GOOD_PRODUCT_COUNT_BP","PARTIAL_PALLET_COUNT_BP","PRODUCT_WASTE_BP","WASTE_BP"};Parameter Phase name for APRM data source;;;true;;
                iParameter_ValueCharPath;19;;Complete path of the APRM characteristic (for APRM data source when it is not related to a BP). If iParameter_ValuePhaseName is informed, then this parameter is ignored;;;true;;
                iParameter_ValueCharName;19;{"CALCULATION\LIMIT_CALCULATED_VALUE[2]","CALCULATION\LIMIT_CALCULATED_VALUE[1]","CALCULATION\LIMIT_CALCULATED_VALUE","CALCULATION\LIMIT_CALCULATED_VALUE","CALCULATION\LIMIT_CALCULATED_VALUE","CALCULATION\LIMIT_CALCULATED_VALUE[3]"};Parameter Characteristic name for APRM data source;;;true;;
                iValidation_OrderStatus;3;NULL;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;NULL;Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;NULL;Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;NULL;Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 31025
              order: 0
              bounds: 430,400,200,70
            END
            SerialDivergent31026:PFCTree.View.SerialDivergent
              id: 31026
              idEnd: 31035
              bounds: 645,400,415,7
            END
            31023_31032:PFCTree.View.Link
              id: 31087
              fromID: 31023
              toID: 31032
              bounds: 98,407,6,233
            END
            31024_39111:PFCTree.View.Link
              id: 39112
              fromID: 31024
              toID: 39111
              bounds: 313,407,6,73
            END
            31026_31028:PFCTree.View.Link
              id: 31089
              fromID: 31026
              toID: 31028
              bounds: 743,407,6,73
            END
            31026_31029:PFCTree.View.Link
              id: 31090
              fromID: 31026
              toID: 31029
              bounds: 958,407,6,73
            END
            31025_31052:PFCTree.View.Link
              id: 31091
              fromID: 31025
              toID: 31052
              bounds: 528,470,6,810
            END
            P_RECON_VALUES1_BS:PFCTree.View.Script
              id: 39111
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"NewCF","NewSampled","NewPacked","NewWaste","NewBulk","NewReturned"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL,NULL,NULL,NULL,NULL,NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"RECON_PROFILE1_BP","RECON_PROFILE1_BP","RECON_PROFILE1_BP","RECON_PROFILE1_BP","RECON_PROFILE1_BP","RECON_PROFILE1_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CALCULATION\LIMIT_CALCULATED_VALUE_STR[1]","CALCULATION\CALCULATED_VALUE_STR[5]","CALCULATION\CALCULATED_VALUE_STR[3]","CALCULATION\CALCULATED_VALUE_STR[2]","CALCULATION\RETRIEVED_VALUE_STR[6]","CALCULATION\RETRIEVED_VALUE_STR[7]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,480,200,7
              executeAtClientID: No
            END
            S_RECON_VALUES2_BS:PFCTree.View.Script
              id: 31028
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"NewReturned","NewSampled","NewPacked","NewWaste","NewBulk"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL,NULL,NULL,NULL,NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"RECON_PROFILE2_BP","RECON_PROFILE2_BP","RECON_PROFILE2_BP","RECON_PROFILE2_BP","RECON_PROFILE2_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CALCULATION\RETRIEVED_VALUE_STR[7]","CALCULATION\CALCULATED_VALUE_STR[5]","CALCULATION\CALCULATED_VALUE_STR[3]","CALCULATION\CALCULATED_VALUE_STR[2]","CALCULATION\RETRIEVED_VALUE_STR[6]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 645,480,200,7
              executeAtClientID: No
            END
            ParallelDivergent31029:PFCTree.View.ParallelDivergent
              id: 31029
              idEnd: 31033
              bounds: 860,480,200,7
            END
            39111_31030:PFCTree.View.Link
              id: 39113
              fromID: 39111
              toID: 31030
              bounds: 313,487,6,73
            END
            31028_31035:PFCTree.View.Link
              id: 31093
              fromID: 31028
              toID: 31035
              bounds: 743,487,6,233
            END
            31029_39107:PFCTree.View.Link
              id: 39108
              fromID: 31029
              toID: 39107
              bounds: 958,487,6,73
            END
            ParallelConvergent31030:PFCTree.View.ParallelConvergent
              id: 31030
              idEnd: 31024
              bounds: 215,560,200,7
            END
            P_RECON_VALUES2_BS:PFCTree.View.Script
              id: 39107
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"NewReturned","NewSampled","NewPacked","NewWaste","NewBulk"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL,NULL,NULL,NULL,NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"RECON_PROFILE2_BP","RECON_PROFILE2_BP","RECON_PROFILE2_BP","RECON_PROFILE2_BP","RECON_PROFILE2_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CALCULATION\RETRIEVED_VALUE_STR[7]","CALCULATION\CALCULATED_VALUE_STR[5]","CALCULATION\CALCULATED_VALUE_STR[3]","CALCULATION\CALCULATED_VALUE_STR[2]","CALCULATION\RETRIEVED_VALUE_STR[6]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 860,560,200,7
              executeAtClientID: No
            END
            31030_31032:PFCTree.View.Link
              id: 31095
              fromID: 31030
              toID: 31032
              bounds: 313,567,6,73
            END
            39107_31033:PFCTree.View.Link
              id: 39109
              fromID: 39107
              toID: 31033
              bounds: 958,567,6,73
            END
            SerialConvergent31032:PFCTree.View.SerialConvergent
              id: 31032
              idEnd: 31020
              bounds: 0,640,415,7
            END
            ParallelConvergent31033:PFCTree.View.ParallelConvergent
              id: 31033
              idEnd: 31029
              bounds: 860,640,200,7
            END
            31032_31034:PFCTree.View.Link
              id: 31097
              fromID: 31032
              toID: 31034
              bounds: 205,647,6,73
            END
            31033_31035:PFCTree.View.Link
              id: 31098
              fromID: 31033
              toID: 31035
              bounds: 958,647,6,73
            END
            SerialDivergent31034:PFCTree.View.SerialDivergent
              id: 31034
              idEnd: 31044
              bounds: 0,720,415,7
            END
            SerialConvergent31035:PFCTree.View.SerialConvergent
              id: 31035
              idEnd: 31026
              bounds: 645,720,415,7
            END
            31034_31036:PFCTree.View.Link
              id: 31099
              fromID: 31034
              toID: 31036
              bounds: 98,727,6,73
            END
            31034_31037:PFCTree.View.Link
              id: 31100
              fromID: 31034
              toID: 31037
              bounds: 313,727,6,73
            END
            31035_31038:PFCTree.View.Link
              id: 31101
              fromID: 31035
              toID: 31038
              bounds: 850,727,6,73
            END
            S_NEW_TOTAL1_BS:PFCTree.View.Script
              id: 31036
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vr_TotalWaste","vr_TotalPacked","vr_TotalSampled","vr_TotalReturned","vr_TotalCF","vr_TotalPackBulk"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$vr_TotalWaste <> NULL ? $$vr_TotalWaste + STR2NUM($$NewWaste) :  0 + STR2NUM($$TotalWaste),$$vr_TotalPacked <> NULL ? $$vr_TotalPacked + STR2NUM($$NewPacked) :  0 + STR2NUM($$TotalPacked),$$vr_TotalSampled <> NULL ? $$vr_TotalSampled + STR2NUM($$NewSampled) :  0 + STR2NUM($$TotalSampled),$$vr_TotalReturned <> NULL ? $$vr_TotalReturned + STR2NUM($$NewReturned) :  0 + STR2NUM($$TotalReturned),$$vr_TotalCF <> NULL ? $$vr_TotalCF + STR2NUM($$NewCF) : 0 + STR2NUM($$TotalCF),$$vr_TotalPackBulk <> NULL ? $$vr_TotalPackBulk + STR2NUM($$NewBulk) : 0 + STR2NUM($$TotalPackBulk)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL,NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL,NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,800,200,7
              executeAtClientID: No
            END
            ParallelDivergent31037:PFCTree.View.ParallelDivergent
              id: 31037
              idEnd: 31042
              bounds: 215,800,200,7
            END
            SerialDivergent31038:PFCTree.View.SerialDivergent
              id: 31038
              idEnd: 31047
              bounds: 645,800,415,7
            END
            31036_31044:PFCTree.View.Link
              id: 31102
              fromID: 31036
              toID: 31044
              bounds: 98,807,6,233
            END
            31037_31039:PFCTree.View.Link
              id: 31103
              fromID: 31037
              toID: 31039
              bounds: 313,807,6,73
            END
            31038_31040:PFCTree.View.Link
              id: 31104
              fromID: 31038
              toID: 31040
              bounds: 743,807,6,73
            END
            31038_31041:PFCTree.View.Link
              id: 31105
              fromID: 31038
              toID: 31041
              bounds: 958,807,6,73
            END
            P_NEW_TOTAL1_BS:PFCTree.View.Script
              id: 31039
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vr_TotalWaste","vr_TotalPacked","vr_TotalSampled","vr_TotalReturned","vr_TotalCF","vr_TotalPackBulk"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$vr_TotalWaste <> NULL ? $$vr_TotalWaste + STR2NUM($$NewWaste) :  0 + STR2NUM($$TotalWaste),$$vr_TotalPacked <> NULL ? $$vr_TotalPacked + STR2NUM($$NewPacked) :  0 + STR2NUM($$TotalPacked),$$vr_TotalSampled <> NULL ? $$vr_TotalSampled + STR2NUM($$NewSampled) :  0 + STR2NUM($$TotalSampled),$$vr_TotalReturned <> NULL ? $$vr_TotalReturned + STR2NUM($$NewReturned) :  0 + STR2NUM($$TotalReturned),$$vr_TotalCF <> NULL ? $$vr_TotalCF + STR2NUM($$NewCF) : 0 + STR2NUM($$TotalCF),$$vr_TotalPackBulk <> NULL ? $$vr_TotalPackBulk + STR2NUM($$NewBulk) : 0 + STR2NUM($$TotalPackBulk)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL,NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL,NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,880,200,7
              executeAtClientID: No
            END
            S_NEW_TOTAL2_BS:PFCTree.View.Script
              id: 31040
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vr_TotalWaste","vr_TotalPacked","vr_TotalSampled","vr_TotalReturned","vr_TotalPackBulk"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$vr_TotalWaste <> NULL ? $$vr_TotalWaste + STR2NUM($$NewWaste) :  0 + STR2NUM($$TotalWaste),$$vr_TotalPacked <> NULL ? $$vr_TotalPacked + STR2NUM($$NewPacked) :  0 + STR2NUM($$TotalPacked),$$vr_TotalSampled <> NULL ? $$vr_TotalSampled + STR2NUM($$NewSampled) :  0 + STR2NUM($$TotalSampled),$$vr_TotalReturned <> NULL ? $$vr_TotalReturned + STR2NUM($$NewReturned) :  0 + STR2NUM($$TotalReturned),$$vr_TotalPackBulk <> NULL ? $$vr_TotalPackBulk + STR2NUM($$NewBulk) : 0 + STR2NUM($$TotalPackBulk)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 645,880,200,7
              executeAtClientID: No
            END
            ParallelDivergent31041:PFCTree.View.ParallelDivergent
              id: 31041
              idEnd: 31045
              bounds: 860,880,200,7
            END
            31039_31042:PFCTree.View.Link
              id: 31106
              fromID: 31039
              toID: 31042
              bounds: 313,887,6,73
            END
            31040_31047:PFCTree.View.Link
              id: 31107
              fromID: 31040
              toID: 31047
              bounds: 743,887,6,233
            END
            31041_31043:PFCTree.View.Link
              id: 31108
              fromID: 31041
              toID: 31043
              bounds: 958,887,6,73
            END
            ParallelConvergent31042:PFCTree.View.ParallelConvergent
              id: 31042
              idEnd: 31037
              bounds: 215,960,200,7
            END
            P_NEW_TOTAL2_BS:PFCTree.View.Script
              id: 31043
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"vr_TotalWaste","vr_TotalPacked","vr_TotalSampled","vr_TotalReturned","vr_TotalPackBulk"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{$$vr_TotalWaste <> NULL ? $$vr_TotalWaste + STR2NUM($$NewWaste) :  0 + STR2NUM($$TotalWaste),$$vr_TotalPacked <> NULL ? $$vr_TotalPacked + STR2NUM($$NewPacked) :  0 + STR2NUM($$TotalPacked),$$vr_TotalSampled <> NULL ? $$vr_TotalSampled + STR2NUM($$NewSampled) :  0 + STR2NUM($$TotalSampled),$$vr_TotalReturned <> NULL ? $$vr_TotalReturned + STR2NUM($$NewReturned) :  0 + STR2NUM($$TotalReturned),$$vr_TotalPackBulk <> NULL ? $$vr_TotalPackBulk + STR2NUM($$NewBulk) : 0 + STR2NUM($$TotalPackBulk)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL,NULL,NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL,NULL,NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL,NULL,NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL,NULL,NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL,NULL,NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL,NULL,NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL,NULL,NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 860,960,200,7
              executeAtClientID: No
            END
            31042_31044:PFCTree.View.Link
              id: 31109
              fromID: 31042
              toID: 31044
              bounds: 313,967,6,73
            END
            31043_31045:PFCTree.View.Link
              id: 31110
              fromID: 31043
              toID: 31045
              bounds: 958,967,6,73
            END
            SerialConvergent31044:PFCTree.View.SerialConvergent
              id: 31044
              idEnd: 31034
              bounds: 0,1040,415,7
            END
            ParallelConvergent31045:PFCTree.View.ParallelConvergent
              id: 31045
              idEnd: 31041
              bounds: 860,1040,200,7
            END
            31044_31046:PFCTree.View.Link
              id: 31111
              fromID: 31044
              toID: 31046
              bounds: 205,1047,6,73
            END
            31045_31047:PFCTree.View.Link
              id: 31112
              fromID: 31045
              toID: 31047
              bounds: 958,1047,6,73
            END
            SerialDivergent31046:PFCTree.View.SerialDivergent
              id: 31046
              idEnd: 31055
              bounds: 0,1120,415,7
            END
            SerialConvergent31047:PFCTree.View.SerialConvergent
              id: 31047
              idEnd: 31038
              bounds: 645,1120,415,7
            END
            31046_31048:PFCTree.View.Link
              id: 31113
              fromID: 31046
              toID: 31048
              bounds: 98,1127,6,73
            END
            31046_31049:PFCTree.View.Link
              id: 31114
              fromID: 31046
              toID: 31049
              bounds: 313,1127,6,73
            END
            31047_31050:PFCTree.View.Link
              id: 31115
              fromID: 31047
              toID: 31050
              bounds: 743,1127,6,73
            END
            UPDATE_TOTALS_BS:PFCTree.View.Script
              id: 31048
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Cell";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"TotalWaste","TotalPacked","TotalReturned","TotalSampled","TotalCF","TotalBulk"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL,NULL,NULL,NULL,NULL,NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{$$vr_TotalWaste <> NULL ? NUM2STR($$vr_TotalWaste) : $$TotalWaste <> NULL ? $$TotalWaste : "ERROR",$$vr_TotalPacked <> NULL ? NUM2STR($$vr_TotalPacked) : $$TotalPacked <> NULL ? $$TotalPacked : "ERROR",$$vr_TotalReturned <> NULL ? NUM2STR($$vr_TotalReturned) : $$TotalReturned <> NULL ? $$TotalReturned : "ERROR",$$vr_TotalSampled <> NULL ? NUM2STR($$vr_TotalSampled) : $$TotalSampled <> NULL ? $$TotalSampled : "ERROR",$$vr_TotalCF <> NULL ? NUM2STR($$vr_TotalCF) : $$TotalCF <> NULL ? $$TotalCF : "ERROR",$$vr_TotalPackBulk <> NULL ? NUM2STR($$vr_TotalPackBulk) : $$TotalPackBulk <> NULL ? $$TotalPackBulk : "ERROR"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 0,1200,200,7
              executeAtClientID: No
            END
            ParallelDivergent31049:PFCTree.View.ParallelDivergent
              id: 31049
              idEnd: 31053
              bounds: 215,1200,200,7
            END
            CAMPAIGN_RECON_BP:PFCTree.View.Phase
              description: Final Campaign Reconciliation
              buildingBlockElementID: YIELDS_AND_RECONCILIATION.CALCULATION
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures,2nd blind signature;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Reconciliation fields populated";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iEquipment_Type;19;{"ResourceArea"};Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iProfile;3;"DERMS_CampaignRecon0";Yields and Reconciliation profile;;=SQL_GET("Select Distinct NAME from YR_PROFILE_CONFIG ORDER BY NAME");false;;
                iLimit1_Low;2;NULL;Lower limit for limit 1 figure. If limit 1 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit1_High;2;NULL;Higher limit for limit 1 figure. If limit 1 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_Low;2;NULL;Lower limit for limit 2 figure. If limit 2 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_High;2;NULL;Higher limit for limit 2 figure. If limit 2 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_Low;2;-2.01;Lower limit for limit 3 figure. If limit 3 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_High;2;2.01;Higher limit for limit 3 figure. If limit 3 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iParameter_Name;19;NULL;Parameter names for APRM data source;;=SQL_GET("Select Distinct DETAIL1 from YR_PROFILE_CONFIG where DATA_SOURCE='" + TRANSLATE("YIELDS_AND_RECONCILIATION.L_SourceBatchRecord") + "' ORDER BY DETAIL1");true;;
                iParameter_ValueRPLName;19;NULL;Parameter RPL name for APRM data source;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iParameter_ValuePhaseName;19;NULL;Parameter Phase name for APRM data source;;;true;;
                iParameter_ValueCharPath;19;;Complete path of the APRM characteristic (for APRM data source when it is not related to a BP). If iParameter_ValuePhaseName is informed, then this parameter is ignored;;;true;;
                iParameter_ValueCharName;19;NULL;Parameter Characteristic name for APRM data source;;;true;;
                iValidation_OrderStatus;3;NULL;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;NULL;Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;NULL;Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;NULL;Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 31050
              order: 0
              bounds: 645,1200,200,70
            END
            31048_31055:PFCTree.View.Link
              id: 31116
              fromID: 31048
              toID: 31055
              bounds: 98,1207,6,233
            END
            31049_31051:PFCTree.View.Link
              id: 31117
              fromID: 31049
              toID: 31051
              bounds: 313,1207,6,73
            END
            31050_31052:PFCTree.View.Link
              id: 31118
              fromID: 31050
              toID: 31052
              bounds: 743,1270,6,10
            END
            M_UPDATE_TOTALS_BS:PFCTree.View.Script
              id: 31051
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Cell";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"TotalWaste","TotalPacked","TotalReturned","TotalSampled","TotalCF","TotalBulk"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL,NULL,NULL,NULL,NULL,NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{$$vr_TotalWaste <> NULL ? NUM2STR($$vr_TotalWaste) : $$TotalWaste <> NULL ? $$TotalWaste : "ERROR",$$vr_TotalPacked <> NULL ? NUM2STR($$vr_TotalPacked) : $$TotalPacked <> NULL ? $$TotalPacked : "ERROR",$$vr_TotalReturned <> NULL ? NUM2STR($$vr_TotalReturned) : $$TotalReturned <> NULL ? $$TotalReturned : "ERROR",$$vr_TotalSampled <> NULL ? NUM2STR($$vr_TotalSampled) : $$TotalSampled <> NULL ? $$TotalSampled : "ERROR",$$vr_TotalCF <> NULL ? NUM2STR($$vr_TotalCF) : $$TotalCF <> NULL ? $$TotalCF : "ERROR",$$vr_TotalPackBulk <> NULL ? NUM2STR($$vr_TotalPackBulk) : $$TotalPackBulk <> NULL ? $$TotalPackBulk : "ERROR"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 215,1280,200,7
              executeAtClientID: No
            END
            SerialConvergent31052:PFCTree.View.SerialConvergent
              id: 31052
              idEnd: 31019
              bounds: 430,1280,630,7
            END
            31051_31053:PFCTree.View.Link
              id: 31119
              fromID: 31051
              toID: 31053
              bounds: 313,1287,6,73
            END
            31052_31054:PFCTree.View.Link
              id: 31120
              fromID: 31052
              toID: 31054
              bounds: 635,1287,6,73
            END
            ParallelConvergent31053:PFCTree.View.ParallelConvergent
              id: 31053
              idEnd: 31049
              bounds: 215,1360,200,7
            END
            SerialDivergent31054:PFCTree.View.SerialDivergent
              id: 31054
              idEnd: 31064
              bounds: 430,1360,415,7
            END
            31053_31055:PFCTree.View.Link
              id: 31121
              fromID: 31053
              toID: 31055
              bounds: 313,1367,6,73
            END
            31054_31056:PFCTree.View.Link
              id: 31122
              fromID: 31054
              toID: 31056
              bounds: 528,1367,6,73
            END
            31054_31057:PFCTree.View.Link
              id: 31123
              fromID: 31054
              toID: 31057
              bounds: 743,1367,6,73
            END
            SerialConvergent31055:PFCTree.View.SerialConvergent
              id: 31055
              idEnd: 31046
              bounds: 0,1440,415,7
            END
            S_RESET_VALUES_BS:PFCTree.View.Script
              id: 31056
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Cell";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"TotalBulk","TotalPacked","TotalWaste","TotalSampled","TotalReturned","TotalCF"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL,NULL,NULL,NULL,NULL,NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"0.00","0.00","0.00","0.00","0.00","0.00"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 430,1440,200,7
              executeAtClientID: No
            END
            ParallelDivergent31057:PFCTree.View.ParallelDivergent
              id: 31057
              idEnd: 31062
              bounds: 645,1440,200,7
            END
            31055_31058:PFCTree.View.Link
              id: 31124
              fromID: 31055
              toID: 31058
              bounds: 205,1447,6,73
            END
            31056_31064:PFCTree.View.Link
              id: 31125
              fromID: 31056
              toID: 31064
              bounds: 528,1447,6,233
            END
            31057_31059:PFCTree.View.Link
              id: 31126
              fromID: 31057
              toID: 31059
              bounds: 743,1447,6,73
            END
            SerialDivergent31058:PFCTree.View.SerialDivergent
              id: 31058
              idEnd: 31066
              bounds: 0,1520,415,7
            END
            P_RESET_VALUES_BS:PFCTree.View.Script
              id: 31059
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Cell";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"TotalBulk","TotalPacked","TotalWaste","TotalSampled","TotalReturned","TotalCF"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL,NULL,NULL,NULL,NULL,NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"0.00","0.00","0.00","0.00","0.00","0.00"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 645,1520,200,7
              executeAtClientID: No
            END
            31058_31060:PFCTree.View.Link
              id: 31127
              fromID: 31058
              toID: 31060
              bounds: 98,1527,6,73
            END
            31058_31061:PFCTree.View.Link
              id: 31128
              fromID: 31058
              toID: 31061
              bounds: 313,1527,6,73
            END
            31059_31062:PFCTree.View.Link
              id: 31129
              fromID: 31059
              toID: 31062
              bounds: 743,1527,6,73
            END
            S_SET_DEASSIGN_BS:PFCTree.View.Script
              id: 31060
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"CarryForward"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 0,1600,200,7
              executeAtClientID: No
            END
            ParallelDivergent31061:PFCTree.View.ParallelDivergent
              id: 31061
              idEnd: 31065
              bounds: 215,1600,200,7
            END
            ParallelConvergent31062:PFCTree.View.ParallelConvergent
              id: 31062
              idEnd: 31057
              bounds: 645,1600,200,7
            END
            31060_31066:PFCTree.View.Link
              id: 31130
              fromID: 31060
              toID: 31066
              bounds: 98,1607,6,233
            END
            31061_31063:PFCTree.View.Link
              id: 31131
              fromID: 31061
              toID: 31063
              bounds: 313,1607,6,73
            END
            31062_31064:PFCTree.View.Link
              id: 31132
              fromID: 31062
              toID: 31064
              bounds: 743,1607,6,73
            END
            P_SET_DEASSIGN_BS:PFCTree.View.Script
              id: 31063
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"CarryForward"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 215,1680,200,7
              executeAtClientID: No
            END
            SerialConvergent31064:PFCTree.View.SerialConvergent
              id: 31064
              idEnd: 31054
              bounds: 430,1680,415,7
            END
            31063_31065:PFCTree.View.Link
              id: 31133
              fromID: 31063
              toID: 31065
              bounds: 313,1687,6,73
            END
            31064_31067:PFCTree.View.Link
              id: 31134
              fromID: 31064
              toID: 31067
              bounds: 635,1687,6,233
            END
            ParallelConvergent31065:PFCTree.View.ParallelConvergent
              id: 31065
              idEnd: 31061
              bounds: 215,1760,200,7
            END
            31065_31066:PFCTree.View.Link
              id: 31135
              fromID: 31065
              toID: 31066
              bounds: 313,1767,6,73
            END
            SerialConvergent31066:PFCTree.View.SerialConvergent
              id: 31066
              idEnd: 31058
              bounds: 0,1840,415,7
            END
            31066_31067:PFCTree.View.Link
              id: 31136
              fromID: 31066
              toID: 31067
              bounds: 205,1847,6,73
            END
            SerialConvergent31067:PFCTree.View.SerialConvergent
              id: 31067
              idEnd: 31015
              bounds: 0,1920,1060,7
            END
            31067_31068:PFCTree.View.Link
              id: 31137
              fromID: 31067
              toID: 31068
              bounds: 205,1927,6,73
            END
            SerialDivergent31068:PFCTree.View.SerialDivergent
              id: 31068
              idEnd: 31073
              bounds: 0,2000,415,7
            END
            31068_31069:PFCTree.View.Link
              id: 31138
              fromID: 31068
              toID: 31069
              bounds: 98,2007,6,73
            END
            31068_31070:PFCTree.View.Link
              id: 31139
              fromID: 31068
              toID: 31070
              bounds: 313,2007,6,73
            END
            S_SET_FILL_BS:PFCTree.View.Script
              id: 31069
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Reconciliation"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 0,2080,200,7
              executeAtClientID: No
            END
            ParallelDivergent31070:PFCTree.View.ParallelDivergent
              id: 31070
              idEnd: 31072
              bounds: 215,2080,200,7
            END
            31069_31073:PFCTree.View.Link
              id: 31140
              fromID: 31069
              toID: 31073
              bounds: 98,2087,6,233
            END
            31070_31071:PFCTree.View.Link
              id: 31141
              fromID: 31070
              toID: 31071
              bounds: 313,2087,6,73
            END
            P_SET_FILL_BS:PFCTree.View.Script
              id: 31071
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Reconciliation"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 215,2160,200,7
              executeAtClientID: No
            END
            31071_31072:PFCTree.View.Link
              id: 31142
              fromID: 31071
              toID: 31072
              bounds: 313,2167,6,73
            END
            ParallelConvergent31072:PFCTree.View.ParallelConvergent
              id: 31072
              idEnd: 31070
              bounds: 215,2240,200,7
            END
            31072_31073:PFCTree.View.Link
              id: 31143
              fromID: 31072
              toID: 31073
              bounds: 313,2247,6,73
            END
            SerialConvergent31073:PFCTree.View.SerialConvergent
              id: 31073
              idEnd: 31068
              bounds: 0,2320,415,7
            END
            31073_31074:PFCTree.View.Link
              id: 31144
              fromID: 31073
              toID: 31074
              bounds: 98,2327,6,73
            END
            EndNode31074:PFCTree.View.EndNode
              id: 31074
              bounds: 0,2400,200,70
            END
          END
          bounds: 0,240,200,70
        END
        RECON_LABELS_OP:PFCTree.View.Operation
          description: RECONCILIATION
          id: 31001
          order: 1
          design:
            BeginNode31002:PFCTree.View.BeginNode
              id: 31002
              bounds: 0,0,200,70
            END
            31002_31003:PFCTree.View.Link
              id: 31008
              fromID: 31002
              toID: 31003
              bounds: 98,70,6,10
            END
            SerialDivergent31003:PFCTree.View.SerialDivergent
              id: 31003
              idEnd: 31006
              bounds: 0,80,200,7
            END
            31003_31004:PFCTree.View.Link
              id: 31009
              fromID: 31003
              toID: 31004
              bounds: 98,87,6,73
            END
            CHK_LBL_REQUIRED1_BS:PFCTree.View.Script
              id: 31004
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"vs_WasteProfile"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"None"};Global variable value;;;true;;
                iCheck_Condition;19;{"<>"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,160,200,7
              executeAtClientID: No
            END
            31004_31005:PFCTree.View.ControlLink
              id: 31010
              fromID: 31004
              toID: 31005
              bounds: 98,167,6,73
            END
            RECON_LABELS_BP:PFCTree.View.Phase
              description: Label Reconciliation
              buildingBlockElementID: YIELDS_AND_RECONCILIATION.CALCULATION
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures,2nd blind signature;false;;
                iSignature_Permission1stLevel;3;"OPERATOR";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Reconciliation fields populated";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_668018"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iEquipment_Type;19;{"ResourceArea"};Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iProfile;3;$$vs_WasteProfile <> NULL ? $$vs_RecProfile : "DERMS2_LabelsPacking1";Yields and Reconciliation profile;;=SQL_GET("Select Distinct NAME from YR_PROFILE_CONFIG ORDER BY NAME");false;;
                iLimit1_Low;2;0;Lower limit for limit 1 figure. If limit 1 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit1_High;2;0;Higher limit for limit 1 figure. If limit 1 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_Low;2;NULL;Lower limit for limit 2 figure. If limit 2 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit2_High;2;NULL;Higher limit for limit 2 figure. If limit 2 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_Low;2;0;Lower limit for limit 3 figure. If limit 3 is strictly lower than this limit then an atypical event is raised. Value is optional;;;true;;
                iLimit3_High;2;0;Higher limit for limit 3 figure. If limit 3 is strictly higher than this limit then an atypical event is raised. Value is optional;;;true;;
                iParameter_Name;19;NULL;Parameter names for APRM data source;;=SQL_GET("Select Distinct DETAIL1 from YR_PROFILE_CONFIG where DATA_SOURCE='" + TRANSLATE("YIELDS_AND_RECONCILIATION.L_SourceBatchRecord") + "' ORDER BY DETAIL1");true;;
                iParameter_ValueRPLName;19;NULL;Parameter RPL name for APRM data source;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iParameter_ValuePhaseName;19;NULL;Parameter Phase name for APRM data source;;;true;;
                iParameter_ValueCharPath;19;;Complete path of the APRM characteristic (for APRM data source when it is not related to a BP). If iParameter_ValuePhaseName is informed, then this parameter is ignored;;;true;;
                iParameter_ValueCharName;19;NULL;Parameter Characteristic name for APRM data source;;;true;;
                iValidation_OrderStatus;3;NULL;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;NULL;Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;NULL;Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;NULL;Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_1
              autoStart: Yes
              usePhaseRet: Yes
              Converge: No
              id: 31005
              order: 0
              bounds: 0,240,200,70
            END
            31005_31006:PFCTree.View.Link
              id: 31011
              fromID: 31005
              toID: 31006
              bounds: 98,310,6,10
            END
            SerialConvergent31006:PFCTree.View.SerialConvergent
              id: 31006
              idEnd: 31003
              bounds: 0,320,200,7
            END
            31006_31007:PFCTree.View.Link
              id: 31012
              fromID: 31006
              toID: 31007
              bounds: 98,327,6,73
            END
            EndNode31007:PFCTree.View.EndNode
              id: 31007
              bounds: 0,400,200,70
            END
          END
          bounds: 215,240,200,70
        END
        31013_33608:PFCTree.View.ControlLink
          id: 34753
          fromID: 31013
          toID: 33608
          bounds: 98,310,6,10
        END
        31001_31145:PFCTree.View.Link
          id: 31152
          fromID: 31001
          toID: 31145
          bounds: 313,310,6,90
        END
        RETRIEVE_CF_OP:PFCTree.View.Operation
          description: RECONCILIATION
          id: 33608
          order: 0
          design:
            BeginNode34661:PFCTree.View.BeginNode
              id: 34661
              bounds: 0,0,200,70
            END
            34661_34663:PFCTree.View.Link
              id: 34755
              fromID: 34661
              toID: 34663
              bounds: 98,70,6,10
            END
            SerialDivergent34663:PFCTree.View.SerialDivergent
              id: 34663
              idEnd: 34696
              bounds: 0,80,845,7
            END
            34663_34664:PFCTree.View.Link
              id: 34706
              fromID: 34663
              toID: 34664
              bounds: 98,87,6,73
            END
            34663_34665:PFCTree.View.Link
              id: 34707
              fromID: 34663
              toID: 34665
              bounds: 635,87,6,73
            END
            CHECK_CARRY_FORWARD_BS:PFCTree.View.Script
              id: 34664
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"CarryForward"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"YES"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,160,200,7
              executeAtClientID: No
            END
            SerialDivergent34665:PFCTree.View.SerialDivergent
              id: 34665
              idEnd: 34675
              bounds: 430,160,415,7
            END
            34664_34666:PFCTree.View.Link
              id: 34708
              fromID: 34664
              toID: 34666
              bounds: 98,167,6,73
            END
            34665_34667:PFCTree.View.Link
              id: 34709
              fromID: 34665
              toID: 34667
              bounds: 528,167,6,73
            END
            34665_34668:PFCTree.View.Link
              id: 34710
              fromID: 34665
              toID: 34668
              bounds: 743,167,6,73
            END
            SerialDivergent34666:PFCTree.View.SerialDivergent
              id: 34666
              idEnd: 34676
              bounds: 0,240,415,7
            END
            S_SET_NEWCF_ZERO_BS:PFCTree.View.Script
              id: 34667
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Cell";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"NewCF","CFBatch"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL,NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"0.00","N/A"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 430,240,200,7
              executeAtClientID: No
            END
            ParallelDivergent34668:PFCTree.View.ParallelDivergent
              id: 34668
              idEnd: 34673
              bounds: 645,240,200,7
            END
            34666_34669:PFCTree.View.Link
              id: 34711
              fromID: 34666
              toID: 34669
              bounds: 98,247,6,73
            END
            34666_34670:PFCTree.View.Link
              id: 34712
              fromID: 34666
              toID: 34670
              bounds: 313,247,6,73
            END
            34667_34675:PFCTree.View.Link
              id: 34713
              fromID: 34667
              toID: 34675
              bounds: 528,247,6,233
            END
            34668_34671:PFCTree.View.Link
              id: 34714
              fromID: 34668
              toID: 34671
              bounds: 743,247,6,73
            END
            S_CARRYFORWARD_BS:PFCTree.View.Script
              id: 34669
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"CFFill"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"RECON_PROFILE1_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CALCULATION\LIMIT_CALCULATED_VALUE[1]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,320,200,7
              executeAtClientID: No
            END
            ParallelDivergent34670:PFCTree.View.ParallelDivergent
              id: 34670
              idEnd: 34674
              bounds: 215,320,200,7
            END
            P_SET_NEWCF_ZERO_BS:PFCTree.View.Script
              id: 34671
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Cell";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"NewCF","CFBatch"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL,NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"0.00","N/A"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 645,320,200,7
              executeAtClientID: No
            END
            34669_34676:PFCTree.View.Link
              id: 34715
              fromID: 34669
              toID: 34676
              bounds: 98,327,6,233
            END
            34670_34672:PFCTree.View.Link
              id: 34716
              fromID: 34670
              toID: 34672
              bounds: 313,327,6,73
            END
            34671_34673:PFCTree.View.Link
              id: 34717
              fromID: 34671
              toID: 34673
              bounds: 743,327,6,73
            END
            P_CARRYFORWARD_BS:PFCTree.View.Script
              id: 34672
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"CFFill"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"RECON_PROFILE1_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"CALCULATION\LIMIT_CALCULATED_VALUE[1]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,400,200,7
              executeAtClientID: No
            END
            ParallelConvergent34673:PFCTree.View.ParallelConvergent
              id: 34673
              idEnd: 34668
              bounds: 645,400,200,7
            END
            34672_34674:PFCTree.View.Link
              id: 34718
              fromID: 34672
              toID: 34674
              bounds: 313,407,6,73
            END
            34673_34675:PFCTree.View.Link
              id: 34719
              fromID: 34673
              toID: 34675
              bounds: 743,407,6,73
            END
            ParallelConvergent34674:PFCTree.View.ParallelConvergent
              id: 34674
              idEnd: 34670
              bounds: 215,480,200,7
            END
            SerialConvergent34675:PFCTree.View.SerialConvergent
              id: 34675
              idEnd: 34665
              bounds: 430,480,415,7
            END
            34674_34676:PFCTree.View.Link
              id: 34720
              fromID: 34674
              toID: 34676
              bounds: 313,487,6,73
            END
            34675_34696:PFCTree.View.Link
              id: 34758
              fromID: 34675
              toID: 34696
              bounds: 635,487,6,953
            END
            SerialConvergent34676:PFCTree.View.SerialConvergent
              id: 34676
              idEnd: 34666
              bounds: 0,560,415,7
            END
            34676_34678:PFCTree.View.Link
              id: 34722
              fromID: 34676
              toID: 34678
              bounds: 205,567,6,73
            END
            SerialDivergent34678:PFCTree.View.SerialDivergent
              id: 34678
              idEnd: 34688
              bounds: 0,640,415,7
            END
            34678_34681:PFCTree.View.Link
              id: 34725
              fromID: 34678
              toID: 34681
              bounds: 98,647,6,73
            END
            34678_34682:PFCTree.View.Link
              id: 34726
              fromID: 34678
              toID: 34682
              bounds: 313,647,6,73
            END
            S_ROUND_CF_FIG_BS:PFCTree.View.Script
              id: 34681
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"CFFill"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{ROUND($$CFFill,3)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,720,200,7
              executeAtClientID: No
            END
            ParallelDivergent34682:PFCTree.View.ParallelDivergent
              id: 34682
              idEnd: 34686
              bounds: 215,720,200,7
            END
            34681_34688:PFCTree.View.Link
              id: 34729
              fromID: 34681
              toID: 34688
              bounds: 98,727,6,233
            END
            34682_34684:PFCTree.View.Link
              id: 34730
              fromID: 34682
              toID: 34684
              bounds: 313,727,6,73
            END
            P_ROUND_CF_FIG_BS:PFCTree.View.Script
              id: 34684
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"CFFill"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{ROUND($$CFFill,3)};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,800,200,7
              executeAtClientID: No
            END
            34684_34686:PFCTree.View.Link
              id: 34732
              fromID: 34684
              toID: 34686
              bounds: 313,807,6,73
            END
            ParallelConvergent34686:PFCTree.View.ParallelConvergent
              id: 34686
              idEnd: 34682
              bounds: 215,880,200,7
            END
            34686_34688:PFCTree.View.Link
              id: 34734
              fromID: 34686
              toID: 34688
              bounds: 313,887,6,73
            END
            SerialConvergent34688:PFCTree.View.SerialConvergent
              id: 34688
              idEnd: 34678
              bounds: 0,960,415,7
            END
            34688_34689:PFCTree.View.Link
              id: 34736
              fromID: 34688
              toID: 34689
              bounds: 205,967,6,73
            END
            SerialDivergent34689:PFCTree.View.SerialDivergent
              id: 34689
              idEnd: 34694
              bounds: 0,1040,415,7
            END
            34689_34690:PFCTree.View.Link
              id: 34737
              fromID: 34689
              toID: 34690
              bounds: 98,1047,6,73
            END
            34689_34691:PFCTree.View.Link
              id: 34738
              fromID: 34689
              toID: 34691
              bounds: 313,1047,6,73
            END
            S_SET_NEWCF_BS:PFCTree.View.Script
              id: 34690
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Cell";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"NewCF","CFBatch"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL,NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{$$CFFill <> NULL ? NUM2STR($$CFFill) : "ERROR","CarryForward"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 0,1120,200,7
              executeAtClientID: No
            END
            ParallelDivergent34691:PFCTree.View.ParallelDivergent
              id: 34691
              idEnd: 34693
              bounds: 215,1120,200,7
            END
            34690_34694:PFCTree.View.Link
              id: 34739
              fromID: 34690
              toID: 34694
              bounds: 98,1127,6,233
            END
            34691_34692:PFCTree.View.Link
              id: 34740
              fromID: 34691
              toID: 34692
              bounds: 313,1127,6,73
            END
            P_SET_NEWCF_BS:PFCTree.View.Script
              id: 34692
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Cell";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"NewCF"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{$$CFFill <> NULL ? NUM2STR($$CFFill) : "ERROR"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 215,1200,200,7
              executeAtClientID: No
            END
            34692_34693:PFCTree.View.Link
              id: 34741
              fromID: 34692
              toID: 34693
              bounds: 313,1207,6,73
            END
            ParallelConvergent34693:PFCTree.View.ParallelConvergent
              id: 34693
              idEnd: 34691
              bounds: 215,1280,200,7
            END
            34693_34694:PFCTree.View.Link
              id: 34742
              fromID: 34693
              toID: 34694
              bounds: 313,1287,6,73
            END
            SerialConvergent34694:PFCTree.View.SerialConvergent
              id: 34694
              idEnd: 34689
              bounds: 0,1360,415,7
            END
            34694_34696:PFCTree.View.Link
              id: 34797
              fromID: 34694
              toID: 34696
              bounds: 205,1367,6,73
            END
            SerialConvergent34696:PFCTree.View.SerialConvergent
              id: 34696
              idEnd: 34663
              bounds: 0,1440,845,7
            END
            34696_34779:PFCTree.View.Link
              id: 34782
              fromID: 34696
              toID: 34779
              bounds: 205,1447,6,73
            END
            SerialDivergent34779:PFCTree.View.SerialDivergent
              id: 34779
              idEnd: 34780
              bounds: 0,1520,415,7
            END
            34779_34789:PFCTree.View.Link
              id: 34790
              fromID: 34779
              toID: 34789
              bounds: 98,1527,6,73
            END
            34779_34784:PFCTree.View.Link
              id: 34787
              fromID: 34779
              toID: 34784
              bounds: 313,1527,6,73
            END
            S_SET_RECON_CMP_BS:PFCTree.View.Script
              id: 34789
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Cell";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Reconciliation"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 0,1600,200,7
              executeAtClientID: No
            END
            ParallelDivergent34784:PFCTree.View.ParallelDivergent
              id: 34784
              idEnd: 34785
              bounds: 215,1600,200,7
            END
            34789_34780:PFCTree.View.Link
              id: 34791
              fromID: 34789
              toID: 34780
              bounds: 98,1607,6,233
            END
            34784_34793:PFCTree.View.Link
              id: 34794
              fromID: 34784
              toID: 34793
              bounds: 313,1607,6,73
            END
            P_SET_RECON_CMP_BS:PFCTree.View.Script
              id: 34793
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Cell";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Reconciliation"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 215,1680,200,7
              executeAtClientID: No
            END
            34793_34785:PFCTree.View.Link
              id: 34795
              fromID: 34793
              toID: 34785
              bounds: 313,1687,6,73
            END
            EndParallelDivergent34784:PFCTree.View.ParallelConvergent
              id: 34785
              idEnd: 34784
              bounds: 215,1760,200,7
            END
            34785_34780:PFCTree.View.Link
              id: 34788
              fromID: 34785
              toID: 34780
              bounds: 313,1767,6,73
            END
            EndSerialDivergent34779:PFCTree.View.SerialConvergent
              id: 34780
              idEnd: 34779
              bounds: 0,1840,415,7
            END
            34780_34703:PFCTree.View.Link
              id: 34783
              fromID: 34780
              toID: 34703
              bounds: 98,1847,6,73
            END
            EndNode34703:PFCTree.View.EndNode
              id: 34703
              bounds: 0,1920,200,70
            END
          END
          bounds: 0,320,200,70
        END
        33608_31145:PFCTree.View.Link
          id: 34754
          fromID: 33608
          toID: 31145
          bounds: 98,390,6,10
        END
        ParallelConvergent31145:PFCTree.View.ParallelConvergent
          id: 31145
          idEnd: 30994
          bounds: 0,400,415,7
        END
        31145_31146:PFCTree.View.Link
          id: 31154
          fromID: 31145
          toID: 31146
          bounds: 98,407,6,73
        END
        EndNode31146:PFCTree.View.EndNode
          id: 31146
          bounds: 0,480,200,70
        END
      END
      bounds: 509,1100,130,83
    END
    30943_31158:PFCTree.View.ControlLink
      id: 31195
      fromID: 30943
      toID: 31158
      bounds: 567,1183,16,27
    END
    P_PRODUCTION_REVIEW_UP:PFCTree.View.UnitProcedure
      description: PRODUCTION REVIEW
      id: 31158
      order: 0
      design:
        BeginNode31159:PFCTree.View.BeginNode
          id: 31159
          bounds: 0,0,200,70
        END
        31159_35766:PFCTree.View.ControlLink
          id: 38702
          fromID: 31159
          toID: 35766
          bounds: 98,70,6,10
        END
        PROD_REVIEW_SCRIPTS_OP:PFCTree.View.Operation
          description: PROD REVIEW SCRIPTS
          id: 35766
          order: 0
          design:
            BeginNode35767:PFCTree.View.BeginNode
              id: 35767
              bounds: 0,0,200,70
            END
            35767_50950:PFCTree.View.Link
              id: 50955
              fromID: 35767
              toID: 50950
              bounds: 98,70,6,10
            END
            SerialDivergent50950:PFCTree.View.SerialDivergent
              id: 50950
              idEnd: 50951
              bounds: 0,80,415,7
            END
            50950_50956:PFCTree.View.Link
              id: 50957
              fromID: 50950
              toID: 50956
              bounds: 98,87,6,73
            END
            50950_50959:PFCTree.View.Link
              id: 50962
              fromID: 50950
              toID: 50959
              bounds: 313,87,6,73
            END
            S_SET_EQUIPMENT_STATUS_BS:PFCTree.View.Script
              id: 50956
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.SET_EQUIPMENT_STATUS
              arguments:
                iEquipment_Type;19;{"ResourceArea"};Equipment Types to update;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));false;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iEquipment_NewStatus;19;{"Available"};Equipment new status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iEquipment_ExceptionStatus;19;{NULL};Equipment exception status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iEquipment_StatusRollback;17;;Indicates if status of the equipment is set to the last previous value;;;true;;
                iEquipmentId;19;;Equipments to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iUserId;3;NULL;If it is defined uses this user for update audit;;;true;;
                iReasonOfChange;3;NULL;If it is defined uses this reason of change for update audit;;;true;;
                iParents_Update;1;YES;Defines if updates the status of the equipment parent;;;false;;
                iParents_Status;3;NULL;Status to set for the parent. If argument is null then the Status of the Child is used;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iChildren_Update;1;YES;Defines if updates the status of the equipment children;;;false;;
                iChildren_Status;3;NULL;Status to set for the children. If argument is null then the Status of the Parent is used;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iAdditionalPELInfo;19;;Additional Infomration for PEL event;;;true;;
                iResetDate;1;Yes;When value is YES, STATUS_DATE field is updated with current timestamp. When value is NO field is not updated;;;false;;
                iApprovalReq;1;No;When value is YES, then event remains pending for sign-off;;;false;;
              end
              type: 0
              order: 0
              bounds: 0,160,200,7
              executeAtClientID: No
            END
            ParallelDivergent50959:PFCTree.View.ParallelDivergent
              id: 50959
              idEnd: 50960
              bounds: 215,160,200,7
            END
            50956_50951:PFCTree.View.Link
              id: 50958
              fromID: 50956
              toID: 50951
              bounds: 98,167,6,233
            END
            50959_50964:PFCTree.View.Link
              id: 50965
              fromID: 50959
              toID: 50964
              bounds: 313,167,6,73
            END
            P_SET_EQUIPMENT_STATUS_BS:PFCTree.View.Script
              id: 50964
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.SET_EQUIPMENT_STATUS
              arguments:
                iEquipment_Type;19;{"ResourceArea"};Equipment Types to update;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));false;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase;;;true;;
                iEquipment_NewStatus;19;{"Available"};Equipment new status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iEquipment_ExceptionStatus;19;{NULL};Equipment exception status;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iEquipment_StatusRollback;17;;Indicates if status of the equipment is set to the last previous value;;;true;;
                iEquipmentId;19;;Equipments to update;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iUserId;3;NULL;If it is defined uses this user for update audit;;;true;;
                iReasonOfChange;3;NULL;If it is defined uses this reason of change for update audit;;;true;;
                iParents_Update;1;YES;Defines if updates the status of the equipment parent;;;false;;
                iParents_Status;3;NULL;Status to set for the parent. If argument is null then the Status of the Child is used;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iChildren_Update;1;YES;Defines if updates the status of the equipment children;;;false;;
                iChildren_Status;3;NULL;Status to set for the children. If argument is null then the Status of the Parent is used;;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"StatusesClass"), "[*][*].name")));true;;
                iAdditionalPELInfo;19;;Additional Infomration for PEL event;;;true;;
                iResetDate;1;Yes;When value is YES, STATUS_DATE field is updated with current timestamp. When value is NO field is not updated;;;false;;
                iApprovalReq;1;No;When value is YES, then event remains pending for sign-off;;;false;;
              end
              type: 0
              order: 0
              bounds: 215,240,200,7
              executeAtClientID: No
            END
            50964_50960:PFCTree.View.Link
              id: 50966
              fromID: 50964
              toID: 50960
              bounds: 313,247,6,73
            END
            EndParallelDivergent50959:PFCTree.View.ParallelConvergent
              id: 50960
              idEnd: 50959
              bounds: 215,320,200,7
            END
            50960_50951:PFCTree.View.Link
              id: 50963
              fromID: 50960
              toID: 50951
              bounds: 313,327,6,73
            END
            EndSerialDivergent50950:PFCTree.View.SerialConvergent
              id: 50951
              idEnd: 50950
              bounds: 0,400,415,7
            END
            50951_50967:PFCTree.View.Link
              id: 50970
              fromID: 50951
              toID: 50967
              bounds: 205,407,6,73
            END
            SerialDivergent50967:PFCTree.View.SerialDivergent
              id: 50967
              idEnd: 50968
              bounds: 0,480,415,7
            END
            50967_50973:PFCTree.View.Link
              id: 50974
              fromID: 50967
              toID: 50973
              bounds: 98,487,6,73
            END
            50967_50976:PFCTree.View.Link
              id: 50979
              fromID: 50967
              toID: 50976
              bounds: 313,487,6,73
            END
            S_DEALLOCATE_BS:PFCTree.View.Script
              id: 50973
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.UPDATE_EQUIPMENT_ALLOCATION
              arguments:
                iEquipment_Type;19;{"*"};Equipment type list;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));true;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase list;;;true;;
                iEquipment_Id;19;;Equipment Id list to deallocate;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iEquipment_LastPORecord;17;{NO};If YES set the Equipment previous PO with the value of the PO that is releasing the equipment;;;false;;
                iUserId;3;;If it is defined uses this user for the ePEL events;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,560,200,7
              executeAtClientID: No
            END
            ParallelDivergent50976:PFCTree.View.ParallelDivergent
              id: 50976
              idEnd: 50977
              bounds: 215,560,200,7
            END
            50973_50968:PFCTree.View.Link
              id: 50975
              fromID: 50973
              toID: 50968
              bounds: 98,567,6,233
            END
            50976_50981:PFCTree.View.Link
              id: 50982
              fromID: 50976
              toID: 50981
              bounds: 313,567,6,73
            END
            P_DEALLOCATE_BS:PFCTree.View.Script
              id: 50981
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.UPDATE_EQUIPMENT_ALLOCATION
              arguments:
                iEquipment_Type;19;{"*"};Equipment type list;;=APPEND({GET_CONFIG("<OVERALL.CONFIG_KEYS>AnyType")}, STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name"));true;;
                iEquipment_AllocationPhase;19;{"EQUIPMENT_ALLOCATION_BP"};Equipment Allocation Phase list;;;true;;
                iEquipment_Id;19;;Equipment Id list to deallocate;;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iEquipment_LastPORecord;17;{NO};If YES set the Equipment previous PO with the value of the PO that is releasing the equipment;;;false;;
                iUserId;3;;If it is defined uses this user for the ePEL events;;;true;;
              end
              type: 0
              order: 0
              bounds: 215,640,200,7
              executeAtClientID: No
            END
            50981_50977:PFCTree.View.Link
              id: 50983
              fromID: 50981
              toID: 50977
              bounds: 313,647,6,73
            END
            EndParallelDivergent50976:PFCTree.View.ParallelConvergent
              id: 50977
              idEnd: 50976
              bounds: 215,720,200,7
            END
            50977_50968:PFCTree.View.Link
              id: 50980
              fromID: 50977
              toID: 50968
              bounds: 313,727,6,73
            END
            EndSerialDivergent50967:PFCTree.View.SerialConvergent
              id: 50968
              idEnd: 50967
              bounds: 0,800,415,7
            END
            50968_51140:PFCTree.View.Link
              id: 51143
              fromID: 50968
              toID: 51140
              bounds: 205,807,6,73
            END
            SerialDivergent51140:PFCTree.View.SerialDivergent
              id: 51140
              idEnd: 51141
              bounds: 0,880,415,7
            END
            51140_51145:PFCTree.View.Link
              id: 51146
              fromID: 51140
              toID: 51145
              bounds: 98,887,6,73
            END
            51140_51148:PFCTree.View.Link
              id: 51151
              fromID: 51140
              toID: 51148
              bounds: 313,887,6,73
            END
            S_BATCH_END_TIME_BS:PFCTree.View.Script
              id: 51145
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.PRODUCT_LINK
              arguments:
                iMode;3;"Close";Execution mode: Open or Close production event;;=TRANSLATE ( "EQUIPMENT_MANAGEMENT.L_ProductLinkMode" + { "Open", "Close" } );false;;
                iUserId;3;;If it is defined uses this user for creating/closing the event;;;true;;
                iOpenEventScript;3;;Only used at Close mode. If it is defined, then it closes the event opened by the script indicated in this argument.;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,960,200,7
              executeAtClientID: No
            END
            ParallelDivergent51148:PFCTree.View.ParallelDivergent
              id: 51148
              idEnd: 51149
              bounds: 215,960,200,7
            END
            51145_51141:PFCTree.View.Link
              id: 51147
              fromID: 51145
              toID: 51141
              bounds: 98,967,6,233
            END
            51148_51153:PFCTree.View.Link
              id: 51154
              fromID: 51148
              toID: 51153
              bounds: 313,967,6,73
            END
            P_BATCH_END_TIME_BS:PFCTree.View.Script
              id: 51153
              buildingBlockElementID: EQUIPMENT_MANAGEMENT.PRODUCT_LINK
              arguments:
                iMode;3;"Close";Execution mode: Open or Close production event;;=TRANSLATE ( "EQUIPMENT_MANAGEMENT.L_ProductLinkMode" + { "Open", "Close" } );false;;
                iUserId;3;;If it is defined uses this user for creating/closing the event;;;true;;
                iOpenEventScript;3;;Only used at Close mode. If it is defined, then it closes the event opened by the script indicated in this argument.;;;true;;
              end
              type: 0
              order: 0
              bounds: 215,1040,200,7
              executeAtClientID: No
            END
            51153_51149:PFCTree.View.Link
              id: 51155
              fromID: 51153
              toID: 51149
              bounds: 313,1047,6,73
            END
            EndParallelDivergent51148:PFCTree.View.ParallelConvergent
              id: 51149
              idEnd: 51148
              bounds: 215,1120,200,7
            END
            51149_51141:PFCTree.View.Link
              id: 51152
              fromID: 51149
              toID: 51141
              bounds: 313,1127,6,73
            END
            EndSerialDivergent51140:PFCTree.View.SerialConvergent
              id: 51141
              idEnd: 51140
              bounds: 0,1200,415,7
            END
            51141_35978:PFCTree.View.Link
              id: 51144
              fromID: 51141
              toID: 35978
              bounds: 205,1207,6,73
            END
            SerialDivergent35978:PFCTree.View.SerialDivergent
              id: 35978
              idEnd: 35979
              bounds: 0,1280,415,7
            END
            35978_35988:PFCTree.View.Link
              id: 35989
              fromID: 35978
              toID: 35988
              bounds: 98,1287,6,73
            END
            35978_35983:PFCTree.View.Link
              id: 35986
              fromID: 35978
              toID: 35983
              bounds: 313,1287,6,73
            END
            S_GET_FILLING_PEL_BS:PFCTree.View.Script
              id: 35988
              buildingBlockElementID: GENERIC.SET_GLOBAL_VARIABLE_FROM_UT
              arguments:
                iParameter_Name;19;NULL;Names for the local variables that will be used by the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>LocalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iParameter_Value;18;NULL;Numeric values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueStr;19;NULL;String values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueBool;17;NULL;Boolean values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueDate;20;NULL;Date values for the local variables that will be used by the query.;;;true;;
                iParameter_GlobalVariable;19;NULL;Global variables for the local variables that will be used by the query.;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iVariable_Source;19;{"Filling PEL Cycle Number"};List of queries to be executed defined in QueryList configuration key.;;=TRANSLATE("GENERIC.L_"+PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>QueryList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iVariable_Query;19;{NULL};List of queries to be executed defined manually.;;;true;;
                iVariable_QueryResultType;19;{NULL};Type list of global variables to be set with the result of the query.;;={ TRANSLATE("GENERIC.L_Scalar"), TRANSLATE("GENERIC.L_Array") };true;;
                iVariable_Name;19;{"$$FillPELCycleNo"};List of global variables to be set with the result of the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>GlobalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iExecuteDefaultQueries;1;YES;Specify if execute or not default queries defined in DataSource configuration key.;;;false;;
              end
              type: 0
              order: 0
              bounds: 0,1360,200,7
              executeAtClientID: No
            END
            ParallelDivergent35983:PFCTree.View.ParallelDivergent
              id: 35983
              idEnd: 35984
              bounds: 215,1360,200,7
            END
            35988_35979:PFCTree.View.Link
              id: 35990
              fromID: 35988
              toID: 35979
              bounds: 98,1367,6,233
            END
            35983_35991:PFCTree.View.Link
              id: 35992
              fromID: 35983
              toID: 35991
              bounds: 313,1367,6,73
            END
            P_GET_FILLING_PEL_BS:PFCTree.View.Script
              id: 35991
              buildingBlockElementID: GENERIC.SET_GLOBAL_VARIABLE_FROM_UT
              arguments:
                iParameter_Name;19;NULL;Names for the local variables that will be used by the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>LocalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iParameter_Value;18;NULL;Numeric values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueStr;19;NULL;String values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueBool;17;NULL;Boolean values for the local variables that will be used by the query.;;;true;;
                iParameter_ValueDate;20;NULL;Date values for the local variables that will be used by the query.;;;true;;
                iParameter_GlobalVariable;19;NULL;Global variables for the local variables that will be used by the query.;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iVariable_Source;19;{"Filling PEL Cycle Number"};List of queries to be executed defined in QueryList configuration key.;;=TRANSLATE("GENERIC.L_"+PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>QueryList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iVariable_Query;19;{NULL};List of queries to be executed defined manually.;;;true;;
                iVariable_QueryResultType;19;{NULL};Type list of global variables to be set with the result of the query.;;={ TRANSLATE("GENERIC.L_Scalar"), TRANSLATE("GENERIC.L_Array") };true;;
                iVariable_Name;19;{"$$FillPELCycleNo"};List of global variables to be set with the result of the query.;;=PARSE_LIST(GET_CONFIG ("<GENERIC.CONFIG_KEYS>GlobalVariableList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iExecuteDefaultQueries;1;YES;Specify if execute or not default queries defined in DataSource configuration key.;;;false;;
              end
              type: 0
              order: 0
              bounds: 215,1440,200,7
              executeAtClientID: No
            END
            35991_35984:PFCTree.View.Link
              id: 35993
              fromID: 35991
              toID: 35984
              bounds: 313,1447,6,73
            END
            EndParallelDivergent35983:PFCTree.View.ParallelConvergent
              id: 35984
              idEnd: 35983
              bounds: 215,1520,200,7
            END
            35984_35979:PFCTree.View.Link
              id: 35987
              fromID: 35984
              toID: 35979
              bounds: 313,1527,6,73
            END
            EndSerialDivergent35978:PFCTree.View.SerialConvergent
              id: 35979
              idEnd: 35978
              bounds: 0,1600,415,7
            END
            35979_67665:PFCTree.View.Link
              id: 67668
              fromID: 35979
              toID: 67665
              bounds: 205,1607,6,73
            END
            SerialDivergent67665:PFCTree.View.SerialDivergent
              id: 67665
              idEnd: 67666
              bounds: 0,1680,415,7
            END
            67665_67675:PFCTree.View.Link
              id: 67676
              fromID: 67665
              toID: 67675
              bounds: 98,1687,6,73
            END
            67665_67670:PFCTree.View.Link
              id: 67673
              fromID: 67665
              toID: 67670
              bounds: 313,1687,6,73
            END
            S_GET_PREV_CF_NUM_BS:PFCTree.View.Script
              id: 67675
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"PrevBatchNum"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{"RPL_DERMS_FILL01_02"};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"VESSEL_DATA_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{"MEASUREMENT_ENTRY\INSTRUCTION[3]"};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,1760,200,7
              executeAtClientID: No
            END
            ParallelDivergent67670:PFCTree.View.ParallelDivergent
              id: 67670
              idEnd: 67671
              bounds: 215,1760,200,7
            END
            67675_67666:PFCTree.View.Link
              id: 67677
              fromID: 67675
              toID: 67666
              bounds: 98,1767,6,233
            END
            67670_67678:PFCTree.View.Link
              id: 67679
              fromID: 67670
              toID: 67678
              bounds: 313,1767,6,73
            END
            P_GET_PREV_CF_NUM_BS:PFCTree.View.Script
              id: 67678
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"PrevBatchNum"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{NULL};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{"RPL_DERMS_FILL01_02"};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{"VESSEL_DATA_BP"};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{"MEASUREMENT_ENTRY\INSTRUCTION[3]"};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,1840,200,7
              executeAtClientID: No
            END
            67678_67671:PFCTree.View.Link
              id: 67680
              fromID: 67678
              toID: 67671
              bounds: 313,1847,6,73
            END
            EndParallelDivergent67670:PFCTree.View.ParallelConvergent
              id: 67671
              idEnd: 67670
              bounds: 215,1920,200,7
            END
            67671_67666:PFCTree.View.Link
              id: 67674
              fromID: 67671
              toID: 67666
              bounds: 313,1927,6,73
            END
            EndSerialDivergent67665:PFCTree.View.SerialConvergent
              id: 67666
              idEnd: 67665
              bounds: 0,2000,415,7
            END
            67666_67681:PFCTree.View.Link
              id: 67684
              fromID: 67666
              toID: 67681
              bounds: 205,2007,6,73
            END
            SerialDivergent67681:PFCTree.View.SerialDivergent
              id: 67681
              idEnd: 67682
              bounds: 0,2080,415,7
            END
            67681_67686:PFCTree.View.Link
              id: 67687
              fromID: 67681
              toID: 67686
              bounds: 98,2087,6,73
            END
            67681_67689:PFCTree.View.Link
              id: 67692
              fromID: 67681
              toID: 67689
              bounds: 313,2087,6,73
            END
            S_TRIM_BX_STRING_BS:PFCTree.View.Script
              id: 67686
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"PrevBatchNum"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{TRIM(MID($$PrevBatchNum, 28, 8))};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,2160,200,7
              executeAtClientID: No
            END
            ParallelDivergent67689:PFCTree.View.ParallelDivergent
              id: 67689
              idEnd: 67690
              bounds: 215,2160,200,7
            END
            67686_67682:PFCTree.View.Link
              id: 67688
              fromID: 67686
              toID: 67682
              bounds: 98,2167,6,233
            END
            67689_67694:PFCTree.View.Link
              id: 67695
              fromID: 67689
              toID: 67694
              bounds: 313,2167,6,73
            END
            P_TRIM_BX_STRING_BS:PFCTree.View.Script
              id: 67694
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"PrevBatchNum"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{TRIM(MID($$PrevBatchNum, 28, 8))};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,2240,200,7
              executeAtClientID: No
            END
            67694_67690:PFCTree.View.Link
              id: 67696
              fromID: 67694
              toID: 67690
              bounds: 313,2247,6,73
            END
            EndParallelDivergent67689:PFCTree.View.ParallelConvergent
              id: 67690
              idEnd: 67689
              bounds: 215,2320,200,7
            END
            67690_67682:PFCTree.View.Link
              id: 67693
              fromID: 67690
              toID: 67682
              bounds: 313,2327,6,73
            END
            EndSerialDivergent67681:PFCTree.View.SerialConvergent
              id: 67682
              idEnd: 67681
              bounds: 0,2400,415,7
            END
            67682_67697:PFCTree.View.Link
              id: 67700
              fromID: 67682
              toID: 67697
              bounds: 205,2407,6,73
            END
            ParallelDivergent67697:PFCTree.View.ParallelDivergent
              id: 67697
              idEnd: 67698
              bounds: 0,2480,845,7
            END
            67697_67702:PFCTree.View.Link
              id: 67705
              fromID: 67697
              toID: 67702
              bounds: 205,2487,6,73
            END
            67697_67707:PFCTree.View.Link
              id: 67710
              fromID: 67697
              toID: 67707
              bounds: 635,2487,6,73
            END
            SerialDivergent67702:PFCTree.View.SerialDivergent
              id: 67702
              idEnd: 67703
              bounds: 0,2560,415,7
            END
            SerialDivergent67707:PFCTree.View.SerialDivergent
              id: 67707
              idEnd: 67708
              bounds: 430,2560,415,7
            END
            67702_67713:PFCTree.View.Link
              id: 67714
              fromID: 67702
              toID: 67713
              bounds: 98,2567,6,73
            END
            67707_67717:PFCTree.View.Link
              id: 67718
              fromID: 67707
              toID: 67717
              bounds: 528,2567,6,73
            END
            S_CHK_PREV_BX_CF_BS:PFCTree.View.Script
              id: 67713
              buildingBlockElementID: GENERIC.CHECK_GLOBAL_VAR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_VarName;19;{"PrevBatchNum"};Global variable name;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iCheck_VarValue;16;{"N/A"};Global variable value;;;true;;
                iCheck_Condition;19;{"="};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,2640,200,7
              executeAtClientID: No
            END
            CHK_FOR_CF_2_BS:PFCTree.View.Script
              id: 67717
              buildingBlockElementID: GENERIC.TEST_BR
              arguments:
                iOperand;3;;Operator to link conditions;;OR,AND;true;;
                iCheck_RPLName;19;{"RPL_DERMS_FILL01_02"};RPL name. If NULL, current RPL is used;;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iCheck_PhaseName;19;{"IS_BATCH_CF_BP"};Phase name;;;true;;
                iCheck_CharPath;19;{NULL};Complete path of the APRM characteristic (when it is not related to a BP). If iCheck_PhaseName is informed, then this parameter is ignored;;;true;;
                iCheck_CharName;19;{"CHECKLIST\CHECK_LIST_SEL[1]"};APRM characteristic name;;;false;;
                iCheck_CharValue;16;{Yes};APRM characteristic value;;;false;;
                iCheck_Condition;19;{"<>"};Comparison condition;;<,<=,=,>=,>,<>;false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 430,2640,200,7
              executeAtClientID: No
            END
            67713_67720:PFCTree.View.Link
              id: 67723
              fromID: 67713
              toID: 67720
              bounds: 98,2647,6,73
            END
            67717_67730:PFCTree.View.Link
              id: 67733
              fromID: 67717
              toID: 67730
              bounds: 528,2647,6,73
            END
            SerialDivergent67720:PFCTree.View.SerialDivergent
              id: 67720
              idEnd: 67721
              bounds: 0,2720,415,7
            END
            SerialDivergent67730:PFCTree.View.SerialDivergent
              id: 67730
              idEnd: 67731
              bounds: 430,2720,415,7
            END
            67720_67740:PFCTree.View.Link
              id: 67741
              fromID: 67720
              toID: 67740
              bounds: 98,2727,6,73
            END
            67720_67725:PFCTree.View.Link
              id: 67728
              fromID: 67720
              toID: 67725
              bounds: 313,2727,6,73
            END
            67730_67747:PFCTree.View.Link
              id: 67748
              fromID: 67730
              toID: 67747
              bounds: 528,2727,6,73
            END
            67730_67735:PFCTree.View.Link
              id: 67738
              fromID: 67730
              toID: 67735
              bounds: 743,2727,6,73
            END
            S_SET_CNT_NA_BS:PFCTree.View.Script
              id: 67740
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"PrevBatchQty"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"N/A"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 0,2800,200,7
              executeAtClientID: No
            END
            ParallelDivergent67725:PFCTree.View.ParallelDivergent
              id: 67725
              idEnd: 67726
              bounds: 215,2800,200,7
            END
            P_SET_NO_CF_VALUES_BS:PFCTree.View.Script
              id: 67747
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"SmplPlan1","NewCF"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"N/A","N/A"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 430,2800,200,7
              executeAtClientID: No
            END
            ParallelDivergent67735:PFCTree.View.ParallelDivergent
              id: 67735
              idEnd: 67736
              bounds: 645,2800,200,7
            END
            67740_67721:PFCTree.View.Link
              id: 67742
              fromID: 67740
              toID: 67721
              bounds: 98,2807,6,233
            END
            67725_67744:PFCTree.View.Link
              id: 67745
              fromID: 67725
              toID: 67744
              bounds: 313,2807,6,73
            END
            67747_67731:PFCTree.View.Link
              id: 67749
              fromID: 67747
              toID: 67731
              bounds: 528,2807,6,233
            END
            67735_67751:PFCTree.View.Link
              id: 67752
              fromID: 67735
              toID: 67751
              bounds: 743,2807,6,73
            END
            P_SET_CNT_NA_BS:PFCTree.View.Script
              id: 67744
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"PrevBatchQty"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"N/A"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 215,2880,200,7
              executeAtClientID: No
            END
            S_SET_NO_CF_VALUES_BS:PFCTree.View.Script
              id: 67751
              buildingBlockElementID: GENERIC.SET_GLOBAL_VAR
              arguments:
                iSet_VarName;19;{"SmplPlan1","NewCF"};Global variable to set;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );false;;
                iSet_VarValue;16;{"N/A","N/A"};Value to set to the global variable;;;true;;
                iSet_RPLName;19;{NULL,NULL};RPL name (when global variable is set from APRM characteristic);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_PhaseName;19;{NULL,NULL};Phase name (when global variable is set from APRM characteristic);;;true;;
                iSet_CharPath;19;{NULL,NULL};Complete path of the APRM characteristic (when global variable is set from APRM characteristic and it is not related to a BP). If iSet_PhaseName is informed, then this parameter is ignored;;;true;;
                iSet_CharName;19;{NULL,NULL};Characteristic name (when global variable is set from APRM characteristic);;;true;;
                iSet_AllocationRPLName;19;;Equipment Allocation RPL name (when global variable is set from IP21 tag);;=SQL_GET("SELECT DISTINCT TAG FROM EBR_PROCEDURE WHERE NOT STATUS IN ( 7 , 8 ) ORDER BY TAG");true;;
                iSet_AllocationPhase;19;{NULL,NULL};Equipment Allocation Phase (when global variable is set from IP21 tag);;;true;;
                iSet_EquipmentType;19;{NULL,NULL};Equipment type (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iSet_EquipmentId;19;;Equipment Id (when global variable is set from IP21 tag);;=STRUCT_GATHER(GET_EQUIPMENT_LIST(), "[*].name");true;;
                iSet_MeasurementAlias;19;{NULL,NULL};IP21 Tag alias to read (when global variable is set from IP21 tag);;=DISTINCT(STRUCT_NODES(STRUCT_GATHER(GET_CLASS_ATTRIBUTES(PARSE_LIST(GET_CONFIG ("EquipmentTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"))+"MeasurementsClass"), "[*][*].name")));true;;
              end
              type: 0
              order: 0
              bounds: 645,2880,200,7
              executeAtClientID: No
            END
            67744_67726:PFCTree.View.Link
              id: 67746
              fromID: 67744
              toID: 67726
              bounds: 313,2887,6,73
            END
            67751_67736:PFCTree.View.Link
              id: 67753
              fromID: 67751
              toID: 67736
              bounds: 743,2887,6,73
            END
            EndParallelDivergent67725:PFCTree.View.ParallelConvergent
              id: 67726
              idEnd: 67725
              bounds: 215,2960,200,7
            END
            EndParallelDivergent67735:PFCTree.View.ParallelConvergent
              id: 67736
              idEnd: 67735
              bounds: 645,2960,200,7
            END
            67726_67721:PFCTree.View.Link
              id: 67729
              fromID: 67726
              toID: 67721
              bounds: 313,2967,6,73
            END
            67736_67731:PFCTree.View.Link
              id: 67739
              fromID: 67736
              toID: 67731
              bounds: 743,2967,6,73
            END
            EndSerialDivergent67720:PFCTree.View.SerialConvergent
              id: 67721
              idEnd: 67720
              bounds: 0,3040,415,7
            END
            EndSerialDivergent67730:PFCTree.View.SerialConvergent
              id: 67731
              idEnd: 67730
              bounds: 430,3040,415,7
            END
            67721_67703:PFCTree.View.Link
              id: 67724
              fromID: 67721
              toID: 67703
              bounds: 205,3047,6,73
            END
            67731_67708:PFCTree.View.Link
              id: 67734
              fromID: 67731
              toID: 67708
              bounds: 635,3047,6,73
            END
            EndSerialDivergent67702:PFCTree.View.SerialConvergent
              id: 67703
              idEnd: 67702
              bounds: 0,3120,415,7
            END
            EndSerialDivergent67707:PFCTree.View.SerialConvergent
              id: 67708
              idEnd: 67707
              bounds: 430,3120,415,7
            END
            67703_67698:PFCTree.View.Link
              id: 67706
              fromID: 67703
              toID: 67698
              bounds: 205,3127,6,73
            END
            67708_67698:PFCTree.View.Link
              id: 67711
              fromID: 67708
              toID: 67698
              bounds: 635,3127,6,73
            END
            EndParallelDivergent67697:PFCTree.View.ParallelConvergent
              id: 67698
              idEnd: 67697
              bounds: 0,3200,845,7
            END
            67698_67764:PFCTree.View.Link
              id: 67767
              fromID: 67698
              toID: 67764
              bounds: 205,3207,6,73
            END
            SerialDivergent67764:PFCTree.View.SerialDivergent
              id: 67764
              idEnd: 67765
              bounds: 0,3280,415,7
            END
            67764_67769:PFCTree.View.Link
              id: 67770
              fromID: 67764
              toID: 67769
              bounds: 98,3287,6,73
            END
            67764_67772:PFCTree.View.Link
              id: 67775
              fromID: 67764
              toID: 67772
              bounds: 313,3287,6,73
            END
            S_SIG_WAIT_PROD_REVIEW_BS:PFCTree.View.Script
              id: 67769
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"OFFLINE","PREA","Filling"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL,NULL,NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"ProdReview","ProdReview","ProdReview"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,3360,200,7
              executeAtClientID: No
            END
            ParallelDivergent67772:PFCTree.View.ParallelDivergent
              id: 67772
              idEnd: 67773
              bounds: 215,3360,200,7
            END
            67769_67765:PFCTree.View.Link
              id: 67771
              fromID: 67769
              toID: 67765
              bounds: 98,3367,6,233
            END
            67772_67778:PFCTree.View.Link
              id: 67779
              fromID: 67772
              toID: 67778
              bounds: 313,3367,6,73
            END
            P_SIG_WAIT_PROD_REVIEW_BS:PFCTree.View.Script
              id: 67778
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_WAIT
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignalCheck;3;"All";Check type (all or any);;=TRANSLATE("SIGNAL_MANAGEMENT."+PARSE_LIST(GET_CONFIG("<SIGNAL_MANAGEMENT.CONFIG_KEYS>CheckTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"OFFLINE","PREA","FILLING"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL,NULL,NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"ProdReview","ProdReview","ProdReview"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
                iPartnerScript;19;;If any partner script is completed, then script returns NO;;;true;;
              end
              type: 0
              order: 0
              bounds: 215,3440,200,7
              executeAtClientID: No
            END
            67778_67773:PFCTree.View.Link
              id: 67780
              fromID: 67778
              toID: 67773
              bounds: 313,3447,6,73
            END
            EndParallelDivergent67772:PFCTree.View.ParallelConvergent
              id: 67773
              idEnd: 67772
              bounds: 215,3520,200,7
            END
            67773_67765:PFCTree.View.Link
              id: 67776
              fromID: 67773
              toID: 67765
              bounds: 313,3527,6,73
            END
            EndSerialDivergent67764:PFCTree.View.SerialConvergent
              id: 67765
              idEnd: 67764
              bounds: 0,3600,415,7
            END
            67765_35768:PFCTree.View.Link
              id: 67768
              fromID: 67765
              toID: 35768
              bounds: 98,3607,6,73
            END
            EndNode35768:PFCTree.View.EndNode
              id: 35768
              bounds: 0,3680,200,70
            END
          END
          bounds: 0,80,200,70
        END
        35766_31160:PFCTree.View.ControlLink
          id: 35771
          fromID: 35766
          toID: 31160
          bounds: 98,150,6,10
        END
        PRODUCTION_REVIEW_OP:PFCTree.View.Operation
          description: PRODUCTION REVIEW
          id: 31160
          order: 0
          design:
            BeginNode31161:PFCTree.View.BeginNode
              id: 31161
              bounds: 0,0,200,70
            END
            31161_31168:PFCTree.View.Link
              id: 67784
              fromID: 31161
              toID: 31168
              bounds: 98,70,6,10
            END
            ParallelDivergent31168:PFCTree.View.ParallelDivergent
              id: 31168
              idEnd: 31172
              bounds: 0,80,630,7
            END
            31168_36230:PFCTree.View.Link
              id: 36231
              fromID: 31168
              toID: 36230
              bounds: 98,87,6,73
            END
            31168_31171:PFCTree.View.Link
              id: 35737
              fromID: 31168
              toID: 31171
              bounds: 313,87,6,73
            END
            31168_31170:PFCTree.View.Link
              id: 31184
              fromID: 31168
              toID: 31170
              bounds: 528,87,6,73
            END
            SAMPLE_PLAN_REVIEW_BP:PFCTree.View.Phase
              description: Sample Plan Review
              buildingBlockElementID: GENERIC.INSTRUCTION
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;Ok button,1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"TEAM LEAD";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Sample plan reviewed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;YES;PEL Button visible;;;false;;
                iButton_Documents;19;;DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_Print;1;NO;Print button visible;;;false;;
                iButton_Report;19;;Reports available for report button. If Null, report button is not visible;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iEquipment_Type;3;;Equipment Type;;=STRUCT_GATHER(GET_EQUIPMENT_TYPES(), "[*].name");true;;
                iEquipment_AllocationPhase;3;;Equipment Allocation Phase;;;true;;
                iStepAutoComplete;18;;PLC step that signals the completion of the automatic process;;;true;;
                iInstruction;19;$$SmplPlanStr <> NULL ? PARSE_LIST($$SmplPlanStr, "|") : {""};Default Instructions;;;false;;
                iStep_Instruction;19;;Instructions for step;;;true;;
                iStep_Start;18;;Step range start;;;true;;
                iStep_End;18;;Step range end;;;true;;
                iForceViewPEL;1;NO;If Yes, PEL report must have been called to allow phase validation;;;false;;
                iEnforcedReportName;19;;The Report selected must be viewed by the user before sign off the Phase;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iLabelTemplate;3;;Label template to be printed;;=TRANSLATE ( "OVERALL.L_" + PARSE_LIST ( GET_CONFIG ( "<OVERALL.CONFIG_KEYS>LabelTemplateSpecialList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_Mover
              autoStart: No
              usePhaseRet: Yes
              Converge: No
              id: 36230
              order: 0
              bounds: 0,160,200,70
            END
            PRODUCTION_REVIEW_BP:PFCTree.View.Phase
              description: Production Review
              buildingBlockElementID: GENERIC.TABULAR_CHECK
              arguments:
                iSignature_Required;3;"1 signature";Required signature level;;1 signature,2 signatures;false;;
                iSignature_Permission1stLevel;3;"TEAM LEAD";Required RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Production review activities completed";Meaning Label for first level signature;;;true;;
                iSignature_Permission2ndLevel;3;NULL;Required RUDO for second level signature;;=GET_UDOS();true;;
                iSignature_Meaning2ndLevel;3;NULL;Meaning Label for second level signature;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases. Only for Batch RPL's;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;NO;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_453576"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iInstruction;19;{"Total Good Product Count: " +$$vs_GPTotal + " EA" + ".  Average Fill Weight: " + $$AvgFillWeight + " g.","PEL Cycle for Filling: " + $$FillPELCycleNo + ".  PEL cycle for Packing: " + $$EQCycle + ".  Previous C/F Batch Number: " + $$PrevBatchNum + ".  Previous C/F Quantity: " + $$PrevBatchQty,"Complete the production review activities"};Instruction List to be implemented by User;;;false;;
                iPassLabel;3;"Comply";Label for Pass Checkbox;;;false;;
                iFailLabel;3;"Non-Comply";Label for Fail Checkbox;;;false;;
                iChecklist;19;ProductionReviewBp_iChecklist;List of Checks to be completed;;;false;;
                iAutoAtypEvent;1;YES;Enable/Disable Auto Event on a failed check;;;false;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_Mover
              autoStart: No
              usePhaseRet: Yes
              Converge: No
              id: 31171
              order: 1
              bounds: 215,160,200,70
            END
            OVERPRINT_PROD_REVIEW_BP:PFCTree.View.Phase
              description: Production Review Overprint Verification
              buildingBlockElementID: MERPS_CHECK.PRINTED_COMPONENT
              arguments:
                iSignature_Permission1stLevel;3;"TEAM LEAD";RUDO for first level signature;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Overprint verified";Signature meaning for Standard 1st level;;;true;;
                iSignature_Config_Permission;3;"TEAM LEAD";RUDO for signature for AdHoc screen;;=GET_UDOS();true;;
                iSignature_Config_Meaning;3;"Overprint AdHoc selected";Signature meaning for AdHoc screen;;;true;;
                iSignature_PreviousPhaseCheck;19;{"OVERPRINT_END1_BATCH_BP"};The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_Event;1;YES;Manual Event Button visible;;;false;;
                iButton_PEL;1;NO;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_453576"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT ORDER BY DOCUMENT_ID");true;;
                iButton_AdHoc;1;NO;If yes then Ad-Hoc button is displayed in overview screen;;;false;;
                iCreateAtypEventForAdhoc;1;NO;Indicates if an atypical event is created when a component is added with Ad-hoc screen;;;true;;
                iSetup_Display;19;;Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_SignatureRequired;19;;Required signature level for Setup component;;={"Ok button","1 signature","2 signatures"};true;;
                iSetup_SignaturePermission2ndLevel;19;;RUDO for second level signature for Setup component;;=GET_UDOS();true;;
                iSetup_SignatureMeaning2ndLevel;19;;Signature meaning for 2nd level signature for Setup component;;;true;;
                iSetup_ComponentType;19;;Setup Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_ComponentAction;19;;Setup Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_ComponentReason;19;;Setup Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentSetupReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_Instruction;19;;Setup Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionSetupList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iSetup_AdditionalInfo1Label;19;;Setup additional info label 1;;;true;;
                iSetup_AdditionalInfo1Value;19;;Setup additional info value 1;;;true;;
                iSetup_AdditionalInfo2Label;19;;Setup additional info label 2;;;true;;
                iSetup_AdditionalInfo2Value;19;;Setup additional info value 2;;;true;;
                iSetup_AdditionalInfo3Label;19;;Setup additional info label 3;;;true;;
                iSetup_AdditionalInfo3Value;19;;Setup additional info value 3;;;true;;
                iSetup_RequirePassFail;17;;Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
                iRun_Display;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintProdReviewBp_iRun_Display : OverprintProdReviewBp_iRun_Display;Indicates where the component will be displayed (adhoc, expected or both);;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>DisplayTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_SignatureRequired;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintProdReviewBp_iRun_SignatureRequired : OverprintProdReviewBp_iRun_SignatureRequired;Required signature level for Run component;;={"Ok button","1 signature","2 signatures"};true;;
                iRun_SignaturePermission2ndLevel;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintProdReviewBp_iRun_SignaturePermission2ndLevel : OverprintProdReviewBp_iRun_SignaturePermission2ndLevel;RUDO for second level signature for Run component;;=GET_UDOS();true;;
                iRun_SignatureMeaning2ndLevel;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintProdReviewBp_iRun_SignatureMeaning2ndLevel : OverprintProdReviewBp_iRun_SignatureMeaning2ndLevel;Signature meaning for 2nd level signature for Run component;;;true;;
                iRun_ComponentType;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintProdReviewBp_iRun_ComponentType : OverprintProdReviewBp_iRun_ComponentType;Run Component Type list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentTypeList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_ComponentAction;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintProdReviewBp_iRun_ComponentAction : OverprintProdReviewBp_iRun_ComponentAction;Run Component action list;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentActionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_ComponentReason;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintProdReviewBp_iRun_ComponentReason : OverprintProdReviewBp_iRun_ComponentReason;Run Component reason;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentRunReasonList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_Instruction;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintProdReviewBp_iRun_Instruction : OverprintProdReviewBp_iRun_Instruction;Run Instruction;;=TRANSLATE ( "MERPS_CHECK." + PARSE_LIST ( GET_CONFIG ( "<MERPS_CHECK.CONFIG_KEYS>ComponentInstructionRunList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) ) );true;;
                iRun_AdditionalInfo1Label;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintProdReviewBp_iRun_AdditionalInfo1Label : OverprintProdReviewBp_iRun_AdditionalInfo1Label;Run additional info label 1;;;true;;
                iRun_AdditionalInfo1Value;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintProdReviewBp_iRun_AdditionalInfo1Value : OverprintProdReviewBp_iRun_AdditionalInfo1Value;Run additional info value 1;;;true;;
                iRun_AdditionalInfo2Label;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintProdReviewBp_iRun_AdditionalInfo2Label : OverprintProdReviewBp_iRun_AdditionalInfo2Label;Run additional info label 2;;;true;;
                iRun_AdditionalInfo2Value;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintProdReviewBp_iRun_AdditionalInfo2Value : OverprintProdReviewBp_iRun_AdditionalInfo2Value;Run additional info value 2;;;true;;
                iRun_AdditionalInfo3Label;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintProdReviewBp_iRun_AdditionalInfo3Label : OverprintProdReviewBp_iRun_AdditionalInfo3Label;Run additional info label 3;;;true;;
                iRun_AdditionalInfo3Value;19;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintProdReviewBp_iRun_AdditionalInfo3Value : OverprintProdReviewBp_iRun_AdditionalInfo3Value;Run additional info value 3;;;true;;
                iRun_RequirePassFail;17;$$vs_Ser2DCodeCheck = "Yes" ? AltOverprintProdReviewBp_iRun_RequirePassFail : OverprintProdReviewBp_iRun_RequirePassFail;Define if Pass/Fail checkboxes are displayed on the Standard Data Entry Screen;;;true;;
                iMissingItemAllowed;1;NO;If yes then BP can be closed with missing Component;;;false;;
                iValidation_OrderStatus;3;NULL;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;NULL;Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;NULL;Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;NULL;Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iAlarm_Alarm;19;;Global Var Holding Alarm Message;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iAlarm_BlockValidation;17;;Block Validation if Alarm message diffrent than null;;;true;;
              end
              wksResource: BC_UDO_Packing_Mover
              autoStart: No
              usePhaseRet: Yes
              Converge: No
              id: 31170
              order: 2
              bounds: 430,160,200,70
            END
            36230_31172:PFCTree.View.Link
              id: 36232
              fromID: 36230
              toID: 31172
              bounds: 98,230,6,10
            END
            31171_31172:PFCTree.View.Link
              id: 31187
              fromID: 31171
              toID: 31172
              bounds: 313,230,6,10
            END
            31170_31172:PFCTree.View.Link
              id: 31186
              fromID: 31170
              toID: 31172
              bounds: 528,230,6,10
            END
            ParallelConvergent31172:PFCTree.View.ParallelConvergent
              id: 31172
              idEnd: 31168
              bounds: 0,240,630,7
            END
            31172_31174:PFCTree.View.Link
              id: 35908
              fromID: 31172
              toID: 31174
              bounds: 98,247,6,73
            END
            EndNode31174:PFCTree.View.EndNode
              id: 31174
              bounds: 0,320,200,70
            END
          END
          bounds: 0,160,200,70
        END
        31160_35867:PFCTree.View.ControlLink
          id: 35871
          fromID: 31160
          toID: 35867
          bounds: 98,230,6,10
        END
        PROD_REVIEW_EOB_SCRIPTS:PFCTree.View.Operation
          description: PRODUCTION REVIEW
          id: 35867
          order: 0
          design:
            BeginNode35868:PFCTree.View.BeginNode
              id: 35868
              bounds: 0,0,200,70
            END
            35868_35873:PFCTree.View.Link
              id: 35876
              fromID: 35868
              toID: 35873
              bounds: 98,70,6,10
            END
            SerialDivergent35873:PFCTree.View.SerialDivergent
              id: 35873
              idEnd: 35874
              bounds: 0,80,415,7
            END
            35873_35878:PFCTree.View.Link
              id: 35879
              fromID: 35873
              toID: 35878
              bounds: 98,87,6,73
            END
            35873_35881:PFCTree.View.Link
              id: 35884
              fromID: 35873
              toID: 35881
              bounds: 313,87,6,73
            END
            S_PROD_COMPLETE_SIGNAL_SET_BS:PFCTree.View.Script
              id: 35878
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Production"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 0,160,200,7
              executeAtClientID: No
            END
            ParallelDivergent35881:PFCTree.View.ParallelDivergent
              id: 35881
              idEnd: 35882
              bounds: 215,160,200,7
            END
            35878_35874:PFCTree.View.Link
              id: 35880
              fromID: 35878
              toID: 35874
              bounds: 98,167,6,233
            END
            35881_35886:PFCTree.View.Link
              id: 35887
              fromID: 35881
              toID: 35886
              bounds: 313,167,6,73
            END
            P_PROD_COMPLETE_SIGNAL_SET_BS:PFCTree.View.Script
              id: 35886
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Production"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 215,240,200,7
              executeAtClientID: No
            END
            35886_35882:PFCTree.View.Link
              id: 35888
              fromID: 35886
              toID: 35882
              bounds: 313,247,6,73
            END
            EndParallelDivergent35881:PFCTree.View.ParallelConvergent
              id: 35882
              idEnd: 35881
              bounds: 215,320,200,7
            END
            35882_35874:PFCTree.View.Link
              id: 35885
              fromID: 35882
              toID: 35874
              bounds: 313,327,6,73
            END
            EndSerialDivergent35873:PFCTree.View.SerialConvergent
              id: 35874
              idEnd: 35873
              bounds: 0,400,415,7
            END
            35874_35889:PFCTree.View.Link
              id: 35892
              fromID: 35874
              toID: 35889
              bounds: 205,407,6,73
            END
            SerialDivergent35889:PFCTree.View.SerialDivergent
              id: 35889
              idEnd: 35890
              bounds: 0,480,415,7
            END
            35889_35894:PFCTree.View.Link
              id: 35895
              fromID: 35889
              toID: 35894
              bounds: 98,487,6,73
            END
            35889_35897:PFCTree.View.Link
              id: 35900
              fromID: 35889
              toID: 35897
              bounds: 313,487,6,73
            END
            S_QA_REVIEW_SET_BS:PFCTree.View.Script
              id: 35894
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Packaging"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 0,560,200,7
              executeAtClientID: No
            END
            ParallelDivergent35897:PFCTree.View.ParallelDivergent
              id: 35897
              idEnd: 35898
              bounds: 215,560,200,7
            END
            35894_35890:PFCTree.View.Link
              id: 35896
              fromID: 35894
              toID: 35890
              bounds: 98,567,6,233
            END
            35897_35902:PFCTree.View.Link
              id: 35903
              fromID: 35897
              toID: 35902
              bounds: 313,567,6,73
            END
            P_QA_REVIEW_SET_BS:PFCTree.View.Script
              id: 35902
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Packaging"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Completed"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 215,640,200,7
              executeAtClientID: No
            END
            35902_35898:PFCTree.View.Link
              id: 35904
              fromID: 35902
              toID: 35898
              bounds: 313,647,6,73
            END
            EndParallelDivergent35897:PFCTree.View.ParallelConvergent
              id: 35898
              idEnd: 35897
              bounds: 215,720,200,7
            END
            35898_35890:PFCTree.View.Link
              id: 35901
              fromID: 35898
              toID: 35890
              bounds: 313,727,6,73
            END
            EndSerialDivergent35889:PFCTree.View.SerialConvergent
              id: 35890
              idEnd: 35889
              bounds: 0,800,415,7
            END
            35890_35869:PFCTree.View.Link
              id: 35893
              fromID: 35890
              toID: 35869
              bounds: 98,807,6,73
            END
            EndNode35869:PFCTree.View.EndNode
              id: 35869
              bounds: 0,880,200,70
            END
          END
          bounds: 0,240,200,70
        END
        35867_31191:PFCTree.View.ControlLink
          id: 35905
          fromID: 35867
          toID: 31191
          bounds: 98,310,6,10
        END
        EndNode31191:PFCTree.View.EndNode
          id: 31191
          bounds: 0,320,200,70
        END
      END
      bounds: 509,1210,130,83
    END
    31158_3364:PFCTree.View.Link
      id: 31197
      fromID: 31158
      toID: 3364
      bounds: 567,1293,16,27
    END
    EndParallelDivergent3363:PFCTree.View.ParallelConvergent
      id: 3364
      idEnd: 3363
      bounds: 2,1320,1000,40
    END
    3364_30863:PFCTree.View.Link
      id: 30876
      fromID: 3364
      toID: 30863
      bounds: 495,1360,16,70
    END
    P_PROD_COMPLIANCE_UP:PFCTree.View.UnitProcedure
      description: PRODUCTION REVIEW
      id: 30863
      order: 0
      design:
        BeginNode30864:PFCTree.View.BeginNode
          id: 30864
          bounds: 0,0,200,70
        END
        30864_30865:PFCTree.View.ControlLink
          id: 30873
          fromID: 30864
          toID: 30865
          bounds: 98,70,6,10
        END
        PRODUCTION_COMPLIANCE_OP:PFCTree.View.Operation
          description: PRODUCTION REVIEW
          id: 30865
          order: 0
          design:
            BeginNode30866:PFCTree.View.BeginNode
              id: 30866
              bounds: 0,0,200,70
            END
            30866_30867:PFCTree.View.ControlLink
              id: 30869
              fromID: 30866
              toID: 30867
              bounds: 98,70,6,10
            END
            PRODUCTION_COMPLIANCE_BP:PFCTree.View.Phase
              description: Compliance manager production
              buildingBlockElementID: EVENT_MANAGEMENT.COMPLIANCE_MANAGER
              arguments:
                iSignature_Permission1stLevel;3;"TEAM LEAD";RUDO for signing;;=GET_UDOS();true;;
                iSignature_Meaning1stLevel;3;"Sign to store comments and approve";Meaning Label for signing;;;true;;
                iSignature_PreviousPhaseCheck;19;;The User who signs cannot be the same as the User who signed these Phases;;;true;;
                iButton_PEL;1;NO;PEL Button visible;;;false;;
                iButton_Documents;19;{"INS_453576"};DOCUMENT_ID in DOCUMENT Table. If Null, "View SOP" button not visible;;=SQL_GET("Select DOCUMENT_ID from DOCUMENT");true;;
                iButton_Report1;19;{"EBR Exception Report"};Reports available for report button 1. If Null, report button 1 is not visible;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iButton_Report2;19;{"EBR Batch Report"};Reports available for report button 2. If Null, report button 2 is not visible;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iManager;1;YES;YES = Production, NO = QA;;;false;;
                iEnforcedReportName;19;{"EBR Exception Report"};The Report selected must be viewed by the user before sign off the Phase;;=PARSE_LIST(GET_CONFIG("EBRReportNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_OrderStatus;3;NULL;Expected order status to allow phase to be validated. If null order status is not controlled;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>AllowBPValidationOrderStatusList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalType;3;NULL;Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));true;;
                iValidation_SignalName;3;NULL;Signal name;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iValidation_SignalValue;3;NULL;Signal value;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
              end
              wksResource: BC_UDO_Packing_Mover
              autoStart: No
              usePhaseRet: Yes
              Converge: No
              id: 30867
              order: 0
              bounds: 0,80,200,70
            END
            30867_31198:PFCTree.View.Link
              id: 31201
              fromID: 30867
              toID: 31198
              bounds: 98,150,6,10
            END
            SerialDivergent31198:PFCTree.View.SerialDivergent
              id: 31198
              idEnd: 31199
              bounds: 0,160,415,7
            END
            31198_31212:PFCTree.View.Link
              id: 31213
              fromID: 31198
              toID: 31212
              bounds: 98,167,6,73
            END
            31198_31203:PFCTree.View.Link
              id: 31206
              fromID: 31198
              toID: 31203
              bounds: 313,167,6,73
            END
            S_QA_ATYP_MGR_BS:PFCTree.View.Script
              id: 31212
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Compliance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Ready"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 0,240,200,7
              executeAtClientID: No
            END
            ParallelDivergent31203:PFCTree.View.ParallelDivergent
              id: 31203
              idEnd: 31204
              bounds: 215,240,200,7
            END
            31212_31199:PFCTree.View.Link
              id: 31214
              fromID: 31212
              toID: 31199
              bounds: 98,247,6,233
            END
            31203_31208:PFCTree.View.Link
              id: 31209
              fromID: 31203
              toID: 31208
              bounds: 313,247,6,73
            END
            P_QA_ATYP_MGR_BS:PFCTree.View.Script
              id: 31208
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_SET
              arguments:
                iSignalType;3;"Process Order";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG ("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
                iSignal_Name;19;{"Compliance"};List of signal names;;=PARSE_LIST(GET_CONFIG("SignalNameList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));true;;
                iSignal_GlobalVariable;19;{NULL};List of signal names taken from global variable;;=PARSE_LIST ( GET_CONFIG ( "GlobalVarList" ), GET_CONFIG ( "<OVERALL.CONFIG_KEYS>ListSeparator" ) );true;;
                iSignal_Value;19;{"Ready"};List of signal values;;=PARSE_LIST(GET_CONFIG("SignalValueList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator"));false;;
              end
              type: 0
              order: 0
              bounds: 215,320,200,7
              executeAtClientID: No
            END
            31208_31204:PFCTree.View.Link
              id: 31210
              fromID: 31208
              toID: 31204
              bounds: 313,327,6,73
            END
            EndParallelDivergent31203:PFCTree.View.ParallelConvergent
              id: 31204
              idEnd: 31203
              bounds: 215,400,200,7
            END
            31204_31199:PFCTree.View.Link
              id: 31207
              fromID: 31204
              toID: 31199
              bounds: 313,407,6,73
            END
            EndSerialDivergent31198:PFCTree.View.SerialConvergent
              id: 31199
              idEnd: 31198
              bounds: 0,480,415,7
            END
            31199_30868:PFCTree.View.Link
              id: 31202
              fromID: 31199
              toID: 30868
              bounds: 98,487,6,73
            END
            EndNode30868:PFCTree.View.EndNode
              id: 30868
              bounds: 0,560,200,70
            END
          END
          bounds: 0,80,200,70
        END
        30865_30872:PFCTree.View.ControlLink
          id: 31211
          fromID: 30865
          toID: 30872
          bounds: 98,150,6,10
        END
        EndNode30872:PFCTree.View.EndNode
          id: 30872
          bounds: 0,160,200,70
        END
      END
      bounds: 437,1430,130,83
    END
    30863_30879:PFCTree.View.ControlLink
      id: 30940
      fromID: 30863
      toID: 30879
      bounds: 495,1513,16,27
    END
    P_END_SCRIPTS_UP:PFCTree.View.UnitProcedure
      description: END SCRIPTS
      id: 30879
      order: 0
      design:
        BeginNode30880:PFCTree.View.BeginNode
          id: 30880
          bounds: 0,0,200,70
        END
        30880_30881:PFCTree.View.ControlLink
          id: 30938
          fromID: 30880
          toID: 30881
          bounds: 98,70,6,10
        END
        END_SCRIPTS_OP:PFCTree.View.Operation
          description: END SCRIPTS
          id: 30881
          order: 0
          design:
            BeginNode30882:PFCTree.View.BeginNode
              id: 30882
              bounds: 0,0,200,70
            END
            30882_30889:PFCTree.View.Link
              id: 51139
              fromID: 30882
              toID: 30889
              bounds: 98,70,6,10
            END
            SerialDivergent30889:PFCTree.View.SerialDivergent
              id: 30889
              idEnd: 30894
              bounds: 0,80,415,7
            END
            30889_30890:PFCTree.View.Link
              id: 30916
              fromID: 30889
              toID: 30890
              bounds: 98,87,6,73
            END
            30889_30891:PFCTree.View.Link
              id: 30917
              fromID: 30889
              toID: 30891
              bounds: 313,87,6,73
            END
            S_BATCH_SIG_CLEAR_BS:PFCTree.View.Script
              id: 30890
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_CLEAR
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
              end
              type: 0
              order: 0
              bounds: 0,160,200,7
              executeAtClientID: No
            END
            ParallelDivergent30891:PFCTree.View.ParallelDivergent
              id: 30891
              idEnd: 30893
              bounds: 215,160,200,7
            END
            30890_30894:PFCTree.View.Link
              id: 30918
              fromID: 30890
              toID: 30894
              bounds: 98,167,6,233
            END
            30891_30892:PFCTree.View.Link
              id: 30919
              fromID: 30891
              toID: 30892
              bounds: 313,167,6,73
            END
            P_BATCH_SIG_CLEAR_BS:PFCTree.View.Script
              id: 30892
              buildingBlockElementID: SIGNAL_MANAGEMENT.SIGNAL_CLEAR
              arguments:
                iSignalType;3;"Batch";Identification of the type of signal;;=TRANSLATE("OVERALL."+PARSE_LIST(GET_CONFIG("<OVERALL.CONFIG_KEYS>SignalTypeList"),GET_CONFIG("<OVERALL.CONFIG_KEYS>ListSeparator")));false;;
              end
              type: 0
              order: 0
              bounds: 215,240,200,7
              executeAtClientID: No
            END
            30892_30893:PFCTree.View.Link
              id: 30920
              fromID: 30892
              toID: 30893
              bounds: 313,247,6,73
            END
            ParallelConvergent30893:PFCTree.View.ParallelConvergent
              id: 30893
              idEnd: 30891
              bounds: 215,320,200,7
            END
            30893_30894:PFCTree.View.Link
              id: 30921
              fromID: 30893
              toID: 30894
              bounds: 313,327,6,73
            END
            SerialConvergent30894:PFCTree.View.SerialConvergent
              id: 30894
              idEnd: 30889
              bounds: 0,400,415,7
            END
            30894_50899:PFCTree.View.Link
              id: 50902
              fromID: 30894
              toID: 50899
              bounds: 205,407,6,73
            END
            SerialDivergent50899:PFCTree.View.SerialDivergent
              id: 50899
              idEnd: 50900
              bounds: 0,480,415,7
            END
            50899_50905:PFCTree.View.Link
              id: 50906
              fromID: 50899
              toID: 50905
              bounds: 98,487,6,73
            END
            50899_50908:PFCTree.View.Link
              id: 50911
              fromID: 50899
              toID: 50908
              bounds: 313,487,6,73
            END
            P_RECORD_BATCH_DATA_BS:PFCTree.View.Script
              id: 50905
              buildingBlockElementID: ORDER_MANAGEMENT.SET_UP_OP_NAME_DESC
              type: 0
              order: 0
              bounds: 0,560,200,7
              executeAtClientID: No
            END
            ParallelDivergent50908:PFCTree.View.ParallelDivergent
              id: 50908
              idEnd: 50909
              bounds: 215,560,200,7
            END
            50905_50900:PFCTree.View.Link
              id: 50907
              fromID: 50905
              toID: 50900
              bounds: 98,567,6,233
            END
            50908_50913:PFCTree.View.Link
              id: 50914
              fromID: 50908
              toID: 50913
              bounds: 313,567,6,73
            END
            S_RECORD_BATCH_DATA_BS:PFCTree.View.Script
              id: 50913
              buildingBlockElementID: ORDER_MANAGEMENT.SET_UP_OP_NAME_DESC
              type: 0
              order: 0
              bounds: 215,640,200,7
              executeAtClientID: No
            END
            50913_50909:PFCTree.View.Link
              id: 50915
              fromID: 50913
              toID: 50909
              bounds: 313,647,6,73
            END
            EndParallelDivergent50908:PFCTree.View.ParallelConvergent
              id: 50909
              idEnd: 50908
              bounds: 215,720,200,7
            END
            50909_50900:PFCTree.View.Link
              id: 50912
              fromID: 50909
              toID: 50900
              bounds: 313,727,6,73
            END
            EndSerialDivergent50899:PFCTree.View.SerialConvergent
              id: 50900
              idEnd: 50899
              bounds: 0,800,415,7
            END
            50900_50916:PFCTree.View.Link
              id: 50919
              fromID: 50900
              toID: 50916
              bounds: 205,807,6,73
            END
            SerialDivergent50916:PFCTree.View.SerialDivergent
              id: 50916
              idEnd: 50917
              bounds: 0,880,415,7
            END
            50916_50922:PFCTree.View.Link
              id: 50923
              fromID: 50916
              toID: 50922
              bounds: 98,887,6,73
            END
            50916_50925:PFCTree.View.Link
              id: 50928
              fromID: 50916
              toID: 50925
              bounds: 313,887,6,73
            END
            P_RECORD_MODIFICATIONS_BS:PFCTree.View.Script
              id: 50922
              buildingBlockElementID: ORDER_MANAGEMENT.TRANSFER_CR_MODIFICATIONS
              arguments:
                iReasonToDiscard;19;;The reasons defined in this parameter are not transferred;;;true;;
              end
              type: 0
              order: 0
              bounds: 0,960,200,7
              executeAtClientID: No
            END
            ParallelDivergent50925:PFCTree.View.ParallelDivergent
              id: 50925
              idEnd: 50926
              bounds: 215,960,200,7
            END
            50922_50917:PFCTree.View.Link
              id: 50924
              fromID: 50922
              toID: 50917
              bounds: 98,967,6,233
            END
            50925_50930:PFCTree.View.Link
              id: 50931
              fromID: 50925
              toID: 50930
              bounds: 313,967,6,73
            END
            S_RECORD_MODIFICATIONS_BS:PFCTree.View.Script
              id: 50930
              buildingBlockElementID: ORDER_MANAGEMENT.TRANSFER_CR_MODIFICATIONS
              arguments:
                iReasonToDiscard;19;;The reasons defined in this parameter are not transferred;;;true;;
              end
              type: 0
              order: 0
              bounds: 215,1040,200,7
              executeAtClientID: No
            END
            50930_50926:PFCTree.View.Link
              id: 50932
              fromID: 50930
              toID: 50926
              bounds: 313,1047,6,73
            END
            EndParallelDivergent50925:PFCTree.View.ParallelConvergent
              id: 50926
              idEnd: 50925
              bounds: 215,1120,200,7
            END
            50926_50917:PFCTree.View.Link
              id: 50929
              fromID: 50926
              toID: 50917
              bounds: 313,1127,6,73
            END
            EndSerialDivergent50916:PFCTree.View.SerialConvergent
              id: 50917
              idEnd: 50916
              bounds: 0,1200,415,7
            END
            50917_30907:PFCTree.View.Link
              id: 50921
              fromID: 50917
              toID: 30907
              bounds: 98,1207,6,73
            END
            EndNode30907:PFCTree.View.EndNode
              id: 30907
              bounds: 0,1280,200,70
            END
          END
          bounds: 0,80,200,70
        END
        30881_30937:PFCTree.View.ControlLink
          id: 30939
          fromID: 30881
          toID: 30937
          bounds: 98,150,6,10
        END
        EndNode30937:PFCTree.View.EndNode
          id: 30937
          bounds: 0,160,200,70
        END
      END
      bounds: 437,1540,130,83
    END
    30879_3:PFCTree.View.ControlLink
      id: 30941
      fromID: 30879
      toID: 3
      bounds: 495,1623,16,43
    END
    EndNode3:PFCTree.View.EndNode
      id: 3
      bounds: 437,1666,130,32
    END
  END
END
CHECKSUM=2468869366